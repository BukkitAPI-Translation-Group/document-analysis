{
	"ReservedChannelException":{
		"ClassDescription":"如果插件尝试去注册一个预留通道则抛出此异常(例如\"REGISTER通道\")。"
	},
	"Entity":{
		"getLocation":"Stores the entity's current position in the provided Location object.\n<p>\nIf the provided Location is null this method does nothing and returns\nnull.",
		"getWorld":"Gets the current world this entity resides in",
		"setFallDistance":"Sets the fall distance for this entity",
		"hasGravity":"Returns whether gravity applies to this entity.",
		"ClassDescription":"Represents a base entity in the world",
		"leaveVehicle":"Leave the current vehicle. If the entity is currently in a vehicle (and\nis removed from it), true will be returned, otherwise false will be\nreturned.",
		"setGlowing":"Sets whether the entity has a team colored (default: white) glow.",
		"setLastDamageCause":"Record the last {@link EntityDamageEvent} inflicted on this entity",
		"addPassenger":"Add a passenger to the vehicle.",
		"setTicksLived":"Sets the amount of ticks this entity has lived for.\n<p>\nThis is the equivalent to \"age\" in entities. May not be less than one\ntick.",
		"setFireTicks":"Sets the entity's current fire ticks (ticks before the entity stops\nbeing on fire).",
		"isDead":"Returns true if this entity has been marked for removal.",
		"getUniqueId":"Returns a unique and persistent id for this entity",
		"eject":"Eject any passenger.",
		"setVelocity":"Sets this entity's velocity",
		"getNearbyEntities":"Returns a list of entities within a bounding box centered around this\nentity",
		"getFireTicks":"Returns the entity's current fire ticks (ticks before the entity stops\nbeing on fire).",
		"setInvulnerable":"Sets whether the entity is invulnerable or not.\n<p>\nWhen an entity is invulnerable it can only be damaged by players in\ncreative mode.",
		"isGlowing":"Gets whether the entity is glowing or not.",
		"getTicksLived":"Gets the amount of ticks this entity has lived for.\n<p>\nThis is the equivalent to \"age\" in entities.",
		"getServer":"Gets the {@link Server} that contains this Entity",
		"setPassenger":"Set the passenger of a vehicle.",
		"getType":"Get the type of the entity.",
		"getLastDamageCause":"Retrieve the last {@link EntityDamageEvent} inflicted on this entity.\nThis event may have been cancelled.",
		"isCustomNameVisible":"Gets whether or not the mob's custom name is displayed client side.\n<p>\nThis value has no effect on players, they will always display their\nname.",
		"getScoreboardTags":"Returns a set of tags for this entity.\n<br>\nEntities can have no more than 1024 tags.",
		"getMaxFireTicks":"Returns the entity's maximum fire ticks.",
		"getPortalCooldown":"Gets the period of time (in ticks) before this entity can use a portal.",
		"getVelocity":"Gets this entity's current velocity",
		"getVehicle":"Get the vehicle that this player is inside. If there is no vehicle,\nnull will be returned.",
		"teleport":"Teleports this entity to the target Entity. If this entity is riding a\nvehicle, it will be dismounted prior to teleportation.",
		"playEffect":"Performs the specified {@link EntityEffect} for this entity.\n<p>\nThis will be viewable to all players near the entity.",
		"getWidth":"Gets the entity's width",
		"remove":"Mark the entity's removal.",
		"getFallDistance":"Returns the distance this entity has fallen",
		"getHeight":"Gets the entity's height",
		"setSilent":"Sets whether the entity is silent or not.\n<p>\nWhen an entity is silent it will not produce any sound.",
		"getEntityId":"Returns a unique id for this entity",
		"setCustomNameVisible":"Sets whether or not to display the mob's custom name client side. The\nname will be displayed above the mob similarly to a player.\n<p>\nThis value has no effect on players, they will always display their\nname.",
		"setPortalCooldown":"Sets the period of time (in ticks) before this entity can use a portal.",
		"isInsideVehicle":"Returns whether this entity is inside a vehicle.",
		"isValid":"Returns false if the entity has died or been despawned for some other\nreason.",
		"isEmpty":"Check if a vehicle has passengers.",
		"isInvulnerable":"Gets whether the entity is invulnerable or not.",
		"addScoreboardTag":"Add a tag to this entity.\n<br>\nEntities can have no more than 1024 tags.",
		"removeScoreboardTag":"Removes a given tag from this entity.",
		"getPassengers":"Gets a list of passengers of this vehicle.\n<p>\nThe returned list will not be directly linked to the entity's current\npassengers, and no guarantees are made as to its mutability.",
		"getPistonMoveReaction":"Returns the reaction of the entity when moved by a piston.",
		"getPassenger":"Gets the primary passenger of a vehicle. For vehicles that could have\nmultiple passengers, this will only return the primary passenger.",
		"isOnGround":"Returns true if the entity is supported by a block. This value is a\nstate updated by the server and is not recalculated unless the entity\nmoves.",
		"setGravity":"Sets whether gravity applies to this entity.",
		"isSilent":"Gets whether the entity is silent or not.",
		"removePassenger":"Remove a passenger from the vehicle."
	},
	"Creature":{
		"getTarget":"Gets the current target of this Creature",
		"setTarget":"Instructs this Creature to set the specified LivingEntity as its\r\ntarget.\r\n<p>\r\nHostile creatures may attack their target, and friendly creatures may\r\nfollow their target.",
		"ClassDescription":"Represents a Creature. Creatures are non-intelligent monsters or animals\r\nwhich have very simple abilities."
	},
	"BlockCanBuildEvent":{
		"getMaterial":"获取我们试图放置的方块的 Material.\r\n原文：Gets the Material that we are trying to place.",
		"setBuildable":"设置此方块是否可以在此建造。\r\n<p>\r\n原文：Sets whether the block can be built here or not.",
		"getMaterialId":"获取我们试图放置的方块的ID.\r\n<p>\r\n原文：Gets the Material ID for the Material that we are trying to place.",
		"ClassDescription":"当我们尝试建造一个方块的时候，可以看到我们是否可以在此建造它。\r\n<p>\r\n注意:\r\n<ul>\r\n<li>方法 getBlock() 返回的是我们正试图放置在其上面的方块,不是我们试图放置的方块。\r\n<li>如果你想知道玩家放置的是什么方块, 用 {@link #getMaterial()} 或者 {@link #getMaterialId()} 来代替.\r\n</ul>",
		"isBuildable":"获取是否可以在此建造此方块\r\n<p>\r\n默认情况下, 是否可以在此建造返回的是 Minecraft的值。\r\n<p>\r\n原文：Gets whether or not the block can be built here.\r\n<p>\r\nBy default, returns Minecraft's answer on whether the block can be\r\nbuilt here or not."
	},
	"EntityExplodeEvent":{
		"getLocation":"返回爆炸发生的位置.\r\n<p>\r\n从此值获取一个实体是不可能的，因为实体不存在于此世界上.\r\n<p>\r\n原文:Returns the location where the explosion happened.\r\n<p>\r\nIt is not possible to get this value from the Entity as the Entity no\r\nlonger exists in the world.",
		"blockList":"返回被将移除或已被这次爆炸移除的方块列表.\r\n<p>\r\n原文:\r\nReturns the list of blocks that would have been removed or were removed\r\nfrom the explosion event.",
		"ClassDescription":"当一个实体爆炸的时候触发本事件",
		"setYield":"设置这次爆炸掉落的方块的百分比.\r\n<p>\r\n原文:Sets the percentage of blocks to drop from this explosion",
		"getYield":"返回这次爆炸掉落方块占所有影响到的方块的百分比.\r\n<p>\r\n原文:Returns the percentage of blocks to drop from this explosion"
	},
	"Server":{
		"getRecipesFor":"获取一个合成ItemStack的所有配方,如果副ID为-1将匹配所有的数据值\n<p>\n原文:Get a list of all recipes for a given item. The stack size is ignored\nin comparisons. If the durability is -1, it will match any data value.",
		"clearRecipes":"清空配方\n<p>\n原文:Clears the list of crafting recipes.",
		"getAdvancement":"Get the advancement specified by this key.",
		"getOnlinePlayers":"获得一个当前所有已登录玩家的集合.\n<p>\n原文:Gets a view of all currently logged in players. This {@linkplain\nCollections#unmodifiableCollection(Collection) view} is a reused\nobject, making some operations like {@link Collection#size()}\nzero-allocation.\n<p>\nThe collection is a view backed by the internal representation, such\nthat, changes to the internal state of the server will be reflected\nimmediately. However, the reuse of the returned collection (identity)\nis not strictly guaranteed for future or all implementations. Casting\nthe collection, or relying on interface implementations (like {@link\nSerializable} or {@link List}), is deprecated.\n<p>\nIteration behavior is undefined outside of self-contained main-thread\nuses. Normal and immediate iterator use without consequences that\naffect the collection are fully supported. The effects following\n(non-exhaustive) {@link Entity#teleport(Location) teleportation},\n{@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\nString) kicking} are undefined. Any use of this collection from\nasynchronous threads is unsafe.\n<p>\nFor safe consequential iteration or mimicking the old array behavior,\nusing {@link Collection#toArray(Object[])} is recommended. For making\nsnapshots, {@link ImmutableList#copyOf(Collection)} is recommended.",
		"getPlayer":"通过UUID获取玩家的实例\n<p>\n原文:Gets the player with the given UUID.",
		"getWorld":"通过UUID获取World实例\n<p>\n原文:Gets the world from the given Unique ID.",
		"getName":"获得服务器名字.\n<p>\n原文:Gets the name of this server implementation.",
		"getPluginCommand":"获取一个{@link PluginCommand}通过给定的name或者别称\n<p>\n原文:Gets a {@link PluginCommand} with the given name or alias.",
		"getMessenger":"获取{@link Messenger}实例\n<p>\n原文:Gets the {@link Messenger} responsible for this server.",
		"getMotd":"获得服务器列表中服务器所显示的消息(服务器MOTD).\n<p>\n原文:Gets the message that is displayed on the server list.",
		"ClassDescription":"代表执行插件的服务器.",
		"getServerName":"获得服务器名字.\n<p>\n原文:Get the name of this server.",
		"getConsoleSender":"获取一个{@link ConsoleCommandSender} 将被作为服务器的标准输入(译注:该方法用于获取控制台)",
		"getAnimalSpawnLimit":"获取一个区块最大可生成动物数\n<p>\n原文:Gets user-specified limit for number of animals that can spawn in a\nchunk.",
		"setDefaultGameMode":"设置新玩家的默认 {@link GameMode}.\n<p>\n原文:Sets the default {@link GameMode} for new players.",
		"getOperators":"获取一个包含所有OP的Set实例\n<p>\n原文:Gets a set containing all player operators.",
		"getBannedPlayers":"获得一组所有被服务器封禁的玩家.\n<p>\n原文:Gets a set containing all banned players.",
		"createChunkData":"创建一个 ChunkData 实例，以用于区块生成。\n<p>\n原文:\nCreate a ChunkData for use in a generator.\n\nSee {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}",
		"reloadWhitelist":"重新加载服务器白名单配置.\n<p>\n原文:Reloads the whitelist from disk.",
		"getWaterAnimalSpawnLimit":"获取一个区块最大可生成水生生物数\n<p>\n原文:Gets user-specified limit for number of water animals that can spawn in\na chunk.",
		"getSpawnRadius":"获得此世界的出生点保护半径.\n<p>\n原文:Gets the radius, in blocks, around each worlds spawn point to protect.",
		"getUnsafe":"",
		"loadServerIcon":"从image中缓存为CachedServerIcon\n<p>\n原文:Creates a cached server-icon for the specific image.\n<p>\n大小和类型必须在允许范围内,否则将会抛出{@link Exception}.\n<p>\n原文:Size and type are implementation defined. An incompatible file is\nguaranteed to throw an implementation-defined {@link Exception}.",
		"getOfflinePlayers":"获取所有登陆过服务器的玩家\n<p>\n原文:Gets every player that has ever played on this server.",
		"getAllowEnd":"获取该服务器是否允许末地\n<p>\n原文:Gets whether this server allows the End or not.",
		"unloadWorld":"通过给定的Wrold实例从服务器卸载一个World\n<p>\n原文:Unloads the given world.",
		"setWhitelist":"设置该服务器是是否开启白名单\n<p>\n原文:Sets if the server is whitelisted.",
		"getLogger":"返回此服务器的日志记录.\n<p>\n原文:Returns the primary logger associated with this server instance.",
		"getAllowNether":"Gets whether this server allows the Nether or not.",
		"getIPBans":"获取一个被ban的IP的Set实例\n<p>\n原文:Gets a set containing all current IPs that are banned.",
		"getBukkitVersion":"获得服务器运行的Bukkit版本.\n<p>\n原文:Gets the Bukkit version that this server is running.",
		"getMap":"通过给定的item ID获取MapView实例\n<p>\n原文:Gets the map from the given item ID.",
		"isPrimaryThread":"检查当前方法是否在主线程执行\n<p>\n原文:Checks the current thread against the expected primary thread for the\nserver.\n<p>\n<b>注意:</b> 该方法不应该用于检查当前同步状态,当前线程为主线程表明它确实为同步,但是不能排除其他原因.",
		"getItemFactory":"获取ItemFactory的实例(用于 {@link ItemMeta})\n<p>\n原文:Gets the instance of the item factory (for {@link ItemMeta}).",
		"getOfflinePlayer":"通过UUID获取OfflinePlayer实例\n<p>\n原文:Gets the player by the given UUID, regardless if they are offline or\nonline.\n<p>\n对于该方法而言所有玩家都是存在的,即使玩家从未登录过服务器也会返回一个OfflinePlayer实例\n<p>\n原文:This will return an object even if the player does not exist. To this\nmethod, all players will exist.",
		"getScoreboardManager":"获取ScoreboardManager实例\n<p>\n原文:Gets the instance of the scoreboard manager.\n<p>\n该实例在至少有一个世界被加载后才会创建\n<p>\n原文:This will only exist after the first world has loaded.",
		"getServicesManager":"获取ServicesManager\n<p>\n原文:Gets a services manager.",
		"getServerIcon":"获取服务器默认图标\n<p>\n原文:Gets an instance of the server's default server-icon.",
		"createBossBar":"创建一个Boos血量条实例。血量条的进度默认为1.0。\n<p>\n原文:\nCreates a boss bar instance to display to players. The progress\ndefaults to 1.0",
		"getServerId":"获得服务器的ID,该ID通常由数字和字母组成,这个ID可以用于识别服务器\n<p>\n原文:Get an ID of this server. The ID is a simple generally alphanumeric ID\nthat can be used for uniquely identifying this server.",
		"createMerchant":"Creates an empty merchant.",
		"getCommandAliases":"获取一个定义于服务器配置文件中的命令别名列表\n<p>\n原文:Gets a list of command aliases defined in the server properties.",
		"shutdown":"彻底关闭服务器.\n<p>\n原文:Shutdowns the server, stopping everything.",
		"getWorldContainer":"获取 {@link World}的文件夹的File实例.",
		"getTicksPerAnimalSpawns":"获得每隔多少ticks生成动物\n<p>\n原文:Gets default ticks per animal spawns value.\n<p>\n<b>示例:</b>\n<ul>\n<li>值为1时服务器将尝试每tick都生成动物\n<li>值为400服务器将每400tick尝试生成一次动物\n<li>一个低于0的值将会被重置设为默认值(默认为400)\n</ul>\n<p>\n<b>注意:</b>如果设置为0,动物生成将会被禁止,我们推荐使用spawn-animals代替用于控制动物生成\n<p>",
		"setSpawnRadius":"设置这个世界的出生点保护半径.\n<p>\n原文:Sets the radius, in blocks, around each worlds spawn point to protect.",
		"getBanList":"通过提供的BanList.Type来获取一个BanList\n<p>\n原文:Gets a ban list for the supplied type.\n<p>\nban玩家name将不会受到支持,ban UUID更好\n<p>\n原文:Bans by name are no longer supported and this method will return\nnull when trying to request them. The replacement is bans by UUID.",
		"broadcast":"向具有给定权限的玩家发送一条信息\n<p>\n原文:Broadcasts the specified message to every user with the given\npermission name.",
		"getIp":"获得当前服务器绑定的IP,当未设置时返回为空\n<p>\n原文:Get the IP that this server is bound to, or empty string if not\nspecified.",
		"getIdleTimeout":"获取自动踢出闲置玩家的时间.\n<p>\n原文:Gets the idle kick timeout.",
		"getViewDistance":"获得当前设置的视距\n<p>\n原文:Get the view distance from this server.",
		"savePlayers":"将以记载的玩家储存到硬盘\n<p>\n原文:Writes loaded players to disk.",
		"reloadData":"只重载Minecraft游戏数据. 这包括自定义的进度和掉落表.\n<p>\n原文:Reload only the Minecraft data for the server. This includes custom\nadvancements and loot tables.",
		"advancementIterator":"Get an iterator through all advancements. Advancements cannot be removed\nfrom this iterator,",
		"getPluginManager":"获取PluginManager接口的实例\n<p>\n原文:Gets the plugin manager for interfacing with plugins.",
		"resetRecipes":"重置配方\n<p>\n原文:Resets the list of crafting recipes to the default.",
		"reload":"重新加载服务器并刷新设置和插件信息.\n<p>\n原文:Reloads the server, refreshing settings and plugin information.",
		"getShutdownMessage":"获取服务器关闭时给玩家发送的默认消息\n<p>\n原文:Gets the default message that is displayed when the server is stopped.",
		"getWarningState":"获取当前警告状态\n<p>\n原文:Gets the current warning state for the server.",
		"createWorld":"使用给定的名字和配置来创建或者加载一个World\n<p>\n原文:Creates or loads a world with the given name using the specified\noptions.\n<p>\n如果该World已经被加载,它相当于返回getWorld(creator.name())\n<p>\n原文:If the world is already loaded, it will just return the equivalent of\ngetWorld(creator.name()).",
		"getUpdateFolderFile":"获取表示更新文件夹的 File 实例. 系统将会在插件加载时选择适当的时机利用此文件夹来安全地更新插件.\n<p>\n原文:\nGets the update folder. The update folder is used to safely update\nplugins at the right moment on a plugin load.",
		"getOnlineMode":"获得服务器是否开启了正版模式.\n<p>\n原文:Gets whether the Server is in online mode or not.",
		"getScheduler":"获取BukkitScheduler接口的实例用来安排任务\n<p>\n原文:Gets the scheduler for managing scheduled events.",
		"getVersion":"获得服务器版本字符串.\n<p>\n原文:Gets the version string of this server implementation.",
		"hasWhitelist":"获取该服务器是否有白名单\n<p>\n原文:Gets whether this server has a whitelist or not.",
		"getUpdateFolder":"获取更新文件夹的名字. 系统将会在插件加载时选择适当的时机利用此文件夹来安全地更新插件.\n<p>\n更新文件夹相对于插件文件夹.\n<p>\nTips：如何使用更新文件夹来实现更新您的插件呢？（服主和开发者都可以了解下)：\n<ol>\n<li>创建更新文件夹，已有则跳过此步.\n<li>下载您要更新的插件到此目录 (注意：jar文件名必须和在插件目录下的jar文件名一样，否则不起作用。).\n<li>重载/重启服务器.\n<li>OK，看效果吧.\n</ol>\n\n原文:\nGets the name of the update folder. The update folder is used to safely\nupdate plugins at the right moment on a plugin load.\n<p>\nThe update folder name is relative to the plugins folder.",
		"getDefaultGameMode":"获得新玩家的默认 {@link GameMode}.\n<p>\n原文:Gets the default {@link GameMode} for new players.",
		"banIP":"设置禁止此ip地址登陆到服务器.\n<p>\n原文:Bans the specified address from the server.",
		"getGenerateStructures":"获得是否允许生成器构造(对应server.properties文件中的generate-structures)\n<p>\n原文:Get generate-structures setting.",
		"broadcastMessage":"广播一条消息到所有玩家.\n<p>\n这与调用{@link #broadcast(java.lang.String,\njava.lang.String)}(第二个参数为{@link #BROADCAST_CHANNEL_USERS})相当。\n<p>\n原文:Broadcast a message to all players.\n<p>\nThis is the same as calling {@link #broadcast(java.lang.String,\njava.lang.String)} to {@link Server#BROADCAST_CHANNEL_USERS}",
		"getMaxPlayers":"获得服务器可同时在线玩家最高人数.\n<p>\n原文:Get the maximum amount of players which can login to this server.",
		"createMap":"创建一个新的MapView实例并且自动分配ID\n<p>\nCreate a new map with an automatically assigned ID.",
		"getTicksPerMonsterSpawns":"获得每隔多少ticks生成怪物\n<p>\n原文:Gets the default ticks per monster spawns value.\n<p>\n<b>示例:</b>\n<ul>\n<li>值为1时服务器将尝试每tick都生成怪物\n<li>值为400服务器将每400tick尝试生成一次怪物\n<li>一个低于0的值将会被重重设为默认值(默认为1)\n</ul>\n<p>\n<b>注意:</b>如果设置为0,动物生成将会被禁止,我们推荐使用spawn-monsters代替用于控制动物生成\n<p>",
		"getWorldType":"获得主世界的世界类型(检测主世界的世界类型).\n<p>\n原文:Get world type (level-type setting) for default world.",
		"getEntity":"用UUID获取实体.\n<p>\n原文:Gets an entity on the server by its UUID",
		"getWorlds":"获取服务器以List封装的所有World\n<p>\n原文:Gets a list of all worlds on this server.",
		"getMonsterSpawnLimit":"获取一个区块最大可生成怪物数\n<p>\n原文:Gets user-specified limit for number of monsters that can spawn in a\nchunk.",
		"matchPlayer":"尝试用name匹配所有玩家并且返回一个所有匹配玩家的List\n<p>\n原文:Attempts to match any players with the given name, and returns a list\nof all possibly matches.\n<p>\n该list未排序,如果准确匹配到某个玩家则该List仅包含该玩家\n<p>\n原文:This list is not sorted in any particular order. If an exact match is\nfound, the returned list will only contain a single result.",
		"dispatchCommand":"在服务器执行一个命令\n<p>\n原文:Dispatches a command on this server, and executes it if found.",
		"recipeIterator":"获取配方迭代器\n<p>\n原文:Get an iterator through the list of crafting recipes.",
		"getHelpMap":"获取该服务器用于提供帮助的{@link HelpMap}\n<p>\n原文:Gets the {@link HelpMap} providing help topics for this server.",
		"addRecipe":"向服务器添加一个配方\n<p>\n原文:Adds a recipe to the crafting manager.",
		"isHardcore":"获得服务器是否开启了极限生存模式.\n<p>\n原文:Gets whether the server is in hardcore mode or not.",
		"getPort":"获得服务器端口.\n<p>\n原文:Get the game port that the server runs on.",
		"getAllowFlight":"获得服务器是否开启了飞行模式.\n<p>\n原文:Gets whether this server allows flying or not.",
		"getPlayerExact":"通过玩家名准确的查找来获得一个玩家实例,避免大小写问题(译注:该方法使用频率极低)\n<p>\n原文:Gets the player with the exact given name, case insensitive.",
		"getAmbientSpawnLimit":"获取一个区块最大生成环境怪物数(疑惑)\nGets user-specified limit for number of ambient mobs that can spawn in\na chunk.",
		"getWhitelistedPlayers":"获得所有在白名单中的玩家.\n<p>\n原文:Gets a list of whitelisted players.",
		"createInventory":"通过一个特定的大小和标题使用{@link InventoryType#CHEST}来创建一个空的物品栏\n<p>\n原文:Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size and title.",
		"unbanIP":"解除禁止此ip地址登陆到服务器.\n<p>\n原文:Unbans the specified address from the server.",
		"setIdleTimeout":"设置自动踢出闲置玩家的时间.\n<p>\n原文:Set the idle kick timeout. Any players idle for the specified amount of\ntime will be automatically kicked.\n<p>\n值为0时将不会踢出玩家",
		"getConnectionThrottle":"获取玩家重连服务器的间隔(-1则为无限制)\n<p>\n原文:Gets the value of the connection throttle setting."
	},
	"Donkey":{
		"ClassDescription":"Represents a Donkey - variant of {@link ChestedHorse}."
	},
	"Recipe":{
		"getResult":"Get the result of this recipe.",
		"ClassDescription":"Represents some type of crafting recipe."
	},
	"PotionEffect":{
		"getAmplifier":"Returns the amplifier of this effect. A higher amplifier means the\npotion effect happens more often over its duration and in some cases\nhas more effect on its target.",
		"getDuration":"Returns the duration (in ticks) that this effect will run for when\napplied to a {@link LivingEntity}.",
		"apply":"Attempts to add the effect represented by this object to the given\n{@link LivingEntity}.",
		"getType":"Returns the {@link PotionEffectType} of this effect.",
		"hasParticles":"",
		"getColor":"",
		"isAmbient":"Makes potion effect produce more, translucent, particles.",
		"ClassDescription":"Represents a potion effect, that can be added to a {@link LivingEntity}. A\npotion effect has a duration that it will last for, an amplifier that will\nenhance its effects, and a {@link PotionEffectType}, that represents its\neffect on an entity."
	},
	"Difficulty":{
		"getValue":"获得难度数值.\r\n<p>\r\n原文：Gets the difficulty value associated with this Difficulty.",
		"getByValue":"通过难度数值获得难度.",
		"ClassDescription":"代表不同的游戏难度."
	},
	"CreatureSpawner":{
		"getSpawnedType":"获取刷怪笼的类型.\n<p>\n原文:\nGet the spawner's creature type.",
		"setSpawnedType":"设置刷怪笼的类型.\n<p>\n原文:\nSet the spawner's creature type.",
		"getDelay":"获取刷怪笼的刷怪延迟.\n<p>\n原文:\nGet the spawner's delay.",
		"getCreatureTypeName":"获取要刷出的生物的名称.\n<p>\n原文:\nGet the spawner's creature type.",
		"ClassDescription":"代表一个刷怪笼.",
		"setCreatureTypeByName":"设置刷怪笼要生成的生物类型.\n<p>\n原文\nSet the spawner mob type.",
		"setDelay":"设置刷怪笼刷怪延迟.\n<p>\n原文:\nSet the spawner's delay."
	},
	"Golem":{
		"ClassDescription":"A mechanical creature that may harm enemies."
	},
	"Particle":{
		"getDataType":"Returns the required data type for the particle"
	},
	"EndGateway":{
		"getExitLocation":"Gets the location that entities are teleported to when \nentering the gateway portal.",
		"setExitLocation":"Sets the exit location that entities are teleported to when\nthey enter the gateway portal.",
		"ClassDescription":"Represents an end gateway.",
		"setExactTeleport":"Sets whether this gateway will teleport entities directly to\nthe exit location instead of finding a nearby location.",
		"isExactTeleport":"Gets whether this gateway will teleport entities directly to\nthe exit location instead of finding a nearby location."
	},
	"Button":{
		"getAttachedFace":"获取这个方块附着的方向.\r\n<p>\r\n原文:Gets the face that this block is attached on",
		"setFacingDirection":"设置这个按钮所指的方向.\r\n<p>\r\n原文:Sets the direction this button is pointing toward",
		"ClassDescription":"代表按钮",
		"isPowered":"获取这个按钮的充能状态.\r\n<p>\r\n原文:Gets the current state of this Material, indicating if it's powered or\r\nunpowered",
		"setPowered":"设置这个按钮的充能状态.\r\n<p>\r\n原文:Sets the current state of this button"
	},
	"InventoryInteractEvent":{
		"isCancelled":"Gets whether or not this event is cancelled. This is based off of the\r\nResult value returned by {@link #getResult()}.  Result.ALLOW and\r\nResult.DEFAULT will result in a returned value of false, but\r\nResult.DENY will result in a returned value of true.\r\n<p>\r\n{@inheritDoc}",
		"setResult":"Sets the result of this event. This will change whether or not this\r\nevent is considered cancelled.",
		"setCancelled":"Proxy method to {@link #setResult(Event.Result)} for the Cancellable\r\ninterface. {@link #setResult(Event.Result)} is preferred, as it allows\r\nyou to specify the Result beyond Result.DENY and Result.ALLOW.\r\n<p>\r\n{@inheritDoc}",
		"getResult":"Gets the {@link Result} of this event. The Result describes the\r\nbehavior that will be applied to the inventory in relation to this\r\nevent.",
		"getWhoClicked":"Gets the player who performed the click.",
		"ClassDescription":"An abstract base class for events that describe an interaction between a\r\nHumanEntity and the contents of an Inventory."
	},
	"ShulkerBox":{
		"getColor":"Get the {@link DyeColor} corresponding to this ShulkerBox",
		"ClassDescription":"Represents a ShulkerBox."
	},
	"Arrow":{
		"getKnockbackStrength":"Gets the knockback strength for an arrow, which is the\n{@link org.bukkit.enchantments.Enchantment#KNOCKBACK KnockBack} level\nof the bow that shot it.",
		"setKnockbackStrength":"Sets the knockback strength for an arrow.",
		"setPickupStatus":"Sets the current pickup status of this arrow.",
		"isCritical":"Gets whether this arrow is critical.\n<p>\nCritical arrows have increased damage and cause particle effects.\n<p>\nCritical arrows generally occur when a player fully draws a bow before\nfiring.",
		"ClassDescription":"Represents an arrow.",
		"getPickupStatus":"Gets the current pickup status of this arrow.",
		"setCritical":"Sets whether or not this arrow should be critical."
	},
	"LightningStrike":{
		"isEffect":"返回雷击是否是没有伤害的效果。\r\n<p>\r\n原文：Returns whether the strike is an effect that does no damage.",
		"ClassDescription":"代表雷击的实例，可能会或者不会造成伤害。"
	},
	"EntityTargetLivingEntityEvent":{
		"setTarget":"Set the Entity that you want the mob to target.\r\n<p>\r\nIt is possible to be null, null will cause the entity to be\r\ntarget-less.\r\n<p>\r\nMust be a LivingEntity, or null.",
		"ClassDescription":"Called when an Entity targets a {@link LivingEntity} and can only target\r\nLivingEntity's."
	},
	"HelpCommand":{
		"damerauLevenshteinDistance":"Computes the Dameraur-Levenshtein Distance between two strings. Adapted\nfrom the algorithm at <a href=\"http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\">Wikipedia: Damerau–Levenshtein distance</a>"
	},
	"Crops":{
		"getState":"获取这个农作物的生长阶段.\n<p>\n对于像是甜菜根这样只有四个生长阶段的农作物，只会返回这四个值：SEEDED、SMALL、TALL、RIPE.\n<p>\n原文:Gets the current growth state of this crop\n\nFor crops with only four growth states such as beetroot, only the values SEEDED, SMALL, TALL and RIPE will be\nreturned.",
		"setState":"设置这个农作物的生长阶段.\n<p>\n对于像是甜菜根这样只有四个生长阶段的农作物，这8个生长阶段分别映射为这四个阶段:\n\nSEEDED, SMALL, TALL 和 RIPE\n\nGERMINATED 会改为 SEEDED\nVERY_SMALL 会改为 SMALL\nMEDIUM 会改为 TALL\nVERY_TALL 会改为 RIPE\n<p>\n原文:Sets the growth state of this crop\n\nFor crops with only four growth states such as beetroot, the 8 CropStates are mapped into four states:\n\nSEEDED, SMALL, TALL and RIPE\n\nGERMINATED will change to SEEDED\nVERY_SMALL will change to SMALL\nMEDIUM will change to TALL\nVERY_TALL will change to RIPE",
		"ClassDescription":"代表不同种类处于不同生长阶段的农作物"
	},
	"CropState":{
		"ClassDescription":"表示农作物的不同生长阶段.",
		"getByData":"根据指定的数值获取农作物阶段.\r\n<p>\r\n原文：\r\nGets the CropState with the given data value",
		"getData":"获取表示这个生长阶段的相关数值.\r\n<p>\r\n原文：\r\nGets the associated data value representing this growth state"
	},
	"ElderGuardian":{
		"ClassDescription":"Represents an ElderGuardian - variant of {@link Guardian}."
	},
	"PlayerQuitEvent":{
		"getQuitMessage":"获取某玩家离开游戏后，发送给全体玩家的离开消息.\r\n<p>\r\n原文:Gets the quit message to send to all online players",
		"setQuitMessage":"设置某玩家离开游戏后，发送给全体玩家的离开消息.\r\n<p>\r\n原文:Sets the quit message to send to all online players",
		"ClassDescription":"玩家离开服务器事件."
	},
	"Sound":{
		"ClassDescription":"服务器能给玩家发送的声音的一个枚举。\n<p>\n警告：在某些时候，声音可能被这个枚举或Minecraft自己新增/移除！ 不保证声音能播放，不保证一些声音值会从这个枚举移除。\n因此，你不应该依赖这个类的顺序值。"
	},
	"SignChangeEvent":{
		"getPlayer":"获得设置这个牌子上的字的玩家.\r\n<p>\r\n原文：Gets the player changing the sign involved in this event.",
		"getLine":"获得牌子被写上的内容的某行.\r\n<p>\r\n原文：Gets a single line of text from the sign involved in this event.",
		"getLines":"获得牌子被写上的全部内容.\r\n<p>\r\n原文：Gets all of the lines of text from the sign involved in this event.",
		"setLine":"修改牌子被写上的字的某行.\r\n<p>\r\n原文：Sets a single line for the sign involved in this event",
		"ClassDescription":"在玩家设置牌子上的内容子时触发.\r\n<p>\r\n若取消本事件,牌子将不会被更改."
	},
	"VehicleDestroyEvent":{
		"ClassDescription":"载具被损毁的事件（包含被玩家/自然损坏）。若有一个船直接被\"删除\"了，这个事件将不会被调用.",
		"getAttacker":"获取损毁载具的实体，可能为null.\r\n<p>\r\n原文:Gets the Entity that has destroyed the vehicle, potentially null"
	},
	"Furnace":{
		"ClassDescription":"代表熔炉."
	},
	"Sapling":{
		"isInstantGrowable":"检测这个树苗是否应该在用使用骨粉时瞬间长大(可以长成树).\n<p>\n原文:Checks if the Sapling would grow when next ticked with bonemeal",
		"ClassDescription":"代表不同种类的树苗.",
		"setIsInstantGrowable":"设置这个树苗是否应该在用使用骨粉时瞬间长大(可以长成树).\n<p>\n原文：Set whether this sapling will grow when next ticked with bonemeal"
	},
	"ServerEvent":{
		"ClassDescription":"其它服务器事件(杂项).\r\n<p>\r\n原文:Miscellaneous server events"
	},
	"HangingPlaceEvent":{
		"getPlayer":"返回放置这个悬挂实体的玩家.\r\n<p>\r\n原文：Returns the player placing the hanging entity",
		"getBlock":"返回这个悬挂实体被放置在哪个方块上.\r\n<p>\r\n原文：Returns the block that the hanging entity was placed on",
		"getBlockFace":"返回这个悬挂实体被放置在的方块的朝向.\r\n<p>\r\n原文：Returns the face of the block that the hanging entity was placed on",
		"ClassDescription":"当一个悬挂实体被放置时触发本事件。"
	},
	"PistonExtensionMaterial":{
		"setSticky":"设置这个活塞臂是否是粘性的.\r\n<p>\r\n原文:Sets whether or not this extension is sticky",
		"ClassDescription":"代表活塞臂",
		"isSticky":"检测这个活塞臂是否是粘性的.\r\n<p>\r\n原文:Checks if this piston extension is sticky, and returns true if so"
	},
	"MapCanvas":{
		"setCursors":"设置与该画布相关联的游标集合,自从地图游标集合(MapCursorCollection)提供后这个方法通常不需要被调用.\r\n<p>\r\n原文:Set the cursor collection associated with this canvas. This does not\r\nusually need to be called since a MapCursorCollection is already\r\nprovided.",
		"drawImage":"画一张图片到地图上,如果必要的话,图像将被裁剪.\r\n<p>\r\n原文:Draw an image to the map. The image will be clipped if necessary.",
		"setPixel":"画一个像素到画布上.\r\n<p>\r\n原文:Draw a pixel to the canvas.",
		"getMapView":"获取画布依附的地图.\r\n<p>\r\n原文:Get the map this canvas is attached to.",
		"drawText":"使用你想要的格式渲染文字到地图上.换行符(\\n)会移动到下一行并返回原来的列,\r\n字体颜色可以使用带字符的数字来改变如\"§12;\",这会把字体颜色换为颜色表中\r\n第12个颜色(参考 {@link MapPalette}).\r\n<p>\r\n原文:Render text to the map using fancy formatting. Newline (\\n) characters\r\nwill move down one line and return to the original column, and the text\r\ncolor can be changed using sequences such as \"§12;\", replacing 12 with\r\nthe palette index of the color (see {@link MapPalette}).",
		"getPixel":"获取画布上的一个像素.\r\n<p>\r\n原文:Get a pixel from the canvas.",
		"ClassDescription":"代表一个画地图的画布，每个画布都关联着一个特定的\r\n{@link MapRenderer 地图渲染器}并表现为地图上渲染器的一层.",
		"getCursors":"获取与该画布相关联的游标集合.\r\n<p>\r\n原文:Get the cursor collection associated with this canvas.",
		"getBasePixel":"获取画布下层的一个像素.\r\n<p>\r\n原文:Get a pixel from the layers below this canvas."
	},
	"Firework":{
		"setFireworkMeta":"Apply the provided meta to the fireworks",
		"detonate":"Cause this firework to explode at earliest opportunity, as if it has no\r\nremaining fuse.",
		"getFireworkMeta":"Get a copy of the fireworks meta"
	},
	"Note":{
		"flattened":"",
		"natural":"为一个自然调创建一个note类，例如自然A调。\r\n<p>\r\n原文：\r\nCreates a new note for a natural tone, such as A-natural.",
		"flat":"为一个大调创建一个新的note类，例如A大调。\r\n<p>\r\n原文：\r\nCreates a new note for a flat tone, such as A-flat.",
		"sharped":"",
		"getId":"返回这个音符的内部ID。\r\n<p>\r\n原文：\r\nReturns the internal id of this note.",
		"ClassDescription":"用于储存一个指定的音符。",
		"getOctave":"返回这个音符的八度音阶。\r\n<p>\r\n原文：\r\nReturns the octave of this note.",
		"getTone":"返回这个音符的音调。\r\n<p>\r\n原文：\r\nReturns the tone of this note.",
		"isSharped":"返回音符是否升高。\r\n<p>\r\n原文：\r\nReturns if this note is sharped.",
		"sharp":"为一个升调创建一个note类，例如A升调。\r\n<p>\r\n原文：\r\nCreates a new note for a sharp tone, such as A-sharp."
	},
	"EntityTameEvent":{
		"ClassDescription":"Thrown when a LivingEntity is tamed",
		"getOwner":"Gets the owning AnimalTamer"
	},
	"ItemStack":{
		"getMaxStackSize":"Get the maximum stacksize for the material hold in this ItemStack.\n(Returns -1 if it has no idea)",
		"containsEnchantment":"Checks if this ItemStack contains the given {@link Enchantment}",
		"getEnchantmentLevel":"Gets the level of the specified enchantment on this item stack",
		"setItemMeta":"Set the ItemMeta of this ItemStack.",
		"ClassDescription":"Represents a stack of items",
		"getTypeId":"Gets the type id of this item",
		"getDurability":"Gets the durability of this item",
		"addUnsafeEnchantment":"Adds the specified {@link Enchantment} to this item stack.\n<p>\nIf this item stack already contained the given enchantment (at any\nlevel), it will be replaced.\n<p>\nThis method is unsafe and will ignore level restrictions or item type.\nUse at your own discretion.",
		"addEnchantment":"Adds the specified {@link Enchantment} to this item stack.\n<p>\nIf this item stack already contained the given enchantment (at any\nlevel), it will be replaced.",
		"setDurability":"Sets the durability of this item",
		"setAmount":"Sets the amount of items in this stack",
		"isSimilar":"This method is the same as equals, but does not consider stack size\n(amount).",
		"getData":"Gets the MaterialData for this stack of items",
		"getAmount":"Gets the amount of items in this stack",
		"deserialize":"Required method for configuration serialization",
		"setData":"Sets the MaterialData for this stack of items",
		"getItemMeta":"Get a copy of this ItemStack's {@link ItemMeta}.",
		"setTypeId":"Sets the type id of this item\n<p>\nNote that in doing so you will reset the MaterialData for this stack",
		"setType":"Sets the type of this item\n<p>\nNote that in doing so you will reset the MaterialData for this stack",
		"getEnchantments":"Gets a map containing all enchantments and their levels on this item.",
		"addEnchantments":"Adds the specified enchantments to this item stack.\n<p>\nThis method is the same as calling {@link\n#addEnchantment(org.bukkit.enchantments.Enchantment, int)} for each\nelement of the map.",
		"hasItemMeta":"Checks to see if any meta data has been defined.",
		"getType":"Gets the type of this item",
		"removeEnchantment":"Removes the specified {@link Enchantment} if it exists on this\nItemStack",
		"addUnsafeEnchantments":"Adds the specified enchantments to this item stack in an unsafe manner.\n<p>\nThis method is the same as calling {@link\n#addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int)} for\neach element of the map."
	},
	"EulerAngle":{
		"add":"Creates a new EulerAngle which is the result of adding\r\nthe x, y, z components to this EulerAngle",
		"getX":"Returns the angle on the x axis in radians",
		"setY":"Return a EulerAngle which is the result of changing\r\nthe y axis to the passed angle",
		"getY":"Returns the angle on the y axis in radians",
		"setX":"Return a EulerAngle which is the result of changing\r\nthe x axis to the passed angle",
		"getZ":"Returns the angle on the z axis in radians",
		"subtract":"Creates a new EulerAngle which is the result of subtracting\r\nthe x, y, z components to this EulerAngle",
		"ClassDescription":"EulerAngle is used to represent 3 angles, one for each\r\naxis (x, y, z). The angles are in radians",
		"setZ":"Return a EulerAngle which is the result of changing\r\nthe z axis to the passed angle"
	},
	"BlockEvent":{
		"getBlock":"获取这个事件是哪个方块发生的.\r\n<p>\r\n原文：Gets the block involved in this event.",
		"ClassDescription":"代表与方块相关的事件."
	},
	"ExplosiveMinecart":{
		"ClassDescription":"代表TNT矿车，可以被引爆."
	},
	"InventoryOpenEvent":{
		"getPlayer":"返回涉及此事件的玩家.\r\n<p>\r\n原文:Returns the player involved in this event",
		"isCancelled":"获取此事件的取消状态. 一个取消的事件将不会在服务器上执行，但将仍然传递给其他插件.\r\n<p>\r\n如果一个物品栏打开事件被取消，物品栏界面将不会显示.\r\n<p>\r\n原文:Gets the cancellation state of this event. A cancelled event will not\r\nbe executed in the server, but will still pass to other plugins.\r\n<p>\r\nIf an inventory open event is cancelled, the inventory screen will not\r\nshow.",
		"setCancelled":"设置此事件的取消状态. 一个取消的事件将不会在服务器上执行，但将仍然传递给其他插件.\r\n<p>\r\n如果一个物品栏打开事件被取消，物品栏界面将不会显示.\r\n<p>\r\n原文:Sets the cancellation state of this event. A cancelled event will not\r\nbe executed in the server, but will still pass to other plugins.\r\n<p>\r\nIf an inventory open event is cancelled, the inventory screen will not\r\nshow.",
		"ClassDescription":"当玩家打开物品栏时触发本事件"
	},
	"Vindicator":{
		"ClassDescription":"Represents a Vindicator."
	},
	"EntityCombustByBlockEvent":{
		"getCombuster":"造成燃烧的可以是岩浆或者一个着火的方块.\r\n<p>\r\n警告: 这个方块可能为null.",
		"ClassDescription":"当方块造成实体燃烧时触发该事件.\r\n原文\r\nCalled when a block causes an entity to combust."
	},
	"AreaEffectCloudApplyEvent":{
		"getAffectedEntities":"获取一个受影响实体的可变列表。\r\n<p>\r\n特别注意不是在列表里的每个实体都保证受影响。\r\n药水效果云可能由于{@link AreaEffectCloud#getDurationOnUse()}或{@link AreaEffectCloud#getRadiusOnUse()}的消耗死在应用过程中的影响\r\n<p>\r\n原文:\r\nRetrieves a mutable list of the effected entities\r\n<p>\r\nIt is important to note that not every entity in this list\r\nis guaranteed to be effected.  The cloud may die during the\r\napplication of its effects due to the depletion of {@link AreaEffectCloud#getDurationOnUse()}\r\nor {@link AreaEffectCloud#getRadiusOnUse()}",
		"ClassDescription":"当滞留药水应用它的效果时触发本事件，期间每5 tick发生一次。"
	},
	"ConfigurationOptions":{
		"copyDefaults":"检查这个{@link Configuration} 是不是直接从缺省值 {@link Configuration} 那里复制过来的.\r\n<p>\r\n如果为真, 表明这个列表中的值都是从缺省值 {@link Configuration} 中复制过来的. \r\n<p>\r\n这个列表将被锁定. 并始终返回缺省值列表中的值. 可以看作是只读的缺省值列表. \r\n<p>\r\n默认值是false.\r\n<p>原文: \r\nChecks if the {@link Configuration} should copy values from its default {@link Configuration} directly.\r\n<p>\r\nIf this is true, all values in the default Configuration will be directly copied, making it impossible to distinguish between values that were set and values that are provided by default. \r\nAs a result, {@link ConfigurationSection#contains(java.lang.String)} will always return the same value as {@link ConfigurationSection#isSet(java.lang.String)}. \r\nThe default value is false.",
		"pathSeparator":"设置用于分离 {@link ConfigurationSection} 中路径的 char.\r\n<P>\r\n这个 char 并不会影响数据的储存, 它只是路径的分隔符.\r\n只会影响你在程序中怎样读取数据.默认为 '.'.\r\n<p>原文:\r\nSets the char that will be used to separate {@link ConfigurationSection}s.\r\n<p>\r\nThis value does not affect how the {@link Configuration} is stored, only in how you access the data. \r\nThe default value is '.'.",
		"configuration":"返回关联这个配置的 {@link Configuration}.\r\n<p>原文:\r\nReturns the {@link Configuration} that this object is responsible for.",
		"ClassDescription":"@link Configuration} 的配置类.\r\n<p>原文:\r\nVarious settings for controlling the input and output of a {@link Configuration}"
	},
	"SmoothBrick":{
		"ClassDescription":"代表不同种类的光滑的砖（石头、苔石、圆石、石砖）."
	},
	"Merchant":{
		"setRecipes":"Set the list of trades currently available from this merchant.\n<br>\nThis will not change the selected trades of players currently trading\nwith this merchant.",
		"setRecipe":"Set the recipe at a certain index of this merchant's trade list.",
		"isTrading":"Gets whether this merchant is currently trading.",
		"getRecipe":"Get the recipe at a certain index of this merchant's trade list.",
		"getTrader":"Gets the player this merchant is trading with, or null if it is not\ncurrently trading.",
		"getRecipeCount":"Get the number of trades this merchant currently has available.",
		"ClassDescription":"Represents a merchant. A merchant is a special type of inventory which can\nfacilitate custom trades between items.",
		"getRecipes":"Get a list of trades currently available from this merchant."
	},
	"DisplaySlot":{
		"ClassDescription":"向玩家显示目标位置."
	},
	"NullConversationPrefix":{
		"getPrefix":"Prepends each conversation message with an empty string.",
		"ClassDescription":"NullConversationPrefix is a {@link ConversationPrefix} implementation that\r\ndisplays nothing in front of conversation output."
	},
	"ServiceRegisterEvent":{
		"ClassDescription":"当一个服务注册时调用. \r\n<p>\r\n注意:注册和注销的事件顺序不互相依赖."
	},
	"PlayerExpChangeEvent":{
		"ClassDescription":"当玩家经验值发生变化时调用此事件.",
		"setAmount":"设置玩家将要获得的经验.\r\n<p>\r\n原文:Set the amount of experience the player will receive",
		"getAmount":"获得玩家将要获得的经验.\r\n<p>\r\n原文:Get the amount of experience the player will receive"
	},
	"EnchantingInventory":{
		"setSecondary":"设置被用来附魔的辅助材料的物品. \r\n<p>\r\n原文: Set the secondary item being used for the enchant.",
		"getItem":"获取被附魔主要效果的Item项目.\r\n<p>\r\n原文:Get the item being enchanted.",
		"ClassDescription":"附魔GUI界面接口",
		"setItem":"设置要被附魔主要效果的Item项目.\r\n<p>\r\n原文:Set the item being enchanted.",
		"getSecondary":"获取当前附魔物品的辅助的物品. \r\n<p>\r\n原文: Get the secondary item being used for the enchant."
	},
	"Bed":{
		"setHeadOfBed":"设置方块是床头还是床尾\r\n<p>\r\n原文：Configure this to be either the head or the foot of the bed",
		"isHeadOfBed":"限定于此方块是否代表床头\r\n<p>\r\n原文：Determine if this block represents the head of the bed",
		"setFacingDirection":"设置床头的朝向.注意这只会影响到两个方块的床。\r\n<p>\r\n原文：Set which direction the head of the bed is facing. Note that this will\r\nonly affect one of the two blocks the bed is made of.",
		"getFacing":"获取床头的朝向。\r\n原文：Get the direction that this bed's head is facing toward",
		"ClassDescription":"代表床."
	},
	"PortalCreateEvent":{
		"getReason":"获取这个传送门的创建理由.\r\n<p>\r\n原文:\r\nGets the reason for the portal's creation",
		"ClassDescription":"当传送门被创建时调用.",
		"getBlocks":"获取与创建的传送门所相关连的所有区块的数组列表.\r\n<p>\r\n原文:\r\nGets an array list of all the blocks associated with the created portal"
	},
	"MerchantInventory":{
		"getSelectedRecipeIndex":"Get the index of the currently selected recipe.",
		"ClassDescription":"Represents a trading inventory between a player and a merchant.\n<br>\nThe holder of this Inventory is the owning Villager, or null if the player is\ntrading with a merchant created by a plugin.",
		"getSelectedRecipe":"Get the currently selected recipe."
	},
	"PlayerChannelEvent":{
		"ClassDescription":"当玩家注册/注销一个新的插件通道时触发本事件"
	},
	"Damageable":{
		"resetMaxHealth":"重置最大血量为 20。\n<p>\n原文: Resets the max health to the original amount.",
		"damage":"强制某实体伤害这个实体。\n<p>\n原文: Deals the given amount of damage to this entity, \nfrom a specified entity.",
		"getMaxHealth":"获取这个实体所能拥有的最大血量。\n<p>\n原文: Gets the maximum health this entity has.",
		"setMaxHealth":"设置这个实体所能拥有的最大血量。\n<p>\n如果当前血量高于这个值，那么新的血量将会设置为这个值。\n<p>\nTips: 如果实体有血条,比如({@link Player}， {@link EnderDragon}，{@link Wither}， etc...} 也将会有他们相应的血条样式。\n<p>\n原文: Sets the maximum health this entity can have.\n<p>\nIf the health of the entity is above the value provided it will be set\nto that value.\n<p>\nNote: An entity with a health bar ({@link Player}, {@link EnderDragon},\n{@link Wither}, etc...} will have their bar scaled accordingly.",
		"ClassDescription":"表示一个有生命值和可以被伤害的实体({@link Entity})。",
		"getHealth":"获取当前实体的血量，从0到 {@link #getMaxHealth()}，当血量为 0 时为死亡状态.。\n<p>\n原文: Gets the entity's health from 0 to {@link #getMaxHealth()}, \nwhere 0 is dead.",
		"setHealth":"设置这个实体的血量，范围是 0 到 {@link #getMaxHealth()}，当血量为 0 时为死亡状态。\n<p>\n原文: Sets the entity's health from 0 to \n{@link #getMaxHealth()}, where 0 is dead."
	},
	"NoteBlock":{
		"play":"用任意乐器播放任意音符盒.\r\n<p>\r\n原文:\r\nPlays an arbitrary note with an arbitrary instrument",
		"setRawNote":"设置一个音符盒对象.\r\n<p>\r\n原文:\r\nSet the note.",
		"setNote":"设置一个音符盒对象.\r\n<p>\r\n原文:\r\nSet the note.",
		"ClassDescription":"代表音符盒.",
		"getNote":"获取一个音符盒对象.\r\n<p>\r\n原文:\r\nGets the note.",
		"getRawNote":"获取一个音符盒对象.\r\n<p>\r\n原文:\r\nGets the note."
	},
	"Husk":{
		"ClassDescription":"Represents a Husk - variant of {@link Zombie}."
	},
	"PotionBrewer":{
		"getEffects":"Returns a collection of {@link PotionEffect} that would be applied from\na potion with the given type.",
		"getEffectsFromDamage":"Returns a collection of {@link PotionEffect} that would be applied from\na potion with the given data value.",
		"createEffect":"Creates a {@link PotionEffect} from the given {@link PotionEffectType},\napplying duration modifiers and checks.",
		"ClassDescription":"Represents a brewer that can create {@link PotionEffect}s."
	},
	"WeatherEvent":{
		"getWorld":"返回天气事件所发生的世界.\r\n<p>\r\n原文:\r\nReturns the World where this event is occurring",
		"ClassDescription":"和天气有关的事件"
	},
	"CocoaPlant":{
		"getSize":"获取这个可可豆的体积.\r\n<p>\r\n原文:Get size of plant",
		"setSize":"设置这个可可豆的体积.\r\n<p>\r\n原文:Set size of plant",
		"ClassDescription":"代表可可豆"
	},
	"Ambient":{
		"ClassDescription":"代表周围的生物.\r\n<p>\r\n原文:Represents an ambient mob"
	},
	"EntityUnleashEvent":{
		"getReason":"Returns the reason for the unleashing.",
		"ClassDescription":"Called immediately prior to an entity being unleashed."
	},
	"Llama":{
		"setColor":"Sets the llama's color.",
		"setStrength":"Sets the llama's strength. A higher strength llama will have more\ninventory slots and be more threatening to entities. Inventory slots are\nequal to strength * 3.",
		"getStrength":"Gets the llama's strength. A higher strength llama will have more\ninventory slots and be more threatening to entities.",
		"getColor":"Gets the llama's color.",
		"ClassDescription":"Represents a Llama."
	},
	"ServicesManager":{
		"isProvidedFor":"Returns whether a provider has been registered for a service. Do not\ncheck this first only to call <code>load(service)</code> later, as that\nwould be a non-thread safe situation.",
		"load":"Queries for a provider. This may return if no provider has been\nregistered for a service. The highest priority provider is returned.",
		"getKnownServices":"Get a list of known services. A service is known if it has registered\nproviders for it.",
		"unregister":"Unregister a particular provider.",
		"getRegistration":"Queries for a provider registration. This may return if no provider\nhas been registered for a service.",
		"unregisterAll":"Unregister all the providers registered by a particular plugin.",
		"ClassDescription":"Manages services and service providers. Services are an interface\nspecifying a list of methods that a provider must implement. Providers are\nimplementations of these services. A provider can be queried from the\nservices manager in order to use a service (if one is available). If\nmultiple plugins register a service, then the service with the highest\npriority takes precedence.",
		"getRegistrations":"Get registrations of providers for a service. The returned list is\nunmodifiable.",
		"register":"Register a provider of a service."
	},
	"MapMeta":{
		"getLocationName":"Gets the location name that is set.\r\n<p>\r\nPlugins should check that hasLocationName() returns <code>true</code>\r\nbefore calling this method.",
		"setScaling":"设置这个地图是否有缩放比例.\r\n<p>\r\n原文：Sets if this map is scaling or not.",
		"hasColor":"Checks for existence of a map color.",
		"setColor":"Sets the map color. A custom map color will alter the display of the map\r\nin an inventory slot.",
		"getColor":"Gets the map color that is set. A custom map color will alter the display\r\nof the map in an inventory slot.\r\n<p>\r\nPlugins should check that hasColor() returns <code>true</code> before\r\ncalling this method.",
		"isScaling":"检测这个地图是否有缩放比例.\r\n<p>\r\n原文：Checks to see if this map is scaling.",
		"ClassDescription":"代表可被伸缩的地图.",
		"hasLocationName":"Checks for existence of a location name.",
		"setLocationName":"Sets the location name. A custom map color will alter the display of the\r\nmap in an inventory slot."
	},
	"AsyncPlayerPreLoginEvent":{
		"allow":"允许玩家登录.\r\n<p>\r\n原文:Allows the player to log in",
		"disallow":"以给定的理由不允许玩家登录.\r\n<p>\r\n原文:Disallows the player from logging in, with the given reason",
		"getName":"获取玩家的名字.\r\n<p>\r\n原文:Gets the player's name.",
		"setResult":"设置登录的状态.\r\n<p>\r\n原文:Sets the new result of the login, as an enum",
		"setKickMessage":"设置要显示的踢出消息，如果getResult() != Result.ALLOWED.\r\n<p>\r\n原文:Sets the kick message to display if getResult() != Result.ALLOWED",
		"getResult":"获取登录的状态.\r\n<p>\r\n原文:Gets the current result of the login, as an enum",
		"setLoginResult":"设置登录的状态.\r\n<p>\r\n原文:Sets the new result of the login, as an enum",
		"getAddress":"获取玩家的IP地址.\r\n<p>\r\n原文:Gets the player IP address.",
		"ClassDescription":"存储尝试登录的玩家的详细信息，玩家尝试登录服务器的事件.\r\n<p>\r\n这个事件是异步的，不在主线程上执行.",
		"getLoginResult":"获取登录的状态.\r\n<p>\r\n原文:Gets the current result of the login, as an enum",
		"getKickMessage":"获取将要使用的踢出消息，如果getResult() != Result.ALLOWED.\r\n<p>\r\n原文:Gets the current kick message that will be used if getResult() !=\r\nResult.ALLOWED",
		"getUniqueId":"获取玩家的唯一标识.\r\n<p>\r\n原文:Gets the player's unique ID."
	},
	"BlockChangeDelegate":{
		"setRawTypeIdAndData":"Set a block type and data at the specified coordinates without doing\r\nall world updates and notifications.\r\n<p>\r\nIt is safe to have this call World.setTypeId, but it may be slower than\r\nWorld.setRawTypeId.",
		"setTypeIdAndData":"Set a block type and data at the specified coordinates.\r\n<p>\r\nThis method cannot call World.setRawTypeId, a full update is needed.",
		"getHeight":"Gets the height of the world.",
		"isEmpty":"Checks if the specified block is empty (air) or not.",
		"ClassDescription":"一个用于处理方块改变的代理。以一个直接的接口\r\n<p>\r\n原文：\r\nA delegate for handling block changes. This serves as a direct interface\r\nbetween generation algorithms in the server implementation and utilizing\r\ncode.",
		"setTypeId":"Set a block type at the specified coordinates.\r\n<p>\r\nThis method cannot call World.setRawTypeId, a full update is needed.",
		"setRawTypeId":"Set a block type at the specified coordinates without doing all world\r\nupdates and notifications.\r\n<p>\r\nIt is safe to have this call World.setTypeId, but it may be slower than\r\nWorld.setRawTypeId.",
		"getTypeId":"Get the block type at the location."
	},
	"PigZombie":{
		"setAnger":"设置僵尸猪人当前的愤怒程度.\r\n<p>\r\n原文:\r\nSet the pig zombie's current anger level.",
		"isAngry":"获取僵尸是否愤怒.\r\n<p>\r\n原文:\r\nShorthand; gets whether the zombie is angry.",
		"getAnger":"获取僵尸猪人当前的愤怒程度.\r\n<p>\r\n原文:\r\nGet the pig zombie's current anger level.",
		"setAngry":"将僵尸猪人的愤怒程度设置为0或默认等级.\r\n<p>\r\n原文:\r\nShorthand; sets to either 0 or the default level.",
		"ClassDescription":"代表僵尸猪人."
	},
	"Snowman":{
		"isDerp":"Gets whether this snowman is in \"derp mode\", meaning it is not wearing a\npumpkin.",
		"setDerp":"Sets whether this snowman is in \"derp mode\", meaning it is not wearing a\npumpkin. NOTE: This value is not persisted to disk and will therefore\nreset when the chunk is reloaded.",
		"ClassDescription":"代表雪人实体."
	},
	"BlockRedstoneEvent":{
		"getNewCurrent":"获取这个方块收到的红石信号强度将要变成的值(0~15).\r\n<p>\r\n原文：Gets the new current of this block",
		"setNewCurrent":"设置这个方块收到的红石信号强度将要变成的值(0~15).\r\n<p>\r\n原文：Sets the new current of this block",
		"getOldCurrent":"获取这个方块之前的红石信号强度(0~15).\r\n<p>\r\n原文：Gets the old current of this block",
		"ClassDescription":"当方块接受到的红石信号变化时触发此事件"
	},
	"BlockVector":{
		"hashCode":"Returns a hash code for this vector.",
		"equals":"Checks if another object is equivalent.",
		"clone":"Get a new block vector.",
		"ClassDescription":"A vector with a hash function that floors the X, Y, Z components, a la\r\nBlockVector in WorldEdit. BlockVectors can be used in hash sets and\r\nhash maps. Be aware that BlockVectors are mutable, but it is important\r\nthat BlockVectors are never changed once put into a hash set or hash map."
	},
	"NoiseGenerator":{
		"noise":"使用特殊的数个音阶和参数产生一个三维坐标的噪音。\r\n<p>\r\n原文：Generates noise for the 3D coordinates using the specified number of\r\noctaves and parameters",
		"ClassDescription":"所有噪音产生器的基类。\r\n<p>\r\n原文：Base class for all noise generators",
		"floor":"更快速的向下取整算法，比(int)Math.floor(x)快。\r\n<p>\r\n原文：Speedy floor, faster than (int)Math.floor(x)"
	},
	"PluginEvent":{
		"getPlugin":"得到启用/禁用的插件.\r\n<p>\r\n原文： Gets the plugin involved in this event",
		"ClassDescription":"用于插件的启用和禁用事件."
	},
	"PluginMessageRecipient":{
		"getListeningPluginChannels":"获取包含了客户端正在监听的插件通道(Plugin Channel)的set集合.\r\n<p>\r\n原文：Gets a set containing all the Plugin Channels that this client is\r\nlistening on.",
		"ClassDescription":"代表插件消息(Plugin Message)可能的接收者.",
		"sendPluginMessage":"在指定的通道向接收者发送插件消息(Plugin Message).\r\n<p>\r\n这个消息可能不大于{@link Messenger#MAX_MESSAGE_SIZE}字节，还有插件必须注册到指定的通道上发消息.\r\n<p>\r\n原文：Sends this recipient a Plugin Message on the specified outgoing\r\nchannel.\r\n<p>\r\nThe message may not be larger than {@link Messenger#MAX_MESSAGE_SIZE}\r\nbytes, and the plugin must be registered to send messages on the\r\nspecified channel."
	},
	"DefaultPermissions":{},
	"Minecart":{
		"getDamage":"Gets a minecart's damage.",
		"setFlyingVelocityMod":"Sets the flying velocity modifier. Used for minecarts that are in\r\nmid-air. A flying minecart's velocity is multiplied by this factor each\r\ntick.",
		"setSlowWhenEmpty":"Sets whether this minecart will slow down faster without a passenger\r\noccupying it",
		"getDerailedVelocityMod":"Gets the derailed velocity modifier. Used for minecarts that are on the\r\nground, but not on rails.\r\n<p>\r\nA derailed minecart's velocity is multiplied by this factor each tick.",
		"isSlowWhenEmpty":"Returns whether this minecart will slow down faster without a passenger\r\noccupying it",
		"ClassDescription":"Represents a minecart entity.",
		"setDamage":"Sets a minecart's damage.",
		"setDisplayBlock":"Sets the display block for this minecart.\r\nPassing a null value will set the minecart to have no display block.",
		"setDisplayBlockOffset":"Sets the offset of the display block.",
		"setDerailedVelocityMod":"Sets the derailed velocity modifier. Used for minecarts that are on the\r\nground, but not on rails. A derailed minecart's velocity is multiplied\r\nby this factor each tick.",
		"getDisplayBlockOffset":"Gets the offset of the display block.",
		"getMaxSpeed":"Gets the maximum speed of a minecart. The speed is unrelated to the\r\nvelocity.",
		"getDisplayBlock":"Gets the display block for this minecart.\r\nThis function will return the type AIR if none is set.",
		"setMaxSpeed":"Sets the maximum speed of a minecart. Must be nonnegative. Default is\r\n0.4D.",
		"getFlyingVelocityMod":"Gets the flying velocity modifier. Used for minecarts that are in\r\nmid-air. A flying minecart's velocity is multiplied by this factor each\r\ntick."
	},
	"BukkitWorker":{
		"getTaskId":"返回worker执行的任务的任务id。\r\n<p>\r\n原文：Returns the taskId for the task being executed by this worker.",
		"getThread":"返回worker的线程。\r\n<p>\r\n原文：Returns the thread for the worker.",
		"ClassDescription":"代表调度器的worker线程。这给了任务线程对象的信息、任务的所有者和任务id。\r\n<p>\r\nWorkers是用来执行异步任务的。",
		"getOwner":"返回拥有这个任务的插件。\r\n<p>\r\n原文：Returns the Plugin that owns this task."
	},
	"PluginDescriptionFile":{
		"getVersion":"Gives the version of the plugin.\r\n<ul>\r\n<li>Version is an arbitrary string, however the most common format is\r\n    MajorRelease.MinorRelease.Build (eg: 1.4.1).\r\n<li>Typically you will increment this every time you release a new\r\n    feature or bug fix.\r\n<li>Displayed when a user types <code>/version PluginName</code>\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>version</code>.\r\n<p>\r\nExample:<blockquote><pre>version: 1.4.1</pre></blockquote>",
		"getWebsite":"Gives the plugin's or plugin's author's website.\r\n<ul>\r\n<li>A link to the Curse page that includes documentation and downloads\r\n    is highly recommended.\r\n<li>Displayed when a user types <code>/version PluginName</code>\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>website</code>.\r\n<p>\r\nExample:\r\n<blockquote><pre>website: http://www.curse.com/server-mods/minecraft/myplugin</pre></blockquote>",
		"getName":"Gives the name of the plugin. This name is a unique identifier for\r\nplugins.\r\n<ul>\r\n<li>Must consist of all alphanumeric characters, underscores, hyphon,\r\n    and period (a-z,A-Z,0-9, _.-). Any other character will cause the\r\n    plugin.yml to fail loading.\r\n<li>Used to determine the name of the plugin's data folder. Data\r\n    folders are placed in the ./plugins/ directory by default, but this\r\n    behavior should not be relied on. {@link Plugin#getDataFolder()}\r\n    should be used to reference the data folder.\r\n<li>It is good practice to name your jar the same as this, for example\r\n    'MyPlugin.jar'.\r\n<li>Case sensitive.\r\n<li>The is the token referenced in {@link #getDepend()}, {@link\r\n    #getSoftDepend()}, and {@link #getLoadBefore()}.\r\n<li>Using spaces in the plugin's name is deprecated.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>name</code>.\r\n<p>\r\nExample:<blockquote><pre>name: MyPlugin</pre></blockquote>",
		"getPrefix":"Gives the token to prefix plugin-specific logging messages with.\r\n<ul>\r\n<li>This includes all messages using {@link Plugin#getLogger()}.\r\n<li>If not specified, the server uses the plugin's {@link #getName()\r\n    name}.\r\n<li>This should clearly indicate what plugin is being logged.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>prefix</code>.\r\n<p>\r\nExample:<blockquote><pre>prefix: ex-why-zee</pre></blockquote>",
		"getPermissions":"Gives the list of permissions the plugin will register at runtime,\r\nimmediately proceding enabling. The format for defining permissions is\r\na map from permission name to properties. To represent a map without\r\nany specific property, empty <a\r\nhref=\"http://yaml.org/spec/current.html#id2502702\">curly-braces</a> (\r\n<code>&#123;&#125;</code> ) may be used (as a null value is not\r\naccepted, unlike the {@link #getCommands() commands} above).\r\n<p>\r\nA list of optional properties for permissions:\r\n<table border=1>\r\n<caption>The permission section's description</caption>\r\n<tr>\r\n    <th>Node</th>\r\n    <th>Description</th>\r\n    <th>Example</th>\r\n</tr><tr>\r\n    <td><code>description</code></td>\r\n    <td>Plaintext (user-friendly) description of what the permission\r\n        is for.</td>\r\n    <td><blockquote><pre>description: Allows you to set yourself on fire</pre></blockquote></td>\r\n</tr><tr>\r\n    <td><code>default</code></td>\r\n    <td>The default state for the permission, as defined by {@link\r\n        Permission#getDefault()}. If not defined, it will be set to\r\n        the value of {@link PluginDescriptionFile#getPermissionDefault()}.\r\n        <p>\r\n        For reference:<ul>\r\n        <li><code>true</code> - Represents a positive assignment to\r\n            {@link Permissible permissibles}.\r\n        <li><code>false</code> - Represents no assignment to {@link\r\n            Permissible permissibles}.\r\n        <li><code>op</code> - Represents a positive assignment to\r\n            {@link Permissible#isOp() operator permissibles}.\r\n        <li><code>notop</code> - Represents a positive assignment to\r\n            {@link Permissible#isOp() non-operator permissibiles}.\r\n        </ul></td>\r\n    <td><blockquote><pre>default: true</pre></blockquote></td>\r\n</tr><tr>\r\n    <td><code>children</code></td>\r\n    <td>Allows other permissions to be set as a {@linkplain\r\n        Permission#getChildren() relation} to the parent permission.\r\n        When a parent permissions is assigned, child permissions are\r\n        respectively assigned as well.\r\n        <ul>\r\n        <li>When a parent permission is assigned negatively, child\r\n            permissions are assigned based on an inversion of their\r\n            association.\r\n        <li>When a parent permission is assigned positively, child\r\n            permissions are assigned based on their association.\r\n        </ul>\r\n        <p>\r\n        Child permissions may be defined in a number of ways:<ul>\r\n        <li>Children may be defined as a <a\r\n            href=\"http://en.wikipedia.org/wiki/YAML#Lists\">list</a> of\r\n            names. Using a list will treat all children associated\r\n            positively to their parent.\r\n        <li>Children may be defined as a map. Each permission name maps\r\n            to either a boolean (representing the association), or a\r\n            nested permission definition (just as another permission).\r\n            Using a nested definition treats the child as a positive\r\n            association.\r\n        <li>A nested permission definition must be a map of these same\r\n            properties. To define a valid nested permission without\r\n            defining any specific property, empty curly-braces (\r\n            <code>&#123;&#125;</code> ) must be used.\r\n         <li>A nested permission may carry it's own nested permissions\r\n             as children, as they may also have nested permissions, and\r\n             so forth. There is no direct limit to how deep the\r\n             permission tree is defined.\r\n        </ul></td>\r\n    <td>As a list:\r\n        <blockquote><pre>children: [inferno.flagrate, inferno.burningdeaths]</pre></blockquote>\r\n        Or as a mapping:\r\n        <blockquote><pre>children:\r\n inferno.flagrate: true\r\n inferno.burningdeaths: true</pre></blockquote>\r\n        An additional example showing basic nested values can be seen\r\n        <a href=\"doc-files/permissions-example_plugin.yml\">here</a>.\r\n        </td>\r\n</tr>\r\n</table>\r\nThe permissions are structured as a hiearchy of <a\r\nhref=\"http://yaml.org/spec/current.html#id2502325\">nested mappings</a>.\r\nThe primary (top-level, no intendentation) node is\r\n`<code>permissions</code>', while each individual permission name is\r\nindented, indicating it maps to some value (in our case, the\r\nproperties of the table above).\r\n<p>\r\nHere is an example using some of the properties:<blockquote><pre>\r\npermissions:\r\n inferno.*:\r\n   description: Gives access to all Inferno commands\r\n   children:\r\n     inferno.flagrate: true\r\n     inferno.burningdeaths: true\r\n inferno.flagate:\r\n   description: Allows you to ignite yourself\r\n   default: true\r\n inferno.burningdeaths:\r\n   description: Allows you to see how many times you have burned to death\r\n   default: true\r\n</pre></blockquote>\r\nAnother example, with nested definitions, can be found <a\r\nhref=\"doc-files/permissions-example_plugin.yml\">here</a>.",
		"getClassLoaderOf":"",
		"save":"Saves this PluginDescriptionFile to the given writer",
		"getPermissionDefault":"Gives the default {@link Permission#getDefault() default} state of\r\n{@link #getPermissions() permissions} registered for the plugin.\r\n<ul>\r\n<li>If not specified, it will be {@link PermissionDefault#OP}.\r\n<li>It is matched using {@link PermissionDefault#getByName(String)}\r\n<li>It only affects permissions that do not define the\r\n    <code>default</code> node.\r\n<li>It may be any value in {@link PermissionDefault}.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>default-permission</code>.\r\n<p>\r\nExample:<blockquote><pre>default-permission: NOT_OP</pre></blockquote>",
		"ClassDescription":"这个类是用于储存插件plugin.yml内的数据.\r\n所有的插件都必须有自己的plugin.yml.对于插件来说 plguin.yml是必须使用的标准\r\n这个文件必须位于jar的根目录下.\r\n<p>\r\n当Bukkit加载插件时,它必须知道一些基础的关于这个插件的信息.\r\nBukkit从plugin.tml读取数据.\r\nplugin.yml由一组属性构成,每个属性位于单独的一行并且没有缩进.\r\n<p>\r\n每一个方法(几乎每一个) 都在plugin.yml有其对应的条目.\r\n下面是每一个插件<b>所需</b>的条目.\r\n\n<ul>\r\n<li>{@link #getName()} - <code>name</code>\r\n<li>{@link #getVersion()} - <code>version</code>\r\n<li>{@link #getMain()} - <code>main</code>\r\n</ul>\r\n<p>\r\n未能填写以上条目,将导致一个异常并且使Bukkit忽视你的插件.\r\n<p>\r\n下面是plugin.yml可能拥有的条目表格,具体细节包括各自的方法:\r\n<table border=1>\r\n<caption>The description of the plugin.yml layout</caption>\r\n<tr>\r\n    <th>条目</th>\r\n    <th>方法</th>\r\n    <th>概要</th>\r\n</tr><tr>\r\n    <td><code>name</code></td>\r\n    <td>{@link #getName()}</td>\r\n    <td>该插件的名字</td>\r\n</tr><tr>\r\n    <td><code>version</code></td>\r\n    <td>{@link #getVersion()}</td>\r\n    <td>插件的版本</td>\r\n</tr><tr>\r\n    <td><code>main</code></td>\r\n    <td>{@link #getMain()}</td>\r\n    <td>插件主类的位置</td>\r\n</tr><tr>\r\n    <td><code>author</code><br><code>authors</code></td>\r\n    <td>{@link #getAuthors()}</td>\r\n    <td>插件的作者们</td>\r\n</tr><tr>\r\n    <td><code>description</code></td>\r\n    <td>{@link #getDescription()}</td>\r\n    <td>可读的插件描述</td>\r\n</tr><tr>\r\n    <td><code>website</code></td>\r\n    <td>{@link #getWebsite()}</td>\r\n    <td>插件的网址</td>\r\n</tr><tr>\r\n    <td><code>prefix</code></td>\r\n    <td>{@link #getPrefix()}</td>\r\n    <td>用于控制台的插件前缀</td>\r\n</tr><tr>\r\n    <td><code>load</code></td>\r\n    <td>{@link #getLoad()}</td>\r\n    <td>载入插件的时机</td>\r\n</tr><tr>\r\n    <td><code>depend</code></td>\r\n    <td>{@link #getDepend()}</td>\r\n    <td>必须的前置插件</td>\r\n</tr><tr>\r\n    <td><code>softdepend</code></td>\r\n    <td>{@link #getSoftDepend()}</td>\r\n    <td>非必须的前置插件</td>\r\n</tr><tr>\r\n    <td><code>loadbefore</code></td>\r\n    <td>{@link #getLoadBefore()}</td>\r\n    <td>反softdepend,可理解为在某些插件前加载</td>\r\n</tr><tr>\r\n    <td><code>commands</code></td>\r\n    <td>{@link #getCommands()}</td>\r\n    <td>插件将被注册的命令</td>\r\n</tr><tr>\r\n    <td><code>permissions</code></td>\r\n    <td>{@link #getPermissions()}</td>\r\n    <td>插件将被注册的权限</td>\r\n</tr><tr>\r\n    <td><code>default-permission</code></td>\r\n    <td>{@link #getPermissionDefault()}</td>\r\n    <td>插件将注册的基本的{@link Permission#getDefault() default} 权限 {@link #getPermissions() permissions}</td>\r\n</tr><tr>\r\n    <td><code>awareness</code></td>\r\n    <td>{@link #getAwareness()}</td>\r\n    <td>插件的概念</td>\r\n</tr>\r\n</table>\r\n<p>\r\n一个 plugin.yml 的例子:<blockquote><pre>\r\nname: Inferno\r\nversion: 1.4.1\r\ndescription: 设置自己着火.\r\n# 我们可以把所有的作者放到名单上,但不写说明\r\n# 此外,作者中有领导者,请确保他的名字位于第一个\r\nauthor: CaptainInflamo\r\nauthors: [Cogito, verrier, EvilSeph]\r\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\r\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\r\ndepend: [NewFire, FlameWire]\r\n\ncommands:\r\n flagrate:\r\n   description: Set yourself on fire.\r\n   aliases: [combust_me, combustMe]\r\n   permission: inferno.flagrate\r\n   usage: Syntax error! Simply type /&lt;command&gt; to ignite yourself.\r\n burningdeaths:\r\n   description: List how many times you have died by fire.\r\n   aliases: [burning_deaths, burningDeaths]\r\n   permission: inferno.burningdeaths\r\n   usage: |\r\n     /&lt;command&gt; [player]\r\n     Example: /&lt;command&gt; - see how many times you have burned to death\r\n     Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\r\n\npermissions:\r\n inferno.*:\r\n   description: Gives access to all Inferno commands\r\n   children:\r\n     inferno.flagrate: true\r\n     inferno.burningdeaths: true\r\n     inferno.burningdeaths.others: true\r\n inferno.flagrate:\r\n   description: Allows you to ignite yourself\r\n   default: true\r\n inferno.burningdeaths:\r\n   description: Allows you to see how many times you have burned to death\r\n   default: true\r\n inferno.burningdeaths.others:\r\n   description: Allows you to see how many times others have burned to death\r\n   default: op\r\n   children:\r\n     inferno.burningdeaths: true\r\n</pre></blockquote>\r\n\n\n原文:\r\nThis type is the runtime-container for the information in the plugin.yml.\r\nAll plugins must have a respective plugin.yml. For plugins written in java\r\nusing the standard plugin loader, this file must be in the root of the jar\r\nfile.\r\n<p>\r\nWhen Bukkit loads a plugin, it needs to know some basic information about\r\nit. It reads this information from a YAML file, 'plugin.yml'. This file\r\nconsists of a set of attributes, each defined on a new line and with no\r\nindentation.\r\n<p>↓\r\nEvery (almost* every) method corresponds with a specific entry in the\r\nplugin.yml. These are the <b>required</b> entries for every plugin.yml:\r\n<ul>\r\n<li>{@link #getName()} - <code>name</code>\r\n<li>{@link #getVersion()} - <code>version</code>\r\n<li>{@link #getMain()} - <code>main</code>\r\n</ul>\r\n<p>\r\nFailing to include any of these items will throw an exception and cause the\r\nserver to ignore your plugin.\r\n<p>\r\nThis is a list of the possible yaml keys, with specific details included in\r\nthe respective method documentations:\r\n<table border=1>\r\n<caption>The description of the plugin.yml layout</caption>\r\n<tr>\r\n    <th>Node</th>\r\n    <th>Method</th>\r\n    <th>Summary</th>\r\n</tr><tr>\r\n    <td><code>name</code></td>\r\n    <td>{@link #getName()}</td>\r\n    <td>The unique name of plugin</td>\r\n</tr><tr>\r\n    <td><code>version</code></td>\r\n    <td>{@link #getVersion()}</td>\r\n    <td>A plugin revision identifier</td>\r\n</tr><tr>\r\n    <td><code>main</code></td>\r\n    <td>{@link #getMain()}</td>\r\n    <td>The plugin's initial class file</td>\r\n</tr><tr>\r\n    <td><code>author</code><br><code>authors</code></td>\r\n    <td>{@link #getAuthors()}</td>\r\n    <td>The plugin contributors</td>\r\n</tr><tr>\r\n    <td><code>description</code></td>\r\n    <td>{@link #getDescription()}</td>\r\n    <td>Human readable plugin summary</td>\r\n</tr><tr>\r\n    <td><code>website</code></td>\r\n    <td>{@link #getWebsite()}</td>\r\n    <td>The URL to the plugin's site</td>\r\n</tr><tr>\r\n    <td><code>prefix</code></td>\r\n    <td>{@link #getPrefix()}</td>\r\n    <td>The token to prefix plugin log entries</td>\r\n</tr><tr>\r\n    <td><code>load</code></td>\r\n    <td>{@link #getLoad()}</td>\r\n    <td>The phase of server-startup this plugin will load during</td>\r\n</tr><tr>\r\n    <td><code>depend</code></td>\r\n    <td>{@link #getDepend()}</td>\r\n    <td>Other required plugins</td>\r\n</tr><tr>\r\n    <td><code>softdepend</code></td>\r\n    <td>{@link #getSoftDepend()}</td>\r\n    <td>Other plugins that add functionality</td>\r\n</tr><tr>\r\n    <td><code>loadbefore</code></td>\r\n    <td>{@link #getLoadBefore()}</td>\r\n    <td>The inverse softdepend</td>\r\n</tr><tr>\r\n    <td><code>commands</code></td>\r\n    <td>{@link #getCommands()}</td>\r\n    <td>The commands the plugin will register</td>\r\n</tr><tr>\r\n    <td><code>permissions</code></td>\r\n    <td>{@link #getPermissions()}</td>\r\n    <td>The permissions the plugin will register</td>\r\n</tr><tr>\r\n    <td><code>default-permission</code></td>\r\n    <td>{@link #getPermissionDefault()}</td>\r\n    <td>The default {@link Permission#getDefault() default} permission\r\n        state for defined {@link #getPermissions() permissions} the plugin\r\n        will register</td>\r\n</tr><tr>\r\n    <td><code>awareness</code></td>\r\n    <td>{@link #getAwareness()}</td>\r\n    <td>The concepts that the plugin acknowledges</td>\r\n</tr>\r\n</table>\r\n<p>\r\nA plugin.yml example:<blockquote><pre>\r\nname: Inferno\r\nversion: 1.4.1\r\ndescription: This plugin is so 31337. You can set yourself on fire.\r\n# We could place every author in the authors list, but chose not to for illustrative purposes\r\n# Also, having an author distinguishes that person as the project lead, and ensures their\r\n# name is displayed first\r\nauthor: CaptainInflamo\r\nauthors: [Cogito, verrier, EvilSeph]\r\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\r\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\r\ndepend: [NewFire, FlameWire]\r\n\ncommands:\r\n flagrate:\r\n   description: Set yourself on fire.\r\n   aliases: [combust_me, combustMe]\r\n   permission: inferno.flagrate\r\n   usage: Syntax error! Simply type /&lt;command&gt; to ignite yourself.\r\n burningdeaths:\r\n   description: List how many times you have died by fire.\r\n   aliases: [burning_deaths, burningDeaths]\r\n   permission: inferno.burningdeaths\r\n   usage: |\r\n     /&lt;command&gt; [player]\r\n     Example: /&lt;command&gt; - see how many times you have burned to death\r\n     Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\r\n\npermissions:\r\n inferno.*:\r\n   description: Gives access to all Inferno commands\r\n   children:\r\n     inferno.flagrate: true\r\n     inferno.burningdeaths: true\r\n     inferno.burningdeaths.others: true\r\n inferno.flagrate:\r\n   description: Allows you to ignite yourself\r\n   default: true\r\n inferno.burningdeaths:\r\n   description: Allows you to see how many times you have burned to death\r\n   default: true\r\n inferno.burningdeaths.others:\r\n   description: Allows you to see how many times others have burned to death\r\n   default: op\r\n   children:\r\n     inferno.burningdeaths: true\r\n</pre></blockquote>",
		"getMain":"Gives the fully qualified name of the main class for a plugin. The\r\nformat should follow the {@link ClassLoader#loadClass(String)} syntax\r\nto successfully be resolved at runtime. For most plugins, this is the\r\nclass that extends {@link JavaPlugin}.\r\n<ul>\r\n<li>This must contain the full namespace including the class file\r\n    itself.\r\n<li>If your namespace is <code>org.bukkit.plugin</code>, and your class\r\n    file is called <code>MyPlugin</code> then this must be\r\n    <code>org.bukkit.plugin.MyPlugin</code>\r\n<li>No plugin can use <code>org.bukkit.</code> as a base package for\r\n    <b>any class</b>, including the main class.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>main</code>.\r\n<p>\r\nExample:\r\n<blockquote><pre>main: org.bukkit.plugin.MyPlugin</pre></blockquote>",
		"getDescription":"Gives a human-friendly description of the functionality the plugin\r\nprovides.\r\n<ul>\r\n<li>The description can have multiple lines.\r\n<li>Displayed when a user types <code>/version PluginName</code>\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>description</code>.\r\n<p>\r\nExample:\r\n<blockquote><pre>description: This plugin is so 31337. You can set yourself on fire.</pre></blockquote>",
		"getSoftDepend":"Gives a list of other plugins that the plugin requires for full\r\nfunctionality. The {@link PluginManager} will make best effort to treat\r\nall entries here as if they were a {@link #getDepend() dependency}, but\r\nwill never fail because of one of these entries.\r\n<ul>\r\n<li>Use the value in the {@link #getName()} of the target plugin to\r\n    specify the dependency.\r\n<li>When an unresolvable plugin is listed, it will be ignored and does\r\n    not affect load order.\r\n<li>When a circular dependency occurs (a network of plugins depending\r\n    or soft-dependending each other), it will arbitrarily choose a\r\n    plugin that can be resolved when ignoring soft-dependencies.\r\n<li><code>softdepend</code> must be in <a\r\n    href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\r\n    format</a>.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>softdepend</code>.\r\n<p>\r\nExample:\r\n<blockquote><pre>softdepend: [OnePlugin, AnotherPlugin]</pre></blockquote>",
		"getCommands":"Gives the map of command-name to command-properties. Each entry in this\r\nmap corresponds to a single command and the respective values are the\r\nproperties of the command. Each property, <i>with the exception of\r\naliases</i>, can be defined at runtime using methods in {@link\r\nPluginCommand} and are defined here only as a convenience.\r\n<table border=1>\r\n<caption>The command section's description</caption>\r\n<tr>\r\n    <th>Node</th>\r\n    <th>Method</th>\r\n    <th>Type</th>\r\n    <th>Description</th>\r\n    <th>Example</th>\r\n</tr><tr>\r\n    <td><code>description</code></td>\r\n    <td>{@link PluginCommand#setDescription(String)}</td>\r\n    <td>String</td>\r\n    <td>A user-friendly description for a command. It is useful for\r\n        documentation purposes as well as in-game help.</td>\r\n    <td><blockquote><pre>description: Set yourself on fire</pre></blockquote></td>\r\n</tr><tr>\r\n    <td><code>aliases</code></td>\r\n    <td>{@link PluginCommand#setAliases(List)}</td>\r\n    <td>String or <a\r\n        href=\"http://en.wikipedia.org/wiki/YAML#Lists\">List</a> of\r\n        strings</td>\r\n    <td>Alternative command names, with special usefulness for commands\r\n        that are already registered. <i>Aliases are not effective when\r\n        defined at runtime,</i> so the plugin description file is the\r\n        only way to have them properly defined.\r\n        <p>\r\n        Note: Command aliases may not have a colon in them.</td>\r\n    <td>Single alias format:\r\n        <blockquote><pre>aliases: combust_me</pre></blockquote> or\r\n        multiple alias format:\r\n        <blockquote><pre>aliases: [combust_me, combustMe]</pre></blockquote></td>\r\n</tr><tr>\r\n    <td><code>permission</code></td>\r\n    <td>{@link PluginCommand#setPermission(String)}</td>\r\n    <td>String</td>\r\n    <td>The name of the {@link Permission} required to use the command.\r\n        A user without the permission will receive the specified\r\n        message (see {@linkplain\r\n        PluginCommand#setPermissionMessage(String) below}), or a\r\n        standard one if no specific message is defined. Without the\r\n        permission node, no {@link\r\n        PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or\r\n        {@link PluginCommand#setTabCompleter(TabCompleter)\r\n        TabCompleter} will be called.</td>\r\n    <td><blockquote><pre>permission: inferno.flagrate</pre></blockquote></td>\r\n</tr><tr>\r\n    <td><code>permission-message</code></td>\r\n    <td>{@link PluginCommand#setPermissionMessage(String)}</td>\r\n    <td>String</td>\r\n    <td><ul>\r\n        <li>Displayed to a player that attempts to use a command, but\r\n            does not have the required permission. See {@link\r\n            PluginCommand#getPermission() above}.\r\n        <li>&lt;permission&gt; is a macro that is replaced with the\r\n            permission node required to use the command.\r\n        <li>Using empty quotes is a valid way to indicate nothing\r\n            should be displayed to a player.\r\n        </ul></td>\r\n    <td><blockquote><pre>permission-message: You do not have /&lt;permission&gt;</pre></blockquote></td>\r\n</tr><tr>\r\n    <td><code>usage</code></td>\r\n    <td>{@link PluginCommand#setUsage(String)}</td>\r\n    <td>String</td>\r\n    <td>This message is displayed to a player when the {@link\r\n        PluginCommand#setExecutor(CommandExecutor)} {@linkplain\r\n        CommandExecutor#onCommand(CommandSender,Command,String,String[])\r\n        returns false}. &lt;command&gt; is a macro that is replaced\r\n        the command issued.</td>\r\n    <td><blockquote><pre>usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?</pre></blockquote>\r\n        It is worth noting that to use a colon in a yaml, like\r\n        <code>`usage: Usage: /god [player]'</code>, you need to\r\n        <a href=\"http://yaml.org/spec/current.html#id2503232\">surround\r\n        the message with double-quote</a>:\r\n        <blockquote><pre>usage: \"Usage: /god [player]\"</pre></blockquote></td>\r\n</tr>\r\n</table>\r\nThe commands are structured as a hiearchy of <a\r\nhref=\"http://yaml.org/spec/current.html#id2502325\">nested mappings</a>.\r\nThe primary (top-level, no intendentation) node is\r\n`<code>commands</code>', while each individual command name is\r\nindented, indicating it maps to some value (in our case, the\r\nproperties of the table above).\r\n<p>\r\nHere is an example bringing together the piecemeal examples above, as\r\nwell as few more definitions:<blockquote><pre>\r\ncommands:\r\n flagrate:\r\n   description: Set yourself on fire.\r\n   aliases: [combust_me, combustMe]\r\n   permission: inferno.flagrate\r\n   permission-message: You do not have /&lt;permission&gt;\r\n   usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?\r\n burningdeaths:\r\n   description: List how many times you have died by fire.\r\n   aliases:\r\n   - burning_deaths\r\n   - burningDeaths\r\n   permission: inferno.burningdeaths\r\n   usage: |\r\n     /&lt;command&gt; [player]\r\n     Example: /&lt;command&gt; - see how many times you have burned to death\r\n     Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\r\n # The next command has no description, aliases, etc. defined, but is still valid\r\n # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically\r\n apocalypse:\r\n</pre></blockquote>\r\nNote: Command names may not have a colon in their name.",
		"getAwareness":"Gives a set of every {@link PluginAwareness} for a plugin. An awareness\r\ndictates something that a plugin developer acknowledges when the plugin\r\nis compiled. Some implementions may define extra awarenesses that are\r\nnot included in the API. Any unrecognized\r\nawareness (one unsupported or in a future version) will cause a dummy\r\nobject to be created instead of failing.\r\n\n<ul>\r\n<li>Currently only supports the enumerated values in {@link\r\n    PluginAwareness.Flags}.\r\n<li>Each awareness starts the identifier with bang-at\r\n    (<code>!@</code>).\r\n<li>Unrecognized (future / unimplemented) entries are quietly replaced\r\n    by a generic object that implements PluginAwareness.\r\n<li>A type of awareness must be defined by the runtime and acknowledged\r\n    by the API, effectively discluding any derived type from any\r\n    plugin's classpath.\r\n<li><code>awareness</code> must be in <a\r\n    href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\r\n    format</a>.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>awareness</code>.\r\n<p>\r\nExample:<blockquote><pre>awareness:\r\n- !@UTF8</pre></blockquote>\r\n<p>\r\n<b>Note:</b> Although unknown versions of some future awareness are\r\ngracefully substituted, previous versions of Bukkit (ones prior to the\r\nfirst implementation of awareness) will fail to load a plugin that\r\ndefines any awareness.",
		"getLoadBefore":"Gets the list of plugins that should consider this plugin a\r\nsoft-dependency.\r\n<ul>\r\n<li>Use the value in the {@link #getName()} of the target plugin to\r\n    specify the dependency.\r\n<li>The plugin should load before any other plugins listed here.\r\n<li>Specifying another plugin here is strictly equivalent to having the\r\n    specified plugin's {@link #getSoftDepend()} include {@link\r\n    #getName() this plugin}.\r\n<li><code>loadbefore</code> must be in <a\r\n    href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\r\n    format</a>.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>loadbefore</code>.\r\n<p>\r\nExample:\r\n<blockquote><pre>loadbefore:\r\n- OnePlugin\r\n- AnotherPlugin</pre></blockquote>",
		"getAuthors":"Gives the list of authors for the plugin.\r\n<ul>\r\n<li>Gives credit to the developer.\r\n<li>Used in some server error messages to provide helpful feedback on\r\n    who to contact when an error occurs.\r\n<li>A bukkit.org forum handle or email address is recommended.\r\n<li>Is displayed when a user types <code>/version PluginName</code>\r\n<li><code>authors</code> must be in <a\r\n    href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\r\n    format</a>.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this has two entries, <code>author</code> and\r\n<code>authors</code>.\r\n<p>\r\nSingle author example:\r\n<blockquote><pre>author: CaptainInflamo</pre></blockquote>\r\nMultiple author example:\r\n<blockquote><pre>authors: [Cogito, verrier, EvilSeph]</pre></blockquote>\r\nWhen both are specified, author will be the first entry in the list, so\r\nthis example:\r\n<blockquote><pre>author: Grum\r\nauthors:\r\n- feildmaster\r\n- amaranth</pre></blockquote>\r\nIs equivilant to this example:\r\n<pre>authors: [Grum, feildmaster, aramanth]</pre>",
		"getRawName":"",
		"getDepend":"Gives a list of other plugins that the plugin requires.\r\n<ul>\r\n<li>Use the value in the {@link #getName()} of the target plugin to\r\n    specify the dependency.\r\n<li>If any plugin listed here is not found, your plugin will fail to\r\n    load at startup.\r\n<li>If multiple plugins list each other in <code>depend</code>,\r\n    creating a network with no individual plugin does not list another\r\n    plugin in the <a\r\n    href=https://en.wikipedia.org/wiki/Circular_dependency>network</a>,\r\n    all plugins in that network will fail.\r\n<li><code>depend</code> must be in must be in <a\r\n    href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\r\n    format</a>.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>depend</code>.\r\n<p>\r\nExample:\r\n<blockquote><pre>depend:\r\n- OnePlugin\r\n- AnotherPlugin</pre></blockquote>",
		"getFullName":"Returns the name of a plugin, including the version. This method is\r\nprovided for convenience; it uses the {@link #getName()} and {@link\r\n#getVersion()} entries.",
		"getLoad":"Gives the phase of server startup that the plugin should be loaded.\r\n<ul>\r\n<li>Possible values are in {@link PluginLoadOrder}.\r\n<li>Defaults to {@link PluginLoadOrder#POSTWORLD}.\r\n<li>Certain caveats apply to each phase.\r\n<li>When different, {@link #getDepend()}, {@link #getSoftDepend()}, and\r\n    {@link #getLoadBefore()} become relative in order loaded per-phase.\r\n    If a plugin loads at <code>STARTUP</code>, but a dependency loads\r\n    at <code>POSTWORLD</code>, the dependency will not be loaded before\r\n    the plugin is loaded.\r\n</ul>\r\n<p>\r\nIn the plugin.yml, this entry is named <code>load</code>.\r\n<p>\r\nExample:<blockquote><pre>load: STARTUP</pre></blockquote>"
	},
	"Lockable":{
		"setLock":"Sets the key required to access this container. Set to null (or empty\nstring) to remove key.",
		"getLock":"Gets the key needed to access the container.",
		"isLocked":"Checks if the container has a valid (non empty) key.",
		"ClassDescription":"Represents a block (usually a container) that may be locked. When a lock is\nactive an item with a name corresponding to the key will be required to open\nthis block."
	},
	"UnsafeValues":{
		"loadAdvancement":"Load an advancement represented by the specified string into the server.\r\nThe advancement format is governed by Minecraft and has no specified\r\nlayout.\r\n<br>\r\nIt is currently a JSON object, as described by the Minecraft Wiki:\r\nhttp://minecraft.gamepedia.com/Advancements\r\n<br>\r\nLoaded advancements will be stored and persisted across server restarts\r\nand reloads.\r\n<br>\r\nCallers should be prepared for {@link Exception} to be thrown.",
		"ClassDescription":"这个接口提供可能在特定运行时间内或含有任意意义的数值的转换（即不安全的参数）。\r\n<p>\r\n这些值的存在形式和行为不能保证在未来的版本可用。可能会非法命名，抛出异常，有误导参数或其他错误。",
		"removeAdvancement":"Delete an advancement which was loaded and saved by\r\n{@link #loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)}.\r\n<br>\r\nThis method will only remove advancement from persistent storage. It\r\nshould be accompanied by a call to {@link Server#reloadData()} in order\r\nto fully remove it from the running instance."
	},
	"Comparator":{
		"setSubtractionMode":"设置该红石比较器是否为减法模式.\n<p>\n原文:Sets whether the comparator is in subtraction mode.",
		"setFacingDirection":"设置这个红石比较器的朝向.\n<p>\n原文:Sets the direction this comparator is facing",
		"getFacing":"获取这个红石比较器的朝向.\n<p>\n原文:Gets the direction this comparator is facing",
		"ClassDescription":"代表开启或关闭状态的红石比较器.",
		"isPowered":"检测这个红石比较器是否充能.\n<p>\n原文:Checks if the comparator is powered",
		"isBeingPowered":"检测这个红石比较器是否输出信号.\n<p>\n原文:Checks if the comparator is being powered",
		"isSubtractionMode":"检测这个红石即比较器是否为减法模式.\n<p>\n原文:Checks whether the comparator is in subtraction mode"
	},
	"FallingBlock":{
		"getMaterial":"Get the Material of the falling block",
		"setDropItem":"Set if the falling block will break into an item if it cannot be placed",
		"canHurtEntities":"Get the HurtEntities state of this block.",
		"setHurtEntities":"Set the HurtEntities state of this block.",
		"getBlockId":"Get the ID of the falling block",
		"getDropItem":"Get if the falling block will break into an item if it cannot be placed",
		"getBlockData":"Get the data for the falling block",
		"ClassDescription":"Represents a falling block"
	},
	"Vehicle":{
		"getVelocity":"Gets the vehicle's velocity.",
		"setVelocity":"Sets the vehicle's velocity.",
		"ClassDescription":"Represents a vehicle entity."
	},
	"PlayerDropItemEvent":{
		"getItemDrop":"获得此玩家丢出的物品.\r\n<p>\r\n原文:Gets the ItemDrop created by the player",
		"ClassDescription":"玩家丢出物品事件."
	},
	"ManuallyAbandonedConversationCanceller":{
		"ClassDescription":"The ManuallyAbandonedConversationCanceller is only used as part of a {@link\r\nConversationAbandonedEvent} to indicate that the conversation was manually\r\nabandoned by programmatically calling the abandon() method on it."
	},
	"Explosive":{
		"isIncendiary":"Return whether or not this explosive creates a fire when exploding",
		"setIsIncendiary":"Set whether or not this explosive's explosion causes fire",
		"ClassDescription":"A representation of an explosive entity",
		"setYield":"Set the radius affected by this explosive's explosion",
		"getYield":"Return the radius or yield of this explosive's explosion"
	},
	"BrewingStandFuelEvent":{
		"getFuel":"Gets the ItemStack of the fuel before the amount was subtracted.",
		"setFuelPower":"Sets the fuel power for this fuel. Each unit of power can fuel one\nbrewing operation.",
		"isConsuming":"Gets whether the brewing stand's fuel will be reduced / consumed or not.",
		"ClassDescription":"Called when an ItemStack is about to increase the fuel level of a brewing\nstand.",
		"getFuelPower":"Gets the fuel power for this fuel. Each unit of power can fuel one\nbrewing operation.",
		"setConsuming":"Sets whether the brewing stand's fuel will be reduced / consumed or not."
	},
	"Achievement":{
		"getParent":"返回获得这个成就需要的父成就，如果没有则返回null。\n<p>\n原文:Returns the parent achievement of this achievement, or null if none.",
		"ClassDescription":"代表成就.",
		"hasParent":"返回想获得这个成就是否需要先获得另外一个成就。\n<p>\n原文:Returns whether or not this achievement has a parent achievement.\n<p>\n译注:比如，获得“这是？工作台！”成就必须要先获得“获得木头！”成就."
	},
	"FoodLevelChangeEvent":{
		"setFoodLevel":"设置实体将被设置的饥饿值\r\n<p>\r\n原文:\r\nSets the resultant food level that the entity involved in this event\r\nshould be set to",
		"ClassDescription":"当一个人类实体的饥饿值发生变化时触发本事件",
		"getFoodLevel":"获取本事件涉及的实体将被设置的饥饿值\r\n<p>\r\n20为饱和状态，0为饥饿状态.\r\n<p>\r\n原文:\r\nGets the resultant food level that the entity involved in this event\r\nshould be set to.\r\n<p>\r\nWhere 20 is a full food bar and 0 is an empty one."
	},
	"TrapDoor":{
		"ClassDescription":"代表活板门",
		"setInverted":"设置这个台阶是否被反转。\r\n<p>\r\n原文:Set trapdoor inverted state",
		"isInverted":"这个活板门是否被反转.\r\n<p>\r\n原文:Test if trapdoor is inverted"
	},
	"MetadataValue":{
		"asLong":"Attempts to convert the value of this metadata item into a long.",
		"asByte":"Attempts to convert the value of this metadata item into a byte.",
		"asInt":"Attempts to convert the value of this metadata item into an int.",
		"getOwningPlugin":"Returns the {@link Plugin} that created this metadata item.",
		"asShort":"Attempts to convert the value of this metadata item into a short.",
		"asDouble":"Attempts to convert the value of this metadata item into a double.",
		"asString":"Attempts to convert the value of this metadata item into a string.",
		"invalidate":"Invalidates this metadata item, forcing it to recompute when next\r\naccessed.",
		"asFloat":"Attempts to convert the value of this metadata item into a float.",
		"value":"Fetches the value of this metadata item.",
		"asBoolean":"Attempts to convert the value of this metadata item into a boolean."
	},
	"PotionEffectTypeWrapper":{
		"getType":"Get the potion type bound to this wrapper."
	},
	"NumberConversions":{
		"ClassDescription":"数字类型转换工具类。"
	},
	"FurnaceExtractEvent":{
		"getPlayer":"获取触发这个事件的玩家. \n<p>\n原文:Get the player that triggered the event",
		"getItemType":"获取被取出的物品的类型. \n<p>\n原文：Get the Material of the item being retrieved",
		"ClassDescription":"当玩家从熔炉取出产物时触发这个事件.",
		"getItemAmount":"获取被取出的物品的数量. \n<p>\n原文:Get the item count being retrieved"
	},
	"Color":{
		"fromRGB":"从一个RGB整数中创建一个新的颜色对象，该对象包含最低24bits",
		"fromBGR":"Creates a new color object from an integer that contains the blue,\r\ngreen, and red bytes in the lowest order 24 bits.",
		"getRed":"Gets the red component",
		"getGreen":"Gets the green component",
		"setBlue":"Creates a new Color object with specified component",
		"asRGB":"",
		"asBGR":"",
		"ClassDescription":"这是一个调色板的容器。该类是不可更改的; 使用set方法可以返回一个新的自定义颜色。\r\n这里颜色名字的列表为 HTML4 标准色,\r\n但是随时可能更改",
		"setRed":"Creates a new Color object with specified component",
		"setGreen":"Creates a new Color object with specified component",
		"getBlue":"Gets the blue component"
	},
	"PlayerTeleportEvent":{
		"ClassDescription":"玩家传送事件.",
		"getCause":"获得此次传送的传送理由.\n<p>\n原文:Gets the cause of this teleportation event"
	},
	"LeavesDecayEvent":{
		"ClassDescription":"当树叶消失时触发此事件.\r\n<p>\r\n如果此事件被取消则树叶就不会消失."
	},
	"EntityCreatePortalEvent":{
		"ClassDescription":"当一个{@link LivingEntity}在世界中创建传送门时触发该事件.",
		"getBlocks":"返回与这个传送门有关的所有方块.\r\n<p>\r\n原文:\r\nGets a list of all blocks associated with the portal.",
		"getPortalType":"返回正在尝试创建的传送门类型.\r\n<p>\r\n原文:\r\nGets the type of portal that is trying to be created."
	},
	"MonsterEggs":{
		"ClassDescription":"代表不同种类的刷怪蛋"
	},
	"LargeFireball":{
		"ClassDescription":"代表大的火球( {@link Fireball} )."
	},
	"InventoryClickEvent":{
		"getCursor":"获取当前光标所指的物品\r\n<p>\r\n原文:Gets the current ItemStack on the cursor.",
		"setCurrentItem":"Sets the ItemStack currently in the clicked slot.",
		"getAction":"Gets the InventoryAction that triggered this event.\r\n<p>\r\nThis action cannot be changed, and represents what the normal outcome of\r\nthe event will be. To change the behavior of this InventoryClickEvent,\r\nchanges must be manually applied.",
		"ClassDescription":"当玩家点击物品栏中的格子时触发事件事件.<br>\r\n译注：事实上打开任意容器的物品栏(包括玩家的背包)后点击任何一个地方都会触发这个事件。\r\n<p>\r\n由于{@link InventoryClickEvent}是通过修改{@link org.bukkit.inventory.Inventory 物品栏}\r\n的实现类来触发的，所以并非所有与{@link org.bukkit.inventory.Inventory 物品栏}相关的方法都是安全的。\r\n<p>\r\n下面这些属于{@link HumanEntity}和 {@link InventoryView}的方法不应该被处理\r\n{@link InventoryClickEvent}事件的 {@link org.bukkit.event.EventHandler 事件处理器}调用\r\n<ul>\r\n<li>{@link HumanEntity#closeInventory()}\r\n<li>{@link HumanEntity#openInventory(Inventory)}\r\n<li>{@link HumanEntity#openWorkbench(Location, boolean)}\r\n<li>{@link HumanEntity#openEnchanting(Location, boolean)}\r\n<li>{@link InventoryView#close()}\r\n</ul>\r\n如果一定要调用这些方法，请使用 {@link BukkitScheduler#runTask(Plugin, Runnable)}来执行\r\n，这个方法将在下一个tick执行你的任务。<br>\r\n注意：上面列出来的这些方法并不全，可能还有其它的方法也存在问题。\r\n<p>\r\nAssuming the EntityHuman associated with this event is an instance of a\r\nPlayer, manipulating the MaxStackSize or contents of an Inventory will\r\nrequire an Invocation of {@link Player#updateInventory()}.\r\n<p>\r\nModifications to slots that are modified by the results of this\r\nInventoryClickEvent can be overwritten. To change these slots, this event\r\nshould be cancelled and all desired changes to the inventory applied.\r\nAlternatively, scheduling a task using\r\n{@link BukkitScheduler#runTask( Plugin, Runnable)}, which would execute the\r\ntask on the next tick, would work as well.",
		"getHotbarButton":"如果ClickType是NUMVER_KEY（按下数字切换物品），这个方法将返回按下的键的索引（0-8）\r\n<p>\r\n原文:If the ClickType is NUMBER_KEY, this method will return the index of the\r\npressed key (0-8).",
		"getCurrentItem":"获取被点击的格子的物品\r\n<p>\r\n原文:Gets the ItemStack currently in the clicked slot.",
		"isRightClick":"获取是否右击背包\r\n<p>\r\n原文:\r\nGets whether or not the ClickType for this event represents a right\r\nclick.",
		"isShiftClick":"获取是否按住shift点击背包\r\n<p>\r\n原文:Gets whether the ClickType for this event indicates that the key was\r\npressed down when the click was made.",
		"getSlot":"返回点击的格子序号，可传递给{@link Inventory#getItem(int)}。注意由于连接两个不同背包的视图，可能两个格子都是同一个格子序号\r\n<p>\r\n原文:The slot number that was clicked, ready for passing to\r\n{@link Inventory#getItem(int)}. Note that there may be two slots with the\r\nsame slot number, since a view links two different inventories.",
		"getClick":"获取本事件的ClickType.\r\n<p>\r\n???????????????\r\n<p>\r\n原文:Gets the ClickType for this event.\r\n<p>\r\nThis is insulated against changes to the inventory by other plugins.",
		"isLeftClick":"获取是否左击背包\r\n<p>\r\n原文:Gets whether or not the ClickType for this event represents a left click.",
		"getSlotType":"获取被点击的格子的类型.\r\n<p>\r\n原文:Gets the type of slot that was clicked.",
		"setCursor":"Sets the item on the cursor.",
		"getRawSlot":"返回点击的原始格子序号，可传递给{@link InventoryView #getItem(int)}。这个序号对每个视图是唯一的。\r\n<p>\r\n原文:The raw slot number clicked, ready for passing to\r\n{@link InventoryView #getItem(int)} This slot number is unique for the\r\nview."
	},
	"Ocelot":{
		"setCatType":"设置这只猫的种类.\r\n<p>\r\n原文：Sets the current type of this cat.",
		"ClassDescription":"代表豹猫.",
		"getCatType":"获取这只猫当前的种类.\r\n<p>\r\n原文：Gets the current type of this cat."
	},
	"Redstone":{
		"ClassDescription":"代表可以带有或产生红石电能的物品.",
		"isPowered":"这个物品有没有充能.\r\n<p>\r\n原文:Gets the current state of this Material, indicating if it's powered or\r\nunpowered"
	},
	"Metadatable":{
		"setMetadata":"Sets a metadata value in the implementing object's metadata store.",
		"getMetadata":"Returns a list of previously set metadata values from the implementing\r\nobject's metadata store.",
		"removeMetadata":"Removes the given metadata value from the implementing object's\r\nmetadata store.",
		"ClassDescription":"This interface is implemented by all objects that can provide metadata\r\nabout themselves.",
		"hasMetadata":"Tests to see whether the implementing object contains the given\r\nmetadata value in its metadata store."
	},
	"UnknownDependencyException":{
		"ClassDescription":"Thrown when attempting to load an invalid Plugin file"
	},
	"FileConfigurationOptions":{
		"copyHeader":"Sets whether or not the header should be copied from a default source.\r\n<p>\r\nIf this is true, if a default {@link FileConfiguration} is passed to\r\n{@link\r\nFileConfiguration#setDefaults(org.bukkit.configuration.Configuration)}\r\nthen upon saving it will use the header from that config, instead of\r\nthe one provided here.\r\n<p>\r\nIf no default is set on the configuration, or the default is not of\r\ntype FileConfiguration, or that config has no header ({@link #header()}\r\nreturns null) then the header specified in this configuration will be\r\nused.\r\n<p>\r\nDefaults to true.",
		"header":"Sets the header that will be applied to the top of the saved output.\r\n<p>\r\nThis header will be commented out and applied directly at the top of\r\nthe generated output of the {@link FileConfiguration}. It is not\r\nrequired to include a newline at the end of the header as it will\r\nautomatically be applied, but you may include one if you wish for extra\r\nspacing.\r\n<p>\r\nNull is a valid value which will indicate that no header is to be\r\napplied.",
		"ClassDescription":"Various settings for controlling the input and output of a {@link\r\nFileConfiguration}"
	},
	"PlayerItemHeldEvent":{
		"getNewSlot":"获得玩家此次手持物品的物品槽位置.\r\n<p>\r\n原文:Gets the new held slot index",
		"getPreviousSlot":"获得玩家上一次手持物品的物品槽位置.\r\n<p>\r\n原文:Gets the previous held slot index",
		"ClassDescription":"玩家手持某物品事件."
	},
	"ThrownExpBottle":{
		"ClassDescription":"代表抛出的附魔之瓶."
	},
	"ChatColor":{
		"getChar":"获取与此颜色或格式关联的单个字符. \r\n<p>\r\n原文:Gets the char value associated with this color",
		"getLastColors":"获取字符串中最后一个颜色代码.也就是字符串结尾的颜色.\r\n<p>\r\n原文:Gets the ChatColors used at the end of the given input string.",
		"isColor":"检测这个代码是否为颜色代码，而不是格式代码.\r\n<p>\r\n原文:Checks if this code is a color code as opposed to a format code.",
		"getByChar":"获取指定的颜色代码代表的颜色或格式.\r\n<p>\r\n原文:Gets the color represented by the specified color code",
		"translateAlternateColorCodes":"转换交替的颜色代码字符到内部的ChatColor.COLOR_CHAR颜色代码字符.如果它后面紧跟着的是0-9, A-F, a-f, K-O, k-o, R 或 r，其它的颜色代码只会被替换.\r\n<p>\r\n译注:这个方法是用来把其他的颜色代码替换成Minecraft本身的.比如我们在Minecraft服务器聊天时，为了输入方便，就使用\"{@literal &}\"来替换\"§\"，服务器要处理这种消息时就要用到本方法.\r\n<p>\r\n范例:<code>System.out.println(translateAlternateColorCodes('{@literal &}', \"{@literal &}cred{@literal &}agreen{@literal &}9blue\"));</code>这段代码会把\"{@literal &}cred{@literal &}agreen{@literal &}9blue\"替换成\"§cred§agreen§9blue\"，\"§\"是ChatColor.COLOR_CHAR的默认值.\r\n<p>\r\n原文:Translates a string using an alternate color code character into a\r\nstring that uses the internal ChatColor.COLOR_CODE color code\r\ncharacter. The alternate color code character will only be replaced if\r\nit is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.",
		"ClassDescription":"聊天框支持的所有颜色",
		"stripColor":"去除给定消息的所有颜色代码.\r\n<p>\r\n原文:Strips the given message of all color codes",
		"isFormat":"检测这个代码是否为格式代码，而不是颜色代码.\r\n<p>\r\n原文:Checks if this code is a format code as opposed to a color code."
	},
	"BooleanPrompt":{
		"acceptValidatedInput":"Override this method to perform some action with the user's boolean\r\nresponse.",
		"ClassDescription":"BooleanPrompt is the base class for any prompt that requires a boolean\r\nresponse from the user."
	},
	"PlayerSwapHandItemsEvent":{
		"setMainHandItem":"设置主手里的物品.\r\n<p>\r\n原文:Sets the item in the main hand.",
		"setOffHandItem":"设置副手里的物品.\r\n<p>\r\n原文:Sets the item in the off hand.",
		"getOffHandItem":"获取切换到副手的物品.\r\n<p>\r\n原文:Gets the item switched to the off hand.",
		"ClassDescription":"玩家用快捷键互换主手和副手的物品时触发本事件.",
		"getMainHandItem":"获取切换到主手的物品.\r\n<p>\r\n原文:Gets the item switched to the main hand."
	},
	"BlockIterator":{
		"next":"返回追踪上的下一个方块。\r\n<p>\r\n原文：Returns the next Block in the trace",
		"hasNext":"返回true如果迭代器还有更多的元素。\r\n<p>\r\n原文：Returns true if the iteration has more elements",
		"ClassDescription":"这个类执行射线追踪(ray tracing)和迭代一条直线上的单独方块。\r\n<p>\r\n原文：This class performs ray tracing and iterates along blocks on a line"
	},
	"Listener":{
		"ClassDescription":"一个触发所有事件监听器的接口"
	},
	"ThunderChangeEvent":{
		"ClassDescription":"世界打雷事件",
		"toThunderState":"获取世界是否正在打雷.\r\n<p>\r\n原文:\r\nGets the state of thunder that the world is being set to"
	},
	"ShapedRecipe":{
		"shape":"Set the shape of this recipe to the specified rows. Each character\r\nrepresents a different ingredient; exactly what each character\r\nrepresents is set separately. The first row supplied corresponds with\r\nthe upper most part of the recipe on the workbench e.g. if all three\r\nrows are supplies the first string represents the top row on the\r\nworkbench.",
		"setIngredient":"Sets the material that a character in the recipe shape refers to.",
		"getResult":"Get the result.",
		"getShape":"Get the shape.",
		"ClassDescription":"Represents a shaped (ie normal) crafting recipe.",
		"getIngredientMap":"Get a copy of the ingredients map."
	},
	"PluginLoadOrder":{
		"ClassDescription":"Represents the order in which a plugin should be initialized and enabled"
	},
	"Silverfish":{
		"ClassDescription":"代表蠢虫."
	},
	"PlayerDeathEvent":{
		"getNewExp":"获取玩家重生时有多少经验.\r\n<p>\r\n不包含多少经验会掉落，要做到这点请看{@link #getDroppedExp()}.\r\n<p>\r\n原文:Gets how much EXP the Player should have at respawn.\r\n<p>\r\nThis does not indicate how much EXP should be dropped, please see\r\n{@link #getDroppedExp()} for that.",
		"ClassDescription":"当一个{@link Player 玩家}死亡时触发本事件",
		"getDeathMessage":"获取广播给所有人的死亡提示.\r\n<p>\r\n原文:Get the death message that will appear to everyone on the server.",
		"setNewTotalExp":"Sets the Total EXP the Player should have at respawn.",
		"getNewTotalExp":"Gets the Total EXP the Player should have at respawn.",
		"getKeepInventory":"Gets if the Player keeps inventory on death.",
		"setNewExp":"Sets how much EXP the Player should have at respawn.\r\n<p>\r\nThis does not indicate how much EXP should be dropped, please see\r\n{@link #setDroppedExp(int)} for that.",
		"getKeepLevel":"Gets if the Player should keep all EXP at respawn.\r\n<p>\r\nThis flag overrides other EXP settings",
		"setKeepLevel":"Sets if the Player should keep all EXP at respawn.\r\n<p>\r\nThis overrides all other EXP settings\r\n<p>\r\nThis doesn't prevent prevent the EXP from dropping.\r\n{@link #setDroppedExp(int)} should be used stop the\r\nEXP from dropping.",
		"getNewLevel":"Gets the Level the Player should have at respawn.",
		"setDeathMessage":"设置广播给所有人的死亡提示.\r\n<p>\r\n原文:\r\nSet the death message that will appear to everyone on the server.",
		"setKeepInventory":"Sets if the Player keeps inventory on death.",
		"setNewLevel":"Sets the Level the Player should have at respawn."
	},
	"Gate":{
		"ClassDescription":"代表栅栏门"
	},
	"InventoryMoveItemEvent":{
		"getDestination":"Gets the Inventory that the ItemStack is being put into",
		"getSource":"Gets the Inventory that the ItemStack is being taken from",
		"getItem":"Gets the ItemStack being moved; if modified, the original item will not\r\nbe removed from the source inventory.",
		"ClassDescription":"Called when some entity or block (e.g. hopper) tries to move items directly\r\nfrom one inventory to another.\r\n<p>\r\nWhen this event is called, the initiator may already have removed the item\r\nfrom the source inventory and is ready to move it into the destination\r\ninventory.\r\n<p>\r\nIf this event is cancelled, the items will be returned to the source\r\ninventory, if needed.\r\n<p>\r\nIf this event is not cancelled, the initiator will try to put the ItemStack\r\ninto the destination inventory. If this is not possible and the ItemStack\r\nhas not been modified, the source inventory slot will be restored to its\r\nformer state. Otherwise any additional items will be discarded.",
		"setItem":"Sets the ItemStack being moved; if this is different from the original\r\nItemStack, the original item will not be removed from the source\r\ninventory.",
		"getInitiator":"Gets the Inventory that initiated the transfer. This will always be\r\neither the destination or source Inventory."
	},
	"StandardMessenger":{
		"ClassDescription":"@link Messenger}的标准实现.",
		"validateChannel":"验证一个插件通道(Plugin Channel)的名称.\r\n<p>\r\n原文：Validates a Plugin Channel name.",
		"validatePluginMessage":"验证插件消息(Plugin Message)的输入，确保这些参数都是有效的.\r\n<p>\r\n原文：Validates the input of a Plugin Message, ensuring the arguments are all\r\nvalid."
	},
	"ServiceEvent":{
		"ClassDescription":"事件关联的注册服务器.这就相当于一个{@link org.bukkit.plugin.ServicesManager}."
	},
	"ItemFactory":{
		"getDefaultLeatherColor":"Returns the default color for all leather armor.",
		"equals":"This method is used to compare two item meta data objects.",
		"getItemMeta":"This creates a new item meta for the material.",
		"isApplicable":"This method checks the item meta to confirm that it is applicable (no\r\ndata lost if applied) to the specified Material.\r\n<p>\r\nA {@link SkullMeta} would not be valid for a sword, but a normal {@link\r\nItemMeta} from an enchanted dirt block would.",
		"ClassDescription":"An instance of the ItemFactory can be obtained with {@link\r\nServer#getItemFactory()}.\r\n<p>\r\nThe ItemFactory is solely responsible for creating item meta containers to\r\napply on item stacks.",
		"asMetaFor":"Returns an appropriate item meta for the specified material.\r\n<p>\r\nThe item meta returned will always be a valid meta for a given\r\nItemStack of the specified material. It may be a more or less specific\r\nmeta, and could also be the same meta or meta type as the parameter.\r\nThe item meta returned will also always be the most appropriate meta.\r\n<p>\r\nExample, if a {@link SkullMeta} is being applied to a book, this method\r\nwould return a {@link BookMeta} containing all information in the\r\nspecified meta that is applicable to an {@link ItemMeta}, the highest\r\ncommon interface."
	},
	"NamespacedKey":{
		"randomKey":"Return a new random key in the {@link #BUKKIT} namespace.",
		"minecraft":"Get a key in the Minecraft namespace.",
		"ClassDescription":"Represents a String based key which consists of two components - a namespace\nand a key."
	},
	"LeashHitch":{
		"ClassDescription":"Represents a Leash Hitch on a fence"
	},
	"Spellcaster":{
		"setSpell":"Sets the {@link Spell} the entity is currently using.",
		"getSpell":"Gets the {@link Spell} the entity is currently using.",
		"ClassDescription":"Represents a spell casting \"Illager\"."
	},
	"WeatherChangeEvent":{
		"toWeatherState":"获取世界是否在下雨/雪.\r\n<p>\r\n原文:\r\nGets the state of weather that the world is being set to",
		"ClassDescription":"天气改变事件"
	},
	"Skeleton":{
		"getSkeletonType":"获取骷髅当前的种类.\n<p>\n原文:Gets the current type of this skeleton.",
		"setSkeletonType":"",
		"ClassDescription":"代表骷髅."
	},
	"SmallFireball":{
		"ClassDescription":"代表小的火球( {@link Fireball} )."
	},
	"PlayerAdvancementDoneEvent":{
		"getAdvancement":"Get the advancement which has been completed.",
		"ClassDescription":"Called when a player has completed all criteria in an advancement."
	},
	"ProjectileSource":{
		"launchProjectile":"让ProjectileSource以一个初始速度向量发射{@link Projectile}。\r\n<p>\r\n原文：Launches a {@link Projectile} from the ProjectileSource with an\r\ninitial velocity.",
		"ClassDescription":"代表一个有效的抛射物发射源。"
	},
	"PlayerPreLoginEvent":{
		"allow":"允许玩家登录.\r\n<p>\r\n原文:Allows the player to log in",
		"disallow":"不允许玩家登录.\r\n<p>\r\n原文:Disallows the player from logging in, with the given reason",
		"getName":"获得此玩家的名字.\r\n<p>\r\n原文:Gets the player's name.",
		"setResult":"设置当前事件的状态.\r\n<p>\r\n原文:Sets the new result of the login, as an enum",
		"setKickMessage":"设置如果getResult() !=Result.ALLOWED，那么将要踢出的消息.\r\n<p>\r\n原文:Sets the kick message to display if getResult() != Result.ALLOWED",
		"getResult":"获取当前事件的状态.\r\n<p>\r\n原文:Gets the current result of the login, as an enum",
		"getAddress":"获得此玩家的IP地址.\r\n<p>\r\n原文:Gets the player IP address.",
		"ClassDescription":"玩家尝试登录服务器事件.",
		"getKickMessage":"如果getResult() !=Result.ALLOWED，那么获取踢出的信息.\r\n<p>\r\n原文:Gets the current kick message that will be used if getResult() !=\r\nResult.ALLOWED",
		"getUniqueId":"获得此玩家的唯一标识.\r\n<p>\r\n原文:Gets the player's unique ID."
	},
	"Sandstone":{
		"getType":"获取这个沙石的种类.\r\n<p>\r\n原文：Gets the current type of this sandstone",
		"ClassDescription":"代表不同种类的沙石.",
		"setType":"设置这个沙石的种类.\r\n<p>\r\n原文：Sets the type of this sandstone"
	},
	"PluginCommand":{
		"getTabCompleter":"获取与这个命令关联的{@link TabCompleter}.\r\n<p>\r\n原文:Gets the {@link TabCompleter} associated with this command.",
		"setTabCompleter":"设置当(玩家)进行命令补全时执行的{@link TabCompleter}.\r\n<p>\r\n如果没有指定 TabCompleter，这个命令执行器实现了TabCompleter，执行器将用来做命令补全.\r\n<p>\r\n原文:Sets the {@link TabCompleter} to run when tab-completing this command.\r\n<p>\r\nIf no TabCompleter is specified, and the command's executor implements\r\nTabCompleter, then the executor will be used for tab completion.",
		"getPlugin":"获取拥有这个PluginCommand的插件.\r\n<p>\r\n原文:Gets the owner of this PluginCommand",
		"tabComplete":"@inheritDoc}\r\n<p>\r\n委托的tab补全器(如果存在).\r\n<p>\r\n如果它不存在或者返回null，将委托给当前命令的执行器如果它实现了{@link TabCompleter}.如果找不到非null的list，将默认在{@link Command#tabComplete(CommandSender, String, String[])}里使用玩家名字.\r\n<p>\r\n这个方法不会判断权限.\r\n<p>\r\n原文:Delegates to the tab completer if present.\r\n<p>\r\nIf it is not present or returns null, will delegate to the current\r\ncommand executor if it implements {@link TabCompleter}. If a non-null\r\nlist has not been found, will default to standard player name\r\ncompletion in {@link\r\nCommand#tabComplete(CommandSender, String, String[])}.\r\n<p>\r\nThis method does not consider permissions.",
		"getExecutor":"获取与这个命令关联的{@link CommandExecutor}.\r\n<p>\r\n原文:Gets the {@link CommandExecutor} associated with this command",
		"ClassDescription":"代表属于某个插件的{@link Command 命令}.",
		"execute":"执行一个命令.\r\n<p>\r\n原文:Executes the command, returning its success",
		"setExecutor":"设置当命令解析时运行的{@link CommandExecutor}.\r\n<p>\r\n原文:Sets the {@link CommandExecutor} to run when parsing this command"
	},
	"BlockPistonEvent":{
		"getDirection":"返回活塞的朝向.\r\n<p>\r\n原文：Return the direction in which the piston will operate.",
		"ClassDescription":"活塞相关事件",
		"isSticky":"判断是否是粘性活塞.\r\n<p>\r\n原文：Returns true if the Piston in the event is sticky."
	},
	"PlayerItemBreakEvent":{
		"getBrokenItem":"获得因耐久值不足将要被销毁的物品.\r\n<p>\r\n原文:Gets the item that broke",
		"ClassDescription":"某玩家工具耐久消耗完毕时触发(比如铲子，打火石，铁制工具).\r\n<p>\r\n当物品耐久值为0时，将触发此事件.事件结束后，物品耐久值将复位至0."
	},
	"FurnaceAndDispenser":{
		"ClassDescription":"代表熔炉或发射器，两种定向容器."
	},
	"EntityBlockFormEvent":{
		"ClassDescription":"方块搭建成实体时调用本事件.\r\n<p>\r\n举个例子:\r\n<ul>\r\n<li>用雪块、南瓜搭建成一个雪傀儡时.\r\n<li>用铁块、南瓜搭建成一个铁傀儡时.\r\n</ul>",
		"getEntity":"获取被建造的实体.\r\n<p>\r\n原文：Get the entity that formed the block."
	},
	"ExactMatchConversationCanceller":{
		"ClassDescription":"An ExactMatchConversationCanceller cancels a conversation if the user\r\nenters an exact input string"
	},
	"TNTPrimed":{
		"setFuseTicks":"Set the number of ticks until the TNT blows up after being primed.",
		"getSource":"Gets the source of this primed TNT. The source is the entity\nresponsible for the creation of this primed TNT. (I.E. player ignites\nTNT with flint and steel.) Take note that this can be null if there is\nno suitable source. (created by the {@link\norg.bukkit.World#spawn(Location, Class)} method, for example.)\n<p>\nThe source will become null if the chunk this primed TNT is in is\nunloaded then reloaded. The source entity may be invalid if for example\nit has since died or been unloaded. Callers should check\n{@link Entity#isValid()}.",
		"ClassDescription":"Represents a Primed TNT.",
		"getFuseTicks":"Retrieve the number of ticks until the explosion of this TNTPrimed\nentity"
	},
	"BukkitRunnable":{
		"cancel":"尝试取消这个任务\r\n<p>\r\n原文：Attempts to cancel this task.",
		"getTaskId":"获取这个已执行的任务的任务id.\r\n<p>\r\n原文：Gets the task id for this runnable.",
		"runTask":"让Bukkit任务调度器在下一个tick运行任务.\r\n<p>\r\n原文：Schedules this in the Bukkit scheduler to run on next tick.",
		"runTaskLaterAsynchronously":"让Bukkit任务调度器在指定的tick后异步执行这个任务.\r\n<p>\r\n<b>异步任务不能访问任何Bukkit里的API.应着重保证异步任务的线程安全.</b>\r\n<p>\r\n原文：<b>Asynchronous tasks should never access any API in Bukkit. Great care\r\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\r\n<p>\r\nSchedules this to run asynchronously after the specified number of\r\nserver ticks.",
		"runTaskTimerAsynchronously":"让Bukkit任务调度器在指定的tick后开始异步的以指定的间隔不断执行任务.\r\n<p>\r\n<b>异步任务不能访问任何Bukkit里的API.应着重保证异步任务的线程安全.</b>\r\n<p>\r\n原文：<b>Asynchronous tasks should never access any API in Bukkit. Great care\r\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\r\n<p>\r\nSchedules this to repeatedly run asynchronously until cancelled,\r\nstarting after the specified number of server ticks.",
		"runTaskAsynchronously":"在Bukkit任务调度器异步运行这个任务.\r\n<p>\r\n<b>异步任务不能访问任何Bukkit里的API.应着重保证异步任务的线程安全.</b>\r\n<p>\r\n原文：<b>Asynchronous tasks should never access any API in Bukkit. Great care\r\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\r\n<p>\r\nSchedules this in the Bukkit scheduler to run asynchronously.",
		"runTaskLater":"在指定tick后执行该任务.\r\n<p>\r\n原文:Schedules this to run after the specified number of server ticks.",
		"ClassDescription":"这个类提供了简单的处理执行任务的方法.",
		"runTaskTimer":"在指定时间后开始以指定的间隔不断执行任务.\r\n<p>\r\n原文：Schedules this to repeatedly run until cancelled, starting after the\r\nspecified number of server ticks."
	},
	"Material":{
		"getMaxStackSize":"获取这个物品的最大堆叠数量.\n<p>\n原文:Gets the maximum amount of this material that can be held in a stack",
		"isFlammable":"检测这个方块是否为可燃的.\n<p>\n原文:Check if the material is a block and can catch fire",
		"isFuel":"检查这个物品是否可作为燃料使用.\n<p>\n原文:Checks if this Material can be used as fuel in a Furnace",
		"isBlock":"检测这个物品能否放置(是否为方块).\n<p>\n原文:Checks if this Material is a placable block",
		"isEdible":"检测这个物品能否食用.\n<p>\n原文:Checks if this Material is edible.",
		"isRecord":"",
		"hasGravity":"",
		"getId":"获取这个物品的id.\n<p>\n原文:Gets the item ID or block ID of this Material",
		"ClassDescription":"所有物品的枚举.",
		"getMaterial":"尝试用给定名称获取Material对象.\n<p>\n这是一个标准的查找,名称必须是枚举中给出的准确名称.\n<p>\n原文:Attempts to get the Material with the given name.\n<p>\nThis is a normal lookup, names must be the precise name they are given\nin the enum.",
		"matchMaterial":"尝试用给定名称匹配Material对象.\n<p>\n这是一个匹配查找;名称将转换为大写,然后格式化字符.\n<p>\n用ID匹配已过时.\n<p>\n原文:Attempts to match the Material with the given name.\n<p>\nThis is a match lookup; names will be converted to uppercase, then\nstripped of special characters in an attempt to format it like the\nenum.\n<p>\nUsing this for match by ID is deprecated.",
		"isSolid":"检测物品是否为固体方块(可被放置).\n<p>\n原文:Check if the material is a block and solid (cannot be passed through by\na player)",
		"getNewData":"用给定的初始数据构造一个新的与这个物品有关的MaterialData对象.\n<p>\n原文:Constructs a new MaterialData relevant for this Material, with the\ngiven initial data",
		"isTransparent":"检测这个物品是否为透明的方块.\n<p>\n原文:Check if the material is a block and does not block any light",
		"getMaxDurability":"获取这个物品的最大耐久度.\n<p>\n原文:Gets the maximum durability of this material",
		"isBurnable":"检测这个方块能否被火烧掉.\n<p>\n原文:Check if the material is a block and can burn away",
		"isOccluding":"检测这个物品是否为阻挡目光的方块.\n<p>\n原文:Check if the material is a block and completely blocks vision",
		"getData":"获取这个物品相关的MaterialData类.\n<p>\n原文:Gets the MaterialData class associated with this Material"
	},
	"MetadataConversionException":{
		"ClassDescription":"A MetadataConversionException is thrown any time a {@link\r\nLazyMetadataValue} attempts to convert a metadata value to an inappropriate\r\ndata type."
	},
	"CommandBlock":{
		"setName":"设置这个命令方块的名字。这个名字用于命令方块执行命令。设置名字为null等价于设置为“@”.\r\n<p>\r\n原文：Sets the name of this CommandBlock.  The name is used with commands\r\nthat this CommandBlock executes.  Setting the name to null is the\r\nsame as setting it to \"@\".",
		"getName":"获取这个命令方块的名字.这个名字被用于命令方块执行命令。这个名字永远不会为空，默认为“@”.\r\n<p>\r\n原文：Gets the name of this CommandBlock.  The name is used with commands\r\nthat this CommandBlock executes.  This name will never be null, and\r\nby default is \"@\".",
		"getCommand":"获取这个命令方块激活时运行的命令。本方法不会返回null，若此命令方块还没有设置命令，会返回空字符.\r\n<p>\r\n原文：Gets the command that this CommandBlock will run when powered.\r\nThis will never return null.  If the CommandBlock does not have a\r\ncommand, an empty String will be returned instead.",
		"setCommand":"设置这个命令方块激活时运行的命令。设置这个命令为null等价于设置命令为空字符串.\r\n<p>\r\n原文：Sets the command that this CommandBlock will run when powered.\r\nSetting the command to null is the same as setting it to an empty\r\nString."
	},
	"CommandException":{
		"ClassDescription":"当执行命令过程中出现未处理的异常时抛出."
	},
	"PlayerAchievementAwardedEvent":{
		"getAchievement":"获得次玩家被授予的成就.\r\n<p>\r\n原文:Gets the Achievement being awarded.",
		"ClassDescription":"当玩家获得某个成就时触发此事件."
	},
	"SplashPotion":{
		"ClassDescription":"Represents a thrown splash potion bottle"
	},
	"RegexPrompt":{
		"ClassDescription":"RegexPrompt is the base class for any prompt that requires an input\r\nvalidated by a regular expression."
	},
	"Cauldron":{
		"isEmpty":"检测这个炼药锅是不是空的\r\n<p>\r\n原文：Check if the cauldron is empty.",
		"ClassDescription":"代表炼药锅",
		"isFull":"检测这个炼药锅是不是满的\r\n<p>\r\n原文：Check if the cauldron is full."
	},
	"HangingBreakByEntityEvent":{
		"getRemover":"获取移除这个悬挂实体的实体.\r\n<p>\r\n原文：Gets the entity that removed the hanging entity",
		"ClassDescription":"当一个悬挂实体被一个实体移除时调用本事件"
	},
	"Command":{
		"ClassDescription":"代表命令方块",
		"isPowered":"获取这个方块是否充能.\n<p>\n原文：Gets the current state of this Material, indicating if it's powered or\nunpowered",
		"setPowered":"设置这个方块是否充能。\n<p>\n原文：Sets the current state of this Material"
	},
	"IllegalPluginAccessException":{
		"ClassDescription":"当插件在未启用的状态下尝试与服务器交互时抛出异常"
	},
	"Spider":{
		"ClassDescription":"代表蜘蛛."
	},
	"RideableMinecart":{
		"ClassDescription":"代表可乘坐的矿车."
	},
	"MetadataEvaluationException":{
		"ClassDescription":"A MetadataEvaluationException is thrown any time a {@link\r\nLazyMetadataValue} fails to evaluate its value due to an exception. The\r\noriginating exception will be included as this exception's cause."
	},
	"SkullType":{
		"ClassDescription":"代表不同种类的头颅."
	},
	"DoubleChest":{
		"ClassDescription":"代表一个大型箱子."
	},
	"ChunkGenerator":{
		"canSpawn":"测试指定方位是否对自然生成的方位有效。\n<p>\n原文：\nTests if the specified location is valid for a natural spawn position",
		"createChunkData":"Create a ChunkData for a world.",
		"generateExtBlockSections":"使用拓展方块的ID(0-4095)生成指定坐标的区块。\n<p>\n截至1.2，区块被表示为一个三维数组,每个区块都由16*16*16个方块组成。如果一部分是空的(都是ID为0的方块，即空气)，那么这个部分就不再需要被维持以减少内存占用。\n<p>\n这个方法会按照下面的格式返回一个short[][]类型的数据。\n<pre>\n    short[][] result = new short[world-height / 16][];\n</pre>\n每个拥有方块的部分 {@code (sectionID = (Y>>4))} 需要为这部分中的4096个方块分配空间：\n<pre>\n    result[sectionID] = new short[4096];\n</pre>\n没有内容的部分可以被保留为空。\n<p>\n使用下面的映射函数可以在X,Y,Z坐标放置一个在区块内的方块：\n<pre>\n   void setBlock(short[][] result, int x, int y, int z, short blkid) {\n       {@code if (result[y >> 4] == null) {}\n           {@code result[y >> 4] = new short[4096];}\n       }\n       {@code result[y >> 4][((y & 0xF) << 8) | (z << 4) | x] = blkid;}\n   }\n</pre>\n使用下面的映射函数可以读取一个方块的ID：\n<pre>\n   short getBlock(short[][] result, int x, int y, int z) {\n       {@code if (result[y >> 4] == null) {}\n           return (short)0;\n       }\n       {@code return result[y >> 4][((y & 0xF) << 8) | (z << 4) | x];}\n   }\n</pre>\n<p>\n注意这个方法<b>永远不要</b>试图去获取已经通过的坐标，不然就可能陷入死循环。\n<p>\n注意不能返回255以上方块ID的生成器不应该执行此方法，否则会返回空(generateBlockSections()方法被调用时的结果)。\n<p>\n原文：\nShapes the chunk for the given coordinates, with extended block IDs\nsupported (0-4095).\n<p>\nAs of 1.2, chunks are represented by a vertical array of chunk\nsections, each of which is 16 x 16 x 16 blocks. If a section is empty\n(all zero), the section does not need to be supplied, reducing memory\nusage.\n<p>\nThis method must return a short[][] array in the following format:\n<pre>\n    short[][] result = new short[world-height / 16][];\n</pre>\nEach section {@code (sectionID = (Y>>4))} that has blocks needs to be allocated\nspace for the 4096 blocks in that section:\n<pre>\n    result[sectionID] = new short[4096];\n</pre>\nwhile sections that are not populated can be left null.\n<p>\nSetting a block at X, Y, Z within the chunk can be done with the\nfollowing mapping function:\n<pre>\n   void setBlock(short[][] result, int x, int y, int z, short blkid) {\n       {@code if (result[y >> 4] == null) {}\n           {@code result[y >> 4] = new short[4096];}\n       }\n       {@code result[y >> 4][((y & 0xF) << 8) | (z << 4) | x] = blkid;}\n   }\n</pre>\nwhile reading a block ID can be done with the following mapping\nfunction:\n<pre>\n   short getBlock(short[][] result, int x, int y, int z) {\n       {@code if (result[y >> 4] == null) {}\n           return (short)0;\n       }\n       {@code return result[y >> 4][((y & 0xF) << 8) | (z << 4) | x];}\n   }\n</pre>\n<p>\nNote that this method should <b>never</b> attempt to get the Chunk at\nthe passed coordinates, as doing so may cause an infinite loop\n<p>\nNote generators that do not return block IDs above 255 should not\nimplement this method, or should have it return null (which will result\nin the generateBlockSections() method being called).",
		"generateChunkData":"Shapes the chunk for the given coordinates.\n\nThis method must return a ChunkData.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at\nthe passed coordinates, as doing so may cause an infinite loop\n<p>\nThis method should <b>never</b> modify a ChunkData after it has\nbeen returned.\n<p>\nThis method <b>must</b> return a ChunkData returned by {@link ChunkGenerator#createChunkData(org.bukkit.World)}",
		"generateBlockSections":"在指定的坐标生成区块。\n<p>\n截至1.2，区块被表示为一个三维数组,每个区块都由16*16*16个方块组成。如果一部分是空的(都是ID为0的方块，即空气)，那么这个部分就不再需要被维持以减少内存占用。\n<p>\n这个方法会按照下面的格式返回一个byte[][]类型的数据。\n<pre>\n    byte[][] result = new byte[world-height / 16][];\n</pre>\n每个拥有方块的部分 {@code (sectionID = (Y>>4))} 需要为这部分中的4096个方块分配空间：\n<pre>\n    result[sectionID] = new byte[4096];\n</pre>\n没有内容的部分可以被保留为空。\n使用下面的映射函数可以在X,Y,Z坐标放置一个在区块内的方块：\n<pre>\n   void setBlock(byte[][] result, int x, int y, int z, byte blkid) {\n       {@code if (result[y >> 4) == null) {}\n           {@code result[y >> 4] = new byte[4096];}\n       }\n       {@code result[y >> 4][((y & 0xF) << 8) | (z << 4) | x] = blkid;}\n   }\n</pre>\n使用下面的映射函数可以读取一个方块的ID：\n<pre>\n   byte getBlock(byte[][] result, int x, int y, int z) {\n       {@code if (result[y >> 4) == null) {}\n           return (byte)0;\n       }\n       {@code return result[y >> 4][((y & 0xF) << 8) | (z << 4) | x];}\n   }\n</pre>\n注意这个方法<b>永远不要</b>试图去获取已经通过的坐标，不然就可能陷入死循环。\n<p>\n原文：\nShapes the chunk for the given coordinates.\n<p>\nAs of 1.2, chunks are represented by a vertical array of chunk\nsections, each of which is 16 x 16 x 16 blocks.  If a section is empty\n(all zero), the section does not need to be supplied, reducing memory\nusage.\n<p>\nThis method must return a byte[][] array in the following format:\n<pre>\n    byte[][] result = new byte[world-height / 16][];\n</pre>\nEach section {@code (sectionID = (Y>>4))} that has blocks needs to be allocated\nspace for the 4096 blocks in that section:\n<pre>\n    result[sectionID] = new byte[4096];\n</pre>\nwhile sections that are not populated can be left null.\n<p>\nSetting a block at X, Y, Z within the chunk can be done with the\nfollowing mapping function:\n<pre>\n   void setBlock(byte[][] result, int x, int y, int z, byte blkid) {\n       {@code if (result[y >> 4) == null) {}\n           {@code result[y >> 4] = new byte[4096];}\n       }\n       {@code result[y >> 4][((y & 0xF) << 8) | (z << 4) | x] = blkid;}\n   }\n</pre>\nwhile reading a block ID can be done with the following mapping\nfunction:\n<pre>\n   byte getBlock(byte[][] result, int x, int y, int z) {\n       {@code if (result[y >> 4) == null) {}\n           return (byte)0;\n       }\n       {@code return result[y >> 4][((y & 0xF) << 8) | (z << 4) | x];}\n   }\n</pre>\n\nNote that this method should <b>never</b> attempt to get the Chunk at\nthe passed coordinates, as doing so may cause an infinite loop",
		"ClassDescription":"用于初始化一个整体的区块的区块生成器。比如说，地狱的区块生成器用于生成地狱岩和灵魂沙。",
		"getDefaultPopulators":"得到一个用于提供指定世界的默认的{@link BlockPopulator}列表。\n<p>\n原文：\nGets a list of default {@link BlockPopulator}s to apply to a given\nworld",
		"generate":"生成指定坐标的区块。\n<p>\n这个方法会按照下面的格式返回一个byte[32768]类型的数据。\n<pre>\nfor (int x = 0; x &lt; 16; x++) {\n    for (int z = 0; z &lt; 16; z++) {\n        for (int y = 0; y &lt; 128; y++) {\n            // result[(x * 16 + z) * 128 + y] = ??;\n        }\n    }\n}\n</pre>\n<p>\n注意这个方法<b>永远不要</b>试图去获取已经通过的坐标，不然就可能陷入死循环。\n<p>\n注意这个过时的方法只有在 generateExtBlockSections() 和 generateBlockSections() 都失效并且返回null时才能被调用。\n<p>\n原文：\nShapes the chunk for the given coordinates.\n<p>\nThis method should return a byte[32768] in the following format:\n<pre>\nfor (int x = 0; x &lt; 16; x++) {\n    for (int z = 0; z &lt; 16; z++) {\n        for (int y = 0; y &lt; 128; y++) {\n            // result[(x * 16 + z) * 128 + y] = ??;\n        }\n    }\n}\n</pre>\n<p>\nNote that this method should <b>never</b> attempt to get the Chunk at\nthe passed coordinates, as doing so may cause an infinite loop\n<p>\nNote this deprecated method will only be called when both\ngenerateExtBlockSections() and generateBlockSections() are\nunimplemented and return null.",
		"getFixedSpawnLocation":"获取一个固定出生方位用于一个指定的世界。\n<p>\n如果一个世界没有使用一个固定出生点就会返回空值，并且会试图随机寻找一个以代替。\n<p>\n原文：\nGets a fixed spawn location to use for a given world.\n<p>\nA null value is returned if a world should not use a fixed spawn point,\nand will instead attempt to find one randomly."
	},
	"Attachable":{
		"getAttachedFace":"获取这个方块附着的朝向.\r\n<p>\r\n原文：\r\nGets the face that this block is attached on",
		"ClassDescription":"表示可以与另一个方块连接的方块(比如箱子、门)."
	},
	"PotionSplashEvent":{
		"getPotion":"Gets the potion which caused this event",
		"setIntensity":"Overwrites the intensity for a given entity",
		"getAffectedEntities":"Retrieves a list of all effected entities",
		"ClassDescription":"Called when a splash potion hits an area",
		"getIntensity":"Gets the intensity of the potion's effects for given entity; This\r\ndepends on the distance to the impact center"
	},
	"Advancement":{
		"getCriteria":"获取此进度的所有标准. (即达成该进度所需的条件).\n<p>\n原文:Get all the criteria present in this advancement.",
		"ClassDescription":"代表可以被授予给玩家的进度. 这个类不是指针安全的，因为底层的进度可能会被重载."
	},
	"Chest":{
		"ClassDescription":"代表箱子"
	},
	"WorldUnloadEvent":{
		"ClassDescription":"当一个世界被卸载时调用."
	},
	"PlayerInteractEvent":{
		"isCancelled":"Gets the cancellation state of this event. Set to true if you want to\r\nprevent buckets from placing water and so forth",
		"useInteractedBlock":"This controls the action to take with the block (if any) that was\r\nclicked on. This event gets processed for all blocks, but most don't\r\nhave a default action",
		"getHand":"The hand used to perform this interaction. May be null in the case of\r\n{@link Action#PHYSICAL}.",
		"setCancelled":"Sets the cancellation state of this event. A canceled event will not be\r\nexecuted in the server, but will still pass to other plugins\r\n<p>\r\nCanceling this event will prevent use of food (player won't lose the\r\nfood item), prevent bows/snowballs/eggs from firing, etc. (player won't\r\nlose the ammo)",
		"hasItem":"Check if this event involved an item",
		"getItem":"Returns the item in hand represented by this event",
		"getAction":"Returns the action type",
		"ClassDescription":"Represents an event that is called when a player interacts with an object or\r\nair, potentially fired once for each hand. The hand can be determined using\r\n{@link #getHand()}.\r\n<p>\r\nThis event will fire as cancelled if the vanilla behavior\r\nis to do nothing (e.g interacting with air)",
		"isBlockInHand":"Convenience method to inform the user whether this was a block\r\nplacement event.",
		"setUseInteractedBlock":"",
		"getMaterial":"Convenience method. Returns the material of the item represented by\r\nthis event",
		"getBlockFace":"Returns the face of the block that was clicked",
		"useItemInHand":"This controls the action to take with the item the player is holding.\r\nThis includes both blocks and items (such as flint and steel or\r\nrecords). When this is set to default, it will be allowed if no action\r\nis taken on the interacted block.",
		"hasBlock":"Check if this event involved a block",
		"getClickedBlock":"Returns the clicked block",
		"setUseItemInHand":""
	},
	"SimpleAttachableMaterialData":{
		"ClassDescription":"用于实现了Attachable的MaterialData子类的实用类."
	},
	"PlayerPortalEvent":{
		"getPortalTravelAgent":"获得玩家在这个事件中使用的传送门.\r\n<p>\r\n原文:Gets the Travel Agent used (or not) in this event.",
		"useTravelAgent":"是否让玩家传送到另一端的传送门.\r\n<p>\r\n如果设置为true,传送门将试图找到与这个传送门相对的另一个传送门{@link #getTo()}，如果没有则创建一个.\r\n<p>\r\n如果设置为false,{@link #getPlayer()}只会被传送到{@link #getTo()}位置.\r\n<p>\r\n原文:Gets whether or not the Travel Agent will be used.\r\n<p>\r\nIf this is set to true, the TravelAgent will try to find a Portal at\r\nthe {@link #getTo()} Location, and will try to create one if there is\r\nnone.\r\n<p>\r\nIf this is set to false, the {@link #getPlayer()}} will only be\r\nteleported to the {@link #getTo()} Location.",
		"ClassDescription":"玩家将要被传送门传送的事件.\r\n<p>\r\n其他实体被传送门传送的事件请见{@link org.bukkit.event.entity.EntityPortalEvent}",
		"setPortalTravelAgent":"设置玩家在这个事件中使用的传送门.\r\n<p>\r\n原文:Sets the Travel Agent used (or not) in this event."
	},
	"InvalidConfigurationException":{
		"ClassDescription":"Exception thrown when attempting to load an invalid {@link Configuration}."
	},
	"PluginManager":{
		"subscribeToPermission":"Subscribes the given Permissible for information about the requested\r\nPermission, by name.\r\n<p>\r\nIf the specified Permission changes in any form, the Permissible will\r\nbe asked to recalculate.",
		"addPermission":"Adds a {@link Permission} to this plugin manager.\r\n<p>\r\nIf a permission is already defined with the given name of the new\r\npermission, an exception will be thrown.",
		"getDefaultPermissions":"获取普通玩家默认拥有的权限或op默认拥有的权限.\r\n<p/>\r\n原文:\r\nGets the default permissions for the given op status",
		"recalculatePermissionDefaults":"Recalculates the defaults for the given {@link Permission}.\r\n<p>\r\nThis will have no effect if the specified permission is not registered\r\nhere.",
		"ClassDescription":"Handles all plugin management from the Server",
		"loadPlugins":"载入指定目录内的插件.\r\n<p/>\r\n原文:\r\nLoads the plugins contained within the specified directory.",
		"registerEvent":"Registers the specified executor to the given event class",
		"getDefaultPermSubscriptions":"Gets a set containing all subscribed {@link Permissible}s to the given\r\ndefault list, by op status",
		"getPlugins":"获取所有已载入的插件对象.\r\n<p/>\r\n原文:\r\nGets a list of all currently loaded plugins.",
		"registerEvents":"Registers all the events in the given listener class",
		"subscribeToDefaultPerms":"Subscribes to the given Default permissions by operator status\r\n<p>\r\nIf the specified defaults change in any form, the Permissible will be\r\nasked to recalculate.",
		"disablePlugins":"停用所有已载入的插件.\r\n<p/>\r\n原文:\r\nDisables all the loaded plugins.",
		"getPermission":"Gets a {@link Permission} from its fully qualified name",
		"callEvent":"Calls an event with the given details",
		"unsubscribeFromDefaultPerms":"Unsubscribes from the given Default permissions by operator status",
		"getPermissions":"Gets a set of all registered permissions.\r\n<p>\r\nThis set is a copy and will not be modified live.",
		"clearPlugins":"停用并清除所有已启用插件的Plugin对象.\r\n<p/>\r\n原文:\r\nDisables and removes all plugins.",
		"removePermission":"Removes a {@link Permission} registration from this plugin manager.\r\n<p>\r\nIf the specified permission does not exist in this plugin manager,\r\nnothing will happen.\r\n<p>\r\nRemoving a permission registration will <b>not</b> remove the\r\npermission from any {@link Permissible}s that have it.",
		"loadPlugin":"Loads the plugin in the specified file\r\n<p>\r\nFile must be valid according to the current enabled Plugin interfaces",
		"useTimings":"Returns whether or not timing code should be used for event calls",
		"registerInterface":"Registers the specified plugin loader",
		"enablePlugin":"Enables the specified plugin\r\n<p>\r\nAttempting to enable a plugin that is already enabled will have no\r\neffect",
		"isPluginEnabled":"检查指定插件是否启用.\r\n<p/>\r\n原文:\r\nChecks if the given plugin is enabled or not.",
		"disablePlugin":"Disables the specified plugin\r\n<p>\r\nAttempting to disable a plugin that is not enabled will have no effect",
		"getPlugin":"Checks if the given plugin is loaded and returns it when applicable\r\n<p>\r\nPlease note that the name of the plugin is case-sensitive",
		"unsubscribeFromPermission":"Unsubscribes the given Permissible for information about the requested\r\nPermission, by name.",
		"getPermissionSubscriptions":"Gets a set containing all subscribed {@link Permissible}s to the given\r\npermission, by name"
	},
	"Utility":{
		"ClassDescription":"这个注释表示一个方法（有时是构造函数）会连接它的内部操作。\r\n<p>\r\n这仅仅用于识别不需要手动重写或处理的方法。\r\n<p>\r\n原文：\r\nThis annotation indicates a method (and sometimes constructor) will chain\r\nits internal operations.\r\n<p>\r\nThis is solely meant for identifying methods that don't need to be\r\noverridden / handled manually."
	},
	"MapInitializeEvent":{
		"ClassDescription":"地图初始化时调用.",
		"getMap":"获得地图初始化信息.\r\n<p>\r\n原文:Gets the map initialized in this event."
	},
	"MessageTooLargeException":{
		"ClassDescription":"如果要发送的插件信息(Plugin Message)过大则抛出此异常。"
	},
	"HumanEntity":{
		"openMerchant":"Starts a trade between the player and the merchant.\n\nNote that only one player may trade with a merchant at once. You must use\nthe force parameter for this.",
		"getName":"返回玩家名称\n原文：\nReturns the name of this player",
		"isHandRaised":"Check if the player currently has their hand raised (ie about to begin\nblocking).",
		"getExpToLevel":"获取玩家升级所需经验总额\nGet the total amount of experience required for the player to level",
		"getShoulderEntityLeft":"Gets the entity currently perched on the left shoulder or null if no\nentity.\n<br>\nThe returned entity will not be spawned within the world, so most\noperations are invalid unless the entity is first spawned in.",
		"getGameMode":"获取玩家当前{@link GameMode}（游戏模式）\n原文：\nGets this human's current {@link GameMode}",
		"ClassDescription":"代表一个人类实体，如一个NPC（村民）或一名玩家\n原文：\nRepresents a human entity, such as an NPC or a player",
		"getItemOnCursor":"返回当前光标中的物品堆（ItemStack），可为空。如果玩家当前没有打开窗口则返回空。\n原文：\nReturns the ItemStack currently on your cursor, can be empty. Will\nalways be empty if the player currently has no open window.",
		"closeInventory":"强制关闭指定玩家当前打开的库存视图。\n原文：\nForce-closes the currently open inventory view for this player, if any.",
		"getOpenInventory":"获取玩家当前浏览的库存视图。如果他们没有打开库存窗口，就会返回他们的背包视图（？）。\n原文：\nGets the inventory view the player is currently viewing. If they do not\nhave an inventory window open, it returns their internal crafting view.",
		"setItemInHand":"设置指定物品堆（ItemStack）中的物品，将替换原本的物品。\n原文：\nSets the item to the given ItemStack, this will replace whatever the\nuser was holding.",
		"setShoulderEntityRight":"Sets the entity currently perched on the right shoulder, or null to\nremove. This method will remove the entity from the world.\n<br>\nNote that only a copy of the entity will be set to display on the\nshoulder.\n<br>\nAlso note that the client will currently only render {@link Parrot}\nentities.",
		"getEnderChest":"获取玩家的末影箱库存\n原文：\nGet the player's EnderChest inventory",
		"getInventory":"获取玩家的背包。\n原文：\nGet the player's inventory.",
		"getItemInHand":"返回当前手里的ItemStack（物品堆），可为空。\n原文：\nReturns the ItemStack currently in your hand, can be empty.",
		"openInventory":"打开指定的库存窗口。\n原文：\nOpens an inventory window to the specified inventory view.",
		"openEnchanting":"打开一个空的附魔台库存窗口，底部为玩家的背包。\n原文：\nOpens an empty enchanting inventory window with the player's inventory\non the bottom.",
		"getShoulderEntityRight":"Gets the entity currently perched on the right shoulder or null if no\nentity.\n<br>\nThe returned entity will not be spawned within the world, so most\noperations are invalid unless the entity is first spawned in.",
		"hasCooldown":"Check whether a cooldown is active on the specified material.",
		"isBlocking":"检查指定玩家是否正在格挡（使用剑）。\n原文：\nCheck if the player is currently blocking (ie with a sword).",
		"setCooldown":"Set a cooldown on the specified material for a certain amount of ticks.\nticks. 0 ticks will result in the removal of the cooldown.\n<p>\nCooldowns are used by the server for items such as ender pearls and\nshields to prevent them from being used repeatedly.\n<p>\nNote that cooldowns will not by themselves stop an item from being used\nfor attacking.",
		"isSleeping":"返回指定玩家是否正在睡眠。\n原文：\nReturns whether this player is slumbering.",
		"setGameMode":"设置玩家当前{@link GameMode}（游戏模式）\n原文：\nSets this human's current {@link GameMode}",
		"getCooldown":"Get the cooldown time in ticks remaining for the specified material.",
		"getSleepTicks":"获取玩家的睡眠时间（单位为tick）。这个值可能被封顶。\n原文：\nGet the sleep ticks of the player. This value may be capped.",
		"getMainHand":"获取玩家选定的主手\n原文：\nGets the player's selected main hand",
		"setItemOnCursor":"设置指定物品堆（ItemStack）中的物品，将替换原本的物品。如果玩家当前没有打开窗口则返回空。\n原文：\nSets the item to the given ItemStack, this will replace whatever the\nuser was moving. Will always be empty if the player currently has no\nopen window.",
		"openWorkbench":"打开一个空的工作台库存窗口，底部为玩家的背包。\n原文：\nOpens an empty workbench inventory window with the player's inventory\non the bottom.",
		"setWindowProperty":"如果玩家当前打开了一个库存窗口，这个方法能够设置窗口的属性，如进度条的状态。\n原文：\nIf the player currently has an inventory window open, this method will\nset a property of that window, such as the state of a progress bar.",
		"setShoulderEntityLeft":"Sets the entity currently perched on the left shoulder, or null to\nremove. This method will remove the entity from the world.\n<br>\nNote that only a copy of the entity will be set to display on the\nshoulder.\n<br>\nAlso note that the client will currently only render {@link Parrot}\nentities."
	},
	"PlayerToggleSneakEvent":{
		"isSneaking":"获得玩家目前的潜行状态(正在潜行/没有潜行).\r\n<p>\r\n原文:Returns whether the player is now sneaking or not.",
		"ClassDescription":"玩家切换潜行状态则调用此事件."
	},
	"Guardian":{
		"setElder":"",
		"isElder":"Check if the Guardian is an elder Guardian"
	},
	"SlimeSplitEvent":{
		"ClassDescription":"当史莱姆死亡后分裂成小史莱姆时触发本事件",
		"getCount":"获取生成的小史莱姆的数量.\r\n<p>\r\n原文:Gets the amount of smaller slimes to spawn",
		"setCount":"设置分裂时将生成多少小史莱姆\r\n<p>\r\n原文:Sets how many smaller slimes will spawn on the split"
	},
	"PermissionAttachmentInfo":{
		"getAttachment":"Gets the attachment providing this permission. This may be null for\r\ndefault permissions (usually parent permissions).",
		"getValue":"Gets the value of this permission",
		"getPermission":"Gets the permission being set",
		"ClassDescription":"Holds information on a permission and which {@link PermissionAttachment}\r\nprovides it",
		"getPermissible":"原文:\r\nGets the permissible this is attached to"
	},
	"Vector":{
		"crossProduct":"Calculates the cross product of this vector with another. The cross\nproduct is defined as:\n<ul>\n<li>x = y1 * z2 - y2 * z1\n<li>y = z1 * x2 - z2 * x1\n<li>z = x1 * y2 - x2 * y1\n</ul>",
		"setY":"Set the Y component.",
		"setX":"Set the X component.",
		"distance":"Get the distance between this vector and another. The value of this\nmethod is not cached and uses a costly square-root function, so do not\nrepeatedly call this method to get the vector's magnitude. NaN will be\nreturned if the inner result of the sqrt() function overflows, which\nwill be caused if the distance is too long.",
		"getCrossProduct":"Calculates the cross product of this vector with another without mutating\nthe original. The cross product is defined as:\n<ul>\n<li>x = y1 * z2 - y2 * z1\n<li>y = z1 * x2 - z2 * x1\n<li>z = x1 * y2 - x2 * y1\n</ul>",
		"dot":"Calculates the dot product of this vector with another. The dot product\nis defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.",
		"isInAABB":"Returns whether this vector is in an axis-aligned bounding box.\n<p>\nThe minimum and maximum vectors given must be truly the minimum and\nmaximum X, Y and Z components.",
		"ClassDescription":"Represents a mutable vector. Because the components of Vectors are mutable,\nstoring Vectors long term may be dangerous if passing code modifies the\nVector later. If you want to keep around a Vector, it may be wise to call\n<code>clone()</code> in order to get a copy.",
		"getMaximum":"Gets the maximum components of two vectors.",
		"setZ":"Set the Z component.",
		"toLocation":"Gets a Location version of this vector.",
		"zero":"Zero this vector's components.",
		"distanceSquared":"Get the squared distance between this vector and another.",
		"checkFinite":"Check if each component of this Vector is finite.",
		"getRandom":"Gets a random vector with components having a random value between 0\nand 1.",
		"getBlockZ":"Gets the floored value of the Z component, indicating the block that\nthis vector is contained with.",
		"getMidpoint":"Gets a new midpoint vector between this vector and another.",
		"getBlockY":"Gets the floored value of the Y component, indicating the block that\nthis vector is contained with.",
		"getBlockX":"Gets the floored value of the X component, indicating the block that\nthis vector is contained with.",
		"hashCode":"Returns a hash code for this vector",
		"normalize":"Converts this vector to a unit vector (a vector with length of 1).",
		"getMinimum":"Gets the minimum components of two vectors.",
		"angle":"Gets the angle between this vector and another in radians.",
		"midpoint":"Sets this vector to the midpoint between this vector and another.",
		"divide":"Divides the vector by another.",
		"copy":"Copies another vector",
		"multiply":"Performs scalar multiplication, multiplying all components with a\nscalar.",
		"add":"Adds a vector to this one",
		"isInSphere":"Returns whether this vector is within a sphere.",
		"lengthSquared":"Gets the magnitude of the vector squared.",
		"toBlockVector":"Get the block vector of this vector.",
		"subtract":"Subtracts a vector from this one.",
		"length":"Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The\nvalue of this method is not cached and uses a costly square-root\nfunction, so do not repeatedly call this method to get the vector's\nmagnitude. NaN will be returned if the inner result of the sqrt()\nfunction overflows, which will be caused if the length is too long.",
		"getX":"Gets the X component.",
		"getY":"Gets the Y component.",
		"getEpsilon":"Get the threshold used for equals().",
		"getZ":"Gets the Z component.",
		"equals":"Checks to see if two objects are equal.\n<p>\nOnly two Vectors can ever return true. This method uses a fuzzy match\nto account for floating point errors. The epsilon can be retrieved\nwith epsilon.",
		"clone":"Get a new vector.",
		"toString":"Returns this vector's components as x,y,z."
	},
	"PatternType":{
		"getByIdentifier":"返回匹配的标识符,如果找不到匹配的图案类型,将返回null.\r\n<p>\r\n原文:\r\nReturns the pattern type which matches the passed\r\nidentifier or null if no matches are found",
		"getIdentifier":"返回用于表示这种图案类型的标识符.\r\n<p>\r\n原文:\r\nReturns the identifier used to represent\r\nthis pattern type"
	},
	"AdvancementProgress":{
		"getAdvancement":"返回这个进度关于的进度 (前者指达成进度，后者指游戏中的进度，是不是搞混了？).\n<p>\n原文:\nThe advancement this progress is concerning.",
		"revokeCriteria":"标记指定的条件为未完成的条件.\n<p>\n原文:Mark the specified criteria as uncompleted.",
		"getDateAwarded":"获取指定条件被授予的日期.\n<p>\n原文:Get the date the specified critera was awarded.",
		"getRemainingCriteria":"获取达成某一进度还未达到的条件(剩余的条件).\n<p>\n原文:Get the criteria which have not been awarded.",
		"getAwardedCriteria":"获取达成某一进度已经达到的条件.\n<p>\n原文:Gets the criteria which have been awarded.",
		"awardCriteria":"标记指定的条件为已授予的条件.\n<p>\n原文:Mark the specified criteria as awarded at the current time.",
		"ClassDescription":"玩家达成一个进度的状态. 这个类不是指针安全的，因为底层的进度可能会被重载.",
		"isDone":"检查是否达到了完成该进度的所有要求 (即是否达成了该进度).\n<p>\n原文:Check if all criteria for this advancement have been met."
	},
	"Sittable":{
		"isSitting":"Checks if this animal is sitting",
		"setSitting":"Sets if this animal is sitting. Will remove any path that the animal\nwas following beforehand.",
		"ClassDescription":"An animal that can sit still."
	},
	"PlayerItemConsumeEvent":{
		"getItem":"Gets the item that is being consumed. Modifying the returned item will\r\nhave no effect, you must use {@link\r\n#setItem(org.bukkit.inventory.ItemStack)} instead.",
		"ClassDescription":"This event will fire when a player is finishing consuming an item (food,\r\npotion, milk bucket).\r\n<br>\r\nIf the ItemStack is modified the server will use the effects of the new\r\nitem and not remove the original one from the player's inventory.\r\n<br>\r\nIf the event is cancelled the effect will not be applied and the item will\r\nnot be removed from the player's inventory.",
		"setItem":"Set the item being consumed"
	},
	"EntityResurrectEvent":{
		"ClassDescription":"Called when an entity dies and may have the opportunity to be resurrected.\nWill be called in a cancelled state if the entity does not have a totem\nequipped."
	},
	"NetherWartsState":{},
	"PlayerEditBookEvent":{
		"getSlot":"获取触发事件时，书本在物品栏所在的格子序号。\r\n<p>\r\n对应为玩家快捷操作栏，取值范围 0-8。\r\n<p>\r\n原文:Gets the inventory slot number for the book item that triggered this\r\nevent.\r\n<p>\r\nThis is a slot number on the player's hotbar in the range 0-8.",
		"setNewBookMeta":"设置新增的书本元数据。\r\n<p>\r\n原文:Sets the book meta that will actually be added to the book.",
		"isSigning":"检测书本是否正在被签名。如果正在签名，书与笔将转变为成书。\r\n<p>\r\n原文:Gets whether or not the book is being signed. If a book is signed the\r\nMaterial changes from BOOK_AND_QUILL to WRITTEN_BOOK.",
		"setSigning":"设置书本是否正在被签名。如果正在签名，书与笔将转变为成书。\r\n<p>\r\n原文:Sets whether or not the book is being signed. If a book is signed the \r\nMaterial changes from BOOK_AND_QUILL to WRITTEN_BOOK.",
		"getPreviousBookMeta":"获取当前书本元数据。\r\n<p>\r\n注意：获取书本的元数据副本。你无法使用该对象来修改书本元数据。\r\n<p>\r\n原文:Gets the book meta currently on the book.\r\n<p>\r\nNote: this is a copy of the book meta. You cannot use this object to\r\nchange the existing book meta.",
		"ClassDescription":"当玩家编辑或签名书与笔时触发。如果事件中断取消，书与笔的元数据不会改变。",
		"getNewBookMeta":"获取玩家试图新增的书本元数据。 \r\n<p>\r\n注意：获取的元数据为副本。使用 {@link #setNewBookMeta(BookMeta)}修改实际想要更新的书本元数据\r\n<p>\r\n原文:Gets the book meta that the player is attempting to add to the book.\r\n<p>\r\nNote: this is a copy of the proposed new book meta. Use {@link\r\n#setNewBookMeta(BookMeta)} to change what will actually be added to the"
	},
	"ServerCommandEvent":{
		"getCommand":"得到从控制台执行的命令(触发这个事件的命令).\n<p>\n原文:Gets the command that the user is attempting to execute from the\nconsole",
		"ClassDescription":"这个事件当服务器后台发送指令时调用.\n这是命令开始处理过程之前被触发的.\n<p>\n很多插件<b>都不使用此事件</b>.如果这个事件不是必要的,你应该尽量避免使用它!\n<p>\n正确使用该事件的事例如下:\n<ul>\n<li>将执行的文件记录在一个单独的文件里</li>\n<li>变量替换.例如，用玩家Steve的ip替换<code>${ip:Steve}</code>，或者模拟<code>@a</code>和<code>@p</code>作为装饰命令方块，插件不处理它.</li>\n<li>有条件地阻止其它插件的命令.</li>\n<li>个人发送者命令别名.例如，在控制台运行命令<code>/calias cr gamemode creative</code>后，下一次运行命令<code>/cr</code>，它将会被替换成<code>/gamemode creative</code>(全局命令别名应该通过注册的别名来完成)</li>\n</ul>\n<p>\n不正确使用该事件的事例如下:\n<ul>\n<li>使用该事件来运行命令逻辑</li>\n</ul>\n<p>\n如果事件被取消,处理命令将停止.",
		"getSender":"得到命令发送者(后台).\n<p>\n原文:Get the command sender.",
		"setCommand":"设置将要执行的命令.\n<p>\n原文:Sets the command that the server will execute"
	},
	"MapCursor":{
		"setVisible":"设置这个光标的可见情况。\r\n<p>\r\n原文：\r\nSet the visibility status of this cursor.",
		"getRawType":"获取这个光标的类型。\r\n<p>\r\n原文：\r\nGet the type of this cursor.",
		"setY":"设置这个光标的Y方位。\r\n<p>\r\n原文：\r\nSet the Y position of this cursor.",
		"setX":"设置这个光标的X方位。\r\n<p>\r\n原文：\r\nSet the X position of this cursor.",
		"getDirection":"获取这个光标的朝向。\r\n<p>\r\n原文：\r\nGet the direction of this cursor.",
		"ClassDescription":"表示一个地图上的光标。\r\n<p>\r\n原文：\r\nRepresents a cursor on a map.",
		"isVisible":"获取这个光标的可见情况。\r\n<p>\r\n原文：\r\nGet the visibility status of this cursor.",
		"setType":"设置这个光标的类型。\r\n<p>\r\n原文：\r\nSet the type of this cursor.",
		"getX":"获取这个光标的X位置。\r\n<p>\r\n原文：\r\nGet the X position of this cursor.",
		"getY":"获取这个光标的Y位置。\r\n<p>\r\n原文：\r\nGet the Y position of this cursor.",
		"getType":"获取这个光标的类型。\r\n<p>\r\n原文：\r\nGet the type of this cursor.",
		"setDirection":"设置这个光标的方向。\r\n<p>\r\n原文：\r\nSet the direction of this cursor.",
		"setRawType":"设置这个光标的类型。\r\n<p>\r\n原文：\r\nSet the type of this cursor."
	},
	"StorageMinecart":{
		"ClassDescription":"代表运输矿车，你可以使用{@link InventoryHolder}里的方法来访问."
	},
	"CaveSpider":{
		"ClassDescription":"代表蜘蛛(洞穴蜘蛛)."
	},
	"MetadataValueAdapter":{
		"ClassDescription":"Optional base class for facilitating MetadataValue implementations.\r\n<p>\r\nThis provides all the conversion functions for MetadataValue so that\r\nwriting an implementation of MetadataValue is as simple as implementing\r\nvalue() and invalidate()."
	},
	"BukkitScheduler":{
		"scheduleAsyncDelayedTask":"<b>异步任务不应访问Bukkit里的任何API.应着重保证异步任务的线程安全.</b>\r\n<p>\r\n执行一次任务.此任务将通过由执行器所管理的线程执行.\r\n<p>\r\n原文：<b>Asynchronous tasks should never access any API in Bukkit. Great care\r\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\r\n<p>\r\nSchedules a once off task to occur as soon as possible. This task will\r\nbe executed by a thread managed by the scheduler.",
		"getActiveWorkers":"返回所有激活的worker.\r\n<p>\r\n这个列表包含了独立线程执行的异步任务.\r\n<p>\r\n原文：Returns a list of all active workers.\r\n<p>\r\nThis list contains asynch tasks that are being executed by separate\r\nthreads.",
		"getPendingTasks":"返回所有挂起(就绪/阻塞等)的任务.任务的顺序与它们的执行顺序无关.\r\n<p>\r\n原文：Returns a list of all pending tasks. The ordering of the tasks is not\r\nrelated to their order of execution.",
		"scheduleAsyncRepeatingTask":"<b>异步任务不应访问Bukkit里的任何API.应着重保证异步任务的线程安全.</b>\r\n<p>\r\n执行一次重复执行的任务.此任务将通过由执行器所管理的线程执行.\r\n<p>\r\n原文：<b>Asynchronous tasks should never access any API in Bukkit. Great care\r\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\r\n<p>\r\nSchedules a repeating task. This task will be executed by a thread\r\nmanaged by the scheduler.",
		"cancelAllTasks":"取消执行所有在执行器中的任务.\r\n<p>\r\n原文：Removes all tasks from the scheduler.",
		"runTaskTimerAsynchronously":"",
		"scheduleSyncRepeatingTask":"",
		"runTaskLater":"",
		"cancelTask":"从执行器中取消执行一个任务.\r\n<p>\r\n原文：Removes task from scheduler.",
		"callSyncMethod":"调用主线程的一个方法并返回Future对象.这个任务将被服务器主线程执行.\r\n<ul>\r\n<li>注意①：Future.get()方法绝对不能从主线程调用.\r\n<li>注意②：isDone()方法返回true时的延迟平均至少10ms.\r\n</ul>\r\n<p>\r\n原文：Calls a method on the main thread and returns a Future object. This\r\ntask will be executed by the main server thread.\r\n<ul>\r\n<li>Note: The Future.get() methods must NOT be called from the main\r\n    thread.\r\n<li>Note2: There is at least an average of 10ms latency until the\r\n    isDone() method returns true.\r\n</ul>",
		"isCurrentlyRunning":"检测任务是否正在运行.\r\n<p>\r\n一个重复执行的任务可能不是正在运行的.但将在之后运行.一个已完成并且不重复执行的任务将不再运行.\r\n<p>\r\n直白地说就是,一个存在的线程在执行一个任务,并这个线程没有死亡.\r\n<p>\r\n原文：Check if the task currently running.\r\n<p>\r\nA repeating task might not be running currently, but will be running in\r\nthe future. A task that has finished, and does not repeat, will not be\r\nrunning ever again.\r\n<p>\r\nExplicitly, a task is running if there exists a thread for it, and that\r\nthread is alive.",
		"runTask":"",
		"scheduleSyncDelayedTask":"在下一tick执行一次任务.\r\n<p>\r\n这个任务将由服务器主线程执行(同步).\r\n<p>\r\n原文：Schedules a once off task to occur as soon as possible.\r\n<p>\r\nThis task will be executed by the main server thread.",
		"runTaskLaterAsynchronously":"",
		"runTaskAsynchronously":"",
		"cancelTasks":"取消执行特定的插件所请求的所有任务.\r\n<p>\r\n原文：Removes all tasks associated with a particular plugin from the\r\nscheduler.",
		"isQueued":"检测这个任务是否正在排队等待执行.\r\n<p>\r\n如果一个重复执行的任务正在运行,它现在可能不会被排队,但是可能会在之后发生.一个任务如果不在队列、不在运行.那么将不再排队.\r\n<p>\r\n原文：Check if the task queued to be run later.\r\n<p>\r\nIf a repeating task is currently running, it might not be queued now\r\nbut could be in the future. A task that is not queued, and not running,\r\nwill not be queued again.",
		"runTaskTimer":""
	},
	"ZombieVillager":{
		"getVillagerProfession":"Returns the villager profession of this zombie.",
		"ClassDescription":"Represents a {@link Zombie} which was once a {@link Villager}.",
		"setVillagerProfession":"Sets the villager profession of this zombie."
	},
	"ConversationContext":{
		"getForWhom":"Gets the subject of the conversation.",
		"setSessionData":"Sets session data shared between all {@link Prompt} invocations. Use\r\nthis as a way to pass data through each prompt as the conversation\r\ndevelops.",
		"getPlugin":"Gets the plugin that owns this conversation.",
		"ClassDescription":"A ConversationContext provides continuity between nodes in the prompt graph\r\nby giving the developer access to the subject of the conversation and a\r\ngeneric map for storing values that are shared between all {@link Prompt}\r\ninvocations.",
		"getSessionData":"Gets session data shared between all {@link Prompt} invocations. Use\r\nthis as a way to pass data through each Prompt as the conversation\r\ndevelops."
	},
	"PlayerBucketEmptyEvent":{
		"ClassDescription":"玩家用完一只桶后触发此事件."
	},
	"PlayerBedLeaveEvent":{
		"getBed":"返回此事件涉及的床.\r\n<p>\r\nReturns the bed block involved in this event.",
		"ClassDescription":"玩家离开床时触发此事件."
	},
	"TexturedMaterial":{
		"getMaterial":"获取这个方块是由什么物品制成的。\r\n<p>\r\n原文:Gets the current Material this block is made of",
		"getTextureIndex":"获取物品的材质类型。\r\n<p>\r\n译注:该方法即为获取物品数据值。关于数据值，请参考Minecraft Wiki。\r\n<p>\r\n原文:Get material index from data",
		"getTextures":"检索可能的材质列表.列表的第一个元素将用来作为缺省值.\r\n<p>\r\n原文:Retrieve a list of possible textures. The first element of the list\r\nwill be used as a default.",
		"ClassDescription":"代表有材质的物品，比如台阶和石砖",
		"setTextureIndex":"设置物品的材质类型。\r\n<p>\r\n译注:该方法即为设置物品数据值。关于数据值，请参考Minecraft Wiki。\r\n<p>\r\n原文:Set material index",
		"setMaterial":"设置这个方块是由什么物品制成的.\r\n<p>\r\n原文:Sets the material this block is made of"
	},
	"PrepareAnvilEvent":{
		"getResult":"获取预合成时铁砧即将打造出来的物品，可能为空.\r\n<p>\r\n原文: Get result item,may be null.",
		"ClassDescription":"当物品放入铁砧内，并且可以合成出物品的时候触发该事件"
	},
	"PlayerChatTabCompleteEvent":{
		"ClassDescription":"当玩家尝试补全聊天消息时触发本事件",
		"getLastToken":"获取被补全消息的最后一个'标记'.\r\n<p>\r\n标记是字符开始后的最后一个组成部分. (比如“res ? test”，这里的last token就是test)\r\n<p>\r\n原文:Gets the last 'token' of the message being tab-completed.\r\n<p>\r\nThe token is the substring starting with the character after the last\r\nspace in the message.",
		"getChatMessage":"获取将被补全的聊天消息.\r\n<p>\r\n原文:Gets the chat message being tab-completed.",
		"getTabCompletions":"获取所有补全项集合.\r\n<p>\r\n原文:This is the collection of completions for this event."
	},
	"PlayerVelocityEvent":{
		"getVelocity":"得到玩家目前的移动速度.\r\n<p>\r\n原文:Gets the velocity vector that will be sent to the player",
		"setVelocity":"设置玩家移动速度.\r\n<p>\r\n原文:Sets the velocity vector that will be sent to the player",
		"ClassDescription":"玩家移动速度变化事件."
	},
	"Warning":{
		"ClassDescription":"为指定项目指定一个警告声明。\r\n<p>\r\n当服务器设置使用'default'警告时，如果{@link #value()}为true，则会输出警告。\r\n<p>\r\n原文：\r\nThis designates the warning state for a specific item.\r\n<p>\r\nWhen the server settings dictate 'default' warnings, warnings are printed\r\nif the {@link #value()} is true."
	},
	"PlayerAnimationType":{
		"ClassDescription":"玩家动作的不同种类"
	},
	"EntityRegainHealthEvent":{
		"getRegainReason":"Gets the reason for why the entity is regaining health",
		"ClassDescription":"Stores data for health-regain events",
		"setAmount":"Sets the amount of regained health",
		"getAmount":"Gets the amount of regained health"
	},
	"SimpleCommandMap":{
		"dispatch":"@inheritDoc}",
		"registerAll":"@inheritDoc}",
		"register":"用给定的可能的名称注册命令.另外使用fallbackPrefix来创建唯一名称.\n<p>\n原文:Registers a command with the given name is possible. Also uses\nfallbackPrefix to create a unique name."
	},
	"ProjectileLaunchEvent":{
		"ClassDescription":"当一个抛射物被发射时触发本事件."
	},
	"PlayerUnleashEntityEvent":{
		"getPlayer":"获得解开拴绳的玩家.\r\n<p>\r\n原文:Returns the player who is unleashing the entity.",
		"ClassDescription":"当一个实体被玩家解开拴绳时调用.\r\n<p>"
	},
	"Rabbit":{
		"setRabbitType":"",
		"getRabbitType":""
	},
	"Conversation":{
		"getForWhom":"Gets the entity for whom this conversation is mediating.",
		"acceptInput":"Passes player input into the current prompt. The next prompt (as\r\ndetermined by the current prompt) is then displayed to the user.",
		"getPrefix":"Gets the {@link ConversationPrefix} that prepends all output from this\r\nconversation.",
		"addConversationCanceller":"Adds a {@link ConversationCanceller} to the cancellers collection.",
		"ClassDescription":"The Conversation class is responsible for tracking the current state of a\r\nconversation, displaying prompts to the user, and dispatching the user's\r\nresponse to the appropriate place. Conversation objects are not typically\r\ninstantiated directly. Instead a {@link ConversationFactory} is used to\r\nconstruct identical conversations on demand.\r\n<p>\r\nConversation flow consists of a directed graph of {@link Prompt} objects.\r\nEach time a prompt gets input from the user, it must return the next prompt\r\nin the graph. Since each Prompt chooses the next Prompt, complex\r\nconversation trees can be implemented where the nature of the player's\r\nresponse directs the flow of the conversation.\r\n<p>\r\nEach conversation has a {@link ConversationPrefix} that prepends all output\r\nfrom the conversation to the player. The ConversationPrefix can be used to\r\ndisplay the plugin name or conversation status as the conversation evolves.\r\n<p>\r\nEach conversation has a timeout measured in the number of inactive seconds\r\nto wait before abandoning the conversation. If the inactivity timeout is\r\nreached, the conversation is abandoned and the user's incoming and outgoing\r\nchat is returned to normal.\r\n<p>\r\nYou should not construct a conversation manually. Instead, use the {@link\r\nConversationFactory} for access to all available options.",
		"isLocalEchoEnabled":"Gets the status of local echo for this conversation. If local echo is\r\nenabled, any text submitted to a conversation gets echoed back into the\r\nsubmitter's chat window.",
		"removeConversationAbandonedListener":"Removes a {@link ConversationAbandonedListener}.",
		"outputNextPrompt":"Displays the next user prompt and abandons the conversation if the next\r\nprompt is null.",
		"setLocalEchoEnabled":"Sets the status of local echo for this conversation. If local echo is\r\nenabled, any text submitted to a conversation gets echoed back into the\r\nsubmitter's chat window.",
		"getState":"Returns Returns the current state of the conversation.",
		"addConversationAbandonedListener":"Adds a {@link ConversationAbandonedListener}.",
		"setModal":"Sets the modality of this conversation.  If a conversation is modal,\r\nall messages directed to the player are suppressed for the duration of\r\nthe conversation.",
		"abandon":"Abandons and resets the current conversation. Restores the user's\r\nnormal chat behavior.",
		"setPrefix":"Sets the {@link ConversationPrefix} that prepends all output from this\r\nconversation.",
		"getCancellers":"Gets the list of {@link ConversationCanceller}s",
		"getContext":"Returns the Conversation's {@link ConversationContext}.",
		"begin":"Displays the first prompt of this conversation and begins redirecting\r\nthe user's chat responses.",
		"isModal":"Gets the modality of this conversation. If a conversation is modal, all\r\nmessages directed to the player are suppressed for the duration of the\r\nconversation."
	},
	"IronGolem":{
		"setPlayerCreated":"设置这个铁傀儡是否由玩家建造.\r\n<p>\r\n原文：Sets whether this iron golem was built by a player or not.",
		"isPlayerCreated":"获取这个铁傀儡是否由玩家建造.\r\n<p>\r\n原文：Gets whether this iron golem was built by a player.",
		"ClassDescription":"村民守卫者——铁傀儡."
	},
	"Ageable":{
		"setBaby":"设置这只动物为年幼状态.\r\n<p>\r\n原文:\r\nSets the age of the animal to a baby",
		"getAge":"获取这只动物的年龄.\r\n<p>\r\n原文:\r\nGets the age of this animal.",
		"getAgeLock":"获取这个动物的年龄是否被锁定.\r\n<p>\r\n原文:\r\nGets the current agelock.",
		"setBreed":"设置动物是否具有繁殖能力,如果动物是年幼的设置此将立即长大.\r\n<p>\r\n原文:\r\nSet breedability of the animal, if the animal is a baby and set to\r\nbreed it will instantly grow up.",
		"setAgeLock":"锁定这只动物的年龄,设置这个将防止动物从长成以准备进行交配.\r\n<p>\r\n原文:\r\nLock the age of the animal, setting this will prevent the animal from\r\nmaturing or getting ready for mating.",
		"setAdult":"设置这只动物为成年状态.\r\n<p>\r\n原文:\r\nSets the age of the animal to an adult",
		"canBreed":"返回动物是否具有繁殖能力.\r\n<p>\r\n原文:\r\nReturn the ability to breed of the animal.",
		"ClassDescription":"代表一个有年龄和繁殖能力的实体.",
		"isAdult":"获取这个动物是否成年.\r\n<p>\r\n原文:\r\nReturns true if the animal is an adult.",
		"setAge":"设置这只动物的年龄.\r\n<p>\r\n原文:\r\nSets the age of this animal."
	},
	"ShulkerBullet":{
		"getTarget":"Retrieve the target of this bullet.",
		"setTarget":"Sets the target of this bullet"
	},
	"FireworkEffect":{
		"getFadeColors":"获取烟花效果的淡出颜色。\r\n<p>\r\n原文：\r\nGet the fade colors of the firework effect.",
		"getColors":"获取烟花效果的主颜色。\r\n<p>\r\n原文：\r\nGet the primary colors of the firework effect.",
		"hasTrail":"获取烟花是否具有尾迹效果。\r\n<p>\r\n原文：\r\nGet whether the firework effect has a trail.",
		"getType":"获取烟花效果的类型。\r\n<p>\r\n原文：\r\nGet the type of the firework effect.",
		"builder":"构建一个烟花效果。\r\n<p>\r\n原文：\r\nConstruct a firework effect.",
		"ClassDescription":"代表一个单独的烟花效果。",
		"hasFlicker":"获取烟花是否具有闪烁效果。\r\n<p>\r\n原文：\r\nGet whether the firework effect flickers.",
		"deserialize":""
	},
	"EnchantmentOffer":{
		"getEnchantmentLevel":"Gets the level of the enchantment.",
		"setEnchantmentLevel":"Sets the level of the enchantment.",
		"getEnchantment":"Get the type of the enchantment.",
		"setCost":"Sets the cost in experience levels the player has to pay to enchant his\nitem with this enchantment",
		"setEnchantment":"Sets the type of the enchantment.",
		"ClassDescription":"A class for the available enchantment offers in the enchantment table.",
		"getCost":"Gets the cost in experience levels the player has to pay to enchant his\nitem with this enchantment."
	},
	"CraftItemEvent":{
		"getRecipe":"获取合成出该物品所用的合成公式.",
		"ClassDescription":"当一个物品被合成的时候触发这个事件."
	},
	"SimplePluginManager":{
		"registerInterface":"Registers the specified plugin loader",
		"callEvent":"Calls an event with the given details.\n<p>\nThis method only synchronizes when the event is not asynchronous.",
		"isPluginEnabled":"Checks if the given plugin is enabled or not",
		"getPlugin":"Checks if the given plugin is loaded and returns it when applicable\n<p>\nPlease note that the name of the plugin is case-sensitive",
		"ClassDescription":"Handles all plugin management from the Server",
		"loadPlugins":"Loads the plugins contained within the specified directory",
		"loadPlugin":"Loads the plugin in the specified file\n<p>\nFile must be valid according to the current enabled Plugin interfaces",
		"useTimings":"Sets whether or not per event timing code should be used",
		"registerEvent":"Registers the given event to the specified listener using a directly\npassed EventExecutor"
	},
	"Structure":{},
	"PermissionRemovedExecutor":{
		"attachmentRemoved":"Called when a {@link PermissionAttachment} is removed from a {@link\r\nPermissible}",
		"ClassDescription":"Represents a class which is to be notified when a {@link\r\nPermissionAttachment} is removed from a {@link Permissible}"
	},
	"EnderPearl":{
		"ClassDescription":"代表抛出的末影珍珠实体."
	},
	"AuthorNagException":{},
	"Mule":{
		"ClassDescription":"Represents a Mule - variant of {@link ChestedHorse}."
	},
	"Banner":{},
	"Cow":{
		"ClassDescription":"代表牛."
	},
	"Pig":{
		"hasSaddle":"检查这个猪是否装上了鞍.\r\n<p>\r\n原文:\r\nCheck if the pig has a saddle.",
		"setSaddle":"设置这只猪是否装上了鞍.\r\n<p>\r\n原文:\r\nSets if the pig has a saddle or not",
		"ClassDescription":"代表猪."
	},
	"MetadataStore":{
		"setMetadata":"Adds a metadata value to an object.",
		"getMetadata":"Returns all metadata values attached to an object. If multiple plugins\r\nhave attached metadata, each will value will be included.",
		"invalidateAll":"Invalidates all metadata in the metadata store that originates from the\r\ngiven plugin. Doing this will force each invalidated metadata item to\r\nbe recalculated the next time it is accessed.",
		"removeMetadata":"Removes a metadata item owned by a plugin from a subject.",
		"hasMetadata":"Tests to see if a metadata attribute has been set on an object."
	},
	"BlockBurnEvent":{
		"ClassDescription":"当一个方块被火烧掉的时候触发此事件.\r\n<p>\r\n若方块点燃事件被取消，此方块就不会被火烧毁.",
		"getIgnitingBlock":"获取点燃这个方块的方块.\r\n<p>\r\n原文:Gets the block which ignited this block."
	},
	"Blaze":{
		"ClassDescription":"代表烈焰人怪物."
	},
	"BrewingStand":{
		"getFuelLevel":"获取酿造台当前剩余的燃料.\n<p>\n原文：Get the level of current fuel for brewing.",
		"setFuelLevel":"设置酿造台当前剩余的燃料.\n<p>\n原文：Set the level of current fuel for brewing.",
		"setBrewingTime":"设置酿造还需多长时间完成.\n<p>\n原文：Set the time left before brewing completes.",
		"ClassDescription":"代表酿造台.",
		"getBrewingTime":"返回酿造还需多长时间.\n<p>\n原文：How much time is left in the brewing cycle"
	},
	"EntityCombustEvent":{
		"setDuration":"应被燃烧的时间(秒)\r\n<p>\r\n这个数值仅会延长燃烧的时间,不会减少现有的燃烧时间",
		"getDuration":"",
		"ClassDescription":"当实体燃烧时触发该事件\r\n<p>\r\n如果这个事件被取消,那么这个实体将不会燃烧.\r\n原文:\r\nCalled when an entity combusts.\r\n<p>\r\nIf an Entity Combust event is cancelled, the entity will not combust."
	},
	"DetectorRail":{
		"ClassDescription":"代表探测铁轨"
	},
	"Hopper":{
		"setActive":"设置这个漏斗是否被激活.\n<p>\n原文:Sets whether the hopper is active or not.",
		"setFacingDirection":"设置这个漏斗的朝向.\n<p>\n原文:Sets the direction this hopper is facing",
		"getFacing":"获取这个漏斗的朝向.\n<p>\n原文:Gets the direction this hopper is facing",
		"ClassDescription":"Represents a hopper in an active or deactivated state and facing in a\nspecific direction.",
		"isPowered":"检测这个漏斗是否充能.\n<p>\n原文:Checks if the hopper is powered.",
		"isActive":"检测这个漏斗是否被激活.\n<p>\n原文:Checks whether the hopper is active or not."
	},
	"BukkitObjectOutputStream":{
		"ClassDescription":"这个类旨在被用于连接到{@link ConfigurationSerializable}的API。\r\n它把对象转化为一个内部的实现，为了之后反序列化使用{@link BukkitObjectInputStream}。\r\n<p>\r\n原文：This class is designed to be used in conjunction with the {@link\r\nConfigurationSerializable} API. It translates objects to an internal\r\nimplementation for later deserialization using {@link\r\nBukkitObjectInputStream}.\r\n<p>\r\n直接继承实现这个类的语法可能在未来版本被取消。\r\n<p>\r\n原文：Behavior of implementations extending this class is not guaranteed across\r\nfuture versions."
	},
	"YamlConstructor":{},
	"AsyncPlayerChatEvent":{
		"setFormat":"设置用于展示这条字符消息的格式。\r\n<p>\r\n这个事件执行完毕后，设置的格式的第一个部分是\r\n{@link Player#getDisplayName()} 第二个部分是 {@link#getMessage()}\r\n<p>\r\n原文:Sets the format to use to display this chat message.\r\n<p>\r\nWhen this event finishes execution, the first format parameter is the\r\n{@link Player#getDisplayName()} and the second parameter is {@link\r\n#getMessage()}",
		"getMessage":"获得这个玩家试图发送的信息。这个消息\r\n将以{@link #getFormat()}的格式被获取。\r\n<p>\r\n原文:Gets the message that the player is attempting to send. This message\r\nwill be used with {@link #getFormat()}.",
		"getFormat":"获取用于展示这条字符消息的格式。\r\n<p>\r\n这个事件执行完毕后，获取的格式的第一个部分是\r\n{@link Player#getDisplayName()} 第二个部分是 {@link#getMessage()}\r\n<p>\r\n原文:Gets the format to use to display this chat message.\r\n<p>\r\nWhen this event finishes execution, the first format parameter is the\r\n{@link Player#getDisplayName()} and the second parameter is {@link\r\n#getMessage()}",
		"ClassDescription":"当玩家聊天时触发这个事件.\r\n<p>\r\n构造器提供了一个表示事件同步触发还是异步触发的布尔值。\r\n当异步时，本事件可以被任何线程调用，无主线程，访问API受限。\r\n<p>\r\n如果玩家通过传入的聊天数据包导致触发本事件，本事件将是异步的。\r\n如果一个插件通过迫使玩家聊天（比如<code>Player.chat</code>）而触发本事件，本事件将是同步的。\r\n<p>\r\n应注意通过{@link #isAsynchronous()}检查本事件是同步的还是异步的，适当地处理本事件。",
		"setMessage":"设置这个玩家将发送的信息。这个消息\r\n将以{@link #getFormat()}的格式被设置。\r\n<p>\r\n原文:Sets the message that the player will send. This message will be used\r\nwith {@link #getFormat()}.",
		"getRecipients":"获取一个将看到这条消息的玩家的集合。\r\n<p>\r\n本方法返回的集合不保证可以改变和访问时可能自动填充。\r\n任何监听器访问这个返回的集合应该知道对于一个lazy set的实现可能会降低性能.\r\n<p>\r\n监听器应注意到如果事件传唤者提供了一个不可修改的Set集合的话修改这个列表可能会抛出{@link\r\nUnsupportedOperationException}异常。\r\n<p>\r\n原文:Gets a set of recipients that this chat message will be displayed to.\r\n<p>\r\nThe set returned is not guaranteed to be mutable and may auto-populate\r\non access. Any listener accessing the returned set should be aware that\r\nit may reduce performance for a lazy set implementation.\r\n<p>\r\nListeners should be aware that modifying the list may throw {@link\r\nUnsupportedOperationException} if the event caller provides an\r\nunmodifiable set."
	},
	"HelpMap":{
		"addTopic":"把主题添加到服务器的帮助索引。\r\n<p>\r\n原文：Adds a topic to the server's help index.",
		"clear":"清除帮助索引的内容。通常在服务器重新加载时调用。\r\n<p>\r\n原文：Clears out the contents of the help index. Normally called during\r\nserver reload.",
		"getIgnoredPlugins":"获取服务器管理者选择从帮助索引中排除的插件列表。\r\n想确保完成服务器管理者的预期，\r\n插件作者需要查看实现HelpTopicFactory的集合来选择直接继承org.bukkit.command.Command而不是PluginCommand。\r\n<p>\r\n原文：Gets the list of plugins the server administrator has chosen to exclude\r\nfrom the help index. Plugin authors who choose to directly extend\r\n{@link org.bukkit.command.Command} instead of {@link\r\norg.bukkit.command.PluginCommand} will need to check this collection in\r\ntheir {@link HelpTopicFactory} implementations to ensure they meet the\r\nserver administrator's expectations.",
		"ClassDescription":"HelpMap跟踪所有注册在Bukkit服务器的帮助主题。\r\n当服务器启动或重新加载时，按以下顺序处理帮助和添加内容：\r\n\n<ol>\r\n<li>从help.yml加载总主题\r\n<li>插件加载并可选择调用{@code addTopic()}添加主题\r\n<li>使用{@link HelpTopicFactory}帮助主题工厂对象的注册插件命令，来创建主题\r\n<li>主题内容被修改为指向help.yml\r\n</ol>\r\n<p>\r\n原文:The HelpMap tracks all help topics registered in a Bukkit server. When the\r\nserver starts up or is reloaded, help is processed and topics are added in\r\nthe following order:\r\n\n<ol>\r\n<li>General topics are loaded from the help.yml\r\n<li>Plugins load and optionally call {@code addTopic()}\r\n<li>Registered plugin commands are processed by {@link HelpTopicFactory}\r\n    objects to create topics\r\n<li>Topic contents are amended as directed in help.yml\r\n</ol>",
		"getHelpTopic":"获取指定主题名称的帮助主题。\r\n<p>\r\n原文：Returns a help topic for a given topic name.",
		"getHelpTopics":"获得所有注册过的帮助主题集合。\r\n<p>\r\n原文：Returns a collection of all the registered help topics.",
		"registerHelpTopicFactory":"关联一个HelpTopicFactory对象到指定的命令基类。\r\n插件通常在onLoad()中调用此方法。\r\n注册后，自定义HelpTopicFactory将用来创建一个所有命令源于commandClass基类的自定义HelpTopic，\r\n或者所有命令源于org.bukkit.command.PluginCommand中执行源于commandClass基类的那个类。\r\n<p>\r\n原文：Associates a {@link HelpTopicFactory} object with given command base\r\nclass. Plugins typically call this method during {@code onLoad()}. Once\r\nregistered, the custom HelpTopicFactory will be used to create a custom\r\n{@link HelpTopic} for all commands deriving from the {@code\r\ncommandClass} base class, or all commands deriving from {@link\r\norg.bukkit.command.PluginCommand} who's executor derives from {@code\r\ncommandClass} base class."
	},
	"Boat":{
		"getUnoccupiedDeceleration":"获取未占用船的加减速度速率(新速度=当前速度*速率).\r\n默认值为-1. 值低于0表示没有施加额外的加减速速率.\r\n<p>\r\n原文:\r\nGets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\r\nboats. The default is -1. Values below 0 indicate that no additional\r\ndeceleration is imposed.",
		"getWoodType":"获取船的木质种类. (例如:橡木质船/云杉木质船/白桦木质船等 ...)\r\n<p>\r\n原文:\r\nGets the wood type of the boat.",
		"getOccupiedDeceleration":"获取当前已被占用船的加减速度的速率,(新速度=当前速度*速率) 该默认值为0.2.\r\n<p>\r\n原文:\r\nGets the deceleration rate (newSpeed = curSpeed * rate) of occupied\r\nboats. The default is 0.2.",
		"getWorkOnLand":"获取船能否在陆地上工作.\r\n<p>\r\n原文:\r\nGet whether boats can work on land.",
		"setUnoccupiedDeceleration":"设置未占用船的加减速度速率(新速度=当前速度*速率).\r\n设置一个高的数值时,如果玩家下船将允许该船有更快的减速速率.\r\n默认值为-1. 值低于0表示没有施加额外的加减速速率.\r\n<p>\r\n原文:\r\nSets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\r\nboats. Setting this to a higher value allows for quicker deceleration\r\nof boats when a player disembarks. The default is -1. Values below 0\r\nindicate that no additional deceleration is imposed.",
		"setOccupiedDeceleration":"设置当前已被占用船的加减速度速率(新速度=当前速度*速率). 设置为一个高的数值\r\n时将允许船有更高的加速速率. 该默认值为0.2.\r\n<p>\r\n原文:\r\nSets the deceleration rate (newSpeed = curSpeed * rate) of occupied\r\nboats. Setting this to a higher value allows for quicker acceleration.\r\nThe default is 0.2.",
		"ClassDescription":"代表船实体",
		"getMaxSpeed":"获取船的最高速度,该速度与船的方向速度无关.\r\n<p>\r\n原文:\r\nGets the maximum speed of a boat. The speed is unrelated to the\r\nvelocity.",
		"setWorkOnLand":"设置一个船能否在陆地上工作.\r\n<p>\r\n原文:\r\nSet whether boats can work on land.",
		"setWoodType":"设置船的木质种类.\r\n<p>\r\n原文:\r\nSets the wood type of the boat.",
		"setMaxSpeed":"设置船的最大速度,必须是非负数. 该默认值为0.4D\r\n<p>\r\n原文:\r\nSets the maximum speed of a boat. Must be nonnegative. Default is 0.4D."
	},
	"SpawnChangeEvent":{
		"getPreviousLocation":"获取之前的出生点位置.\r\n<p>\r\n原文:\r\nGets the previous spawn location",
		"ClassDescription":"一个在世界的出生点被改变时调用的事件.包含这个世界之前的出生点."
	},
	"VehicleExitEvent":{
		"ClassDescription":"实体退出载具的事件",
		"getExited":"获取退出载具事件的实体.\r\n<p>\r\n原文:Get the living entity that exited the vehicle."
	},
	"RemoteConsoleCommandSender":{},
	"Diode":{
		"getDelay":"获取这个红石中继器的延迟 (以刻为单位).\n<p>\n原文:Gets the delay of the repeater in ticks.",
		"setFacingDirection":"设置这个红石中继器的朝向.\n<p>\n原文:Sets the direction this diode is facing.",
		"getFacing":"获取这个红石中继器的朝向.\n<p>\n原文:Gets the direction this diode is facing",
		"ClassDescription":"代表开启或关闭状态的红石中继器.",
		"isPowered":"检测这个红石中继器是否充能.\n<p>\n原文：Checks if the diode is powered.",
		"setDelay":"设置这个红石中继器的延迟.\n<p>\n原文:Sets the delay of the repeater."
	},
	"HelpTopicFactory":{
		"createTopic":"This method accepts a command deriving from a custom command base class\r\nand constructs a custom HelpTopic for it.",
		"ClassDescription":"A HelpTopicFactory is used to create custom {@link HelpTopic} objects from\r\ncommands that inherit from a common base class or have executors that\r\ninherit from a common base class. You can use a custom HelpTopic to change\r\nthe way all the commands in your plugin display in the help. If your plugin\r\nimplements a complex permissions system, a custom help topic may also be\r\nappropriate.\r\n<p>\r\nTo automatically bind your plugin's commands to your custom HelpTopic\r\nimplementation, first make sure all your commands or executors derive from\r\na custom base class (it doesn't have to do anything). Next implement a\r\ncustom HelpTopicFactory that accepts your custom command base class and\r\ninstantiates an instance of your custom HelpTopic from it. Finally,\r\nregister your HelpTopicFactory against your command base class using the\r\n{@link HelpMap#registerHelpTopicFactory(Class, HelpTopicFactory)} method.\r\n<p>\r\nAs the help system iterates over all registered commands to make help\r\ntopics, it first checks to see if there is a HelpTopicFactory registered\r\nfor the command's base class. If so, the factory is used to make a help\r\ntopic rather than a generic help topic. If no factory is found for the\r\ncommand's base class and the command derives from {@link\r\norg.bukkit.command.PluginCommand}, then the type of the command's executor\r\nis inspected looking for a registered HelpTopicFactory. Finally, if no\r\nfactory is found, a generic help topic is created for the command."
	},
	"PlayerShearEntityEvent":{
		"ClassDescription":"玩家剪羊毛时调用此事件.",
		"getEntity":"获得正在被玩家剪羊毛的实体对象.\r\n<p>\r\n原文:Gets the entity the player is shearing"
	},
	"TreeSpecies":{
		"ClassDescription":"代表不同的树木种类。",
		"getByData":"获取给定值代表的树种。\r\n<p>\r\n原文：Gets the TreeSpecies with the given data value",
		"getData":"获取该树种相关的数据值。\r\n<p>\r\n原文：Gets the associated data value representing this species"
	},
	"SpectralArrow":{
		"setGlowingTicks":"Sets the amount of time to apply the glowing effect for.",
		"ClassDescription":"Represents a spectral arrow.",
		"getGlowingTicks":"Returns the amount of time that this arrow will apply\nthe glowing effect for."
	},
	"VehicleEvent":{
		"getVehicle":"获取发生事件的载具.\r\n<p>\r\n原文:Get the vehicle",
		"ClassDescription":"代表所有和载具有关的事件"
	},
	"MemoryConfigurationOptions":{
		"ClassDescription":"Various settings for controlling the input and output of a {@link MemoryConfiguration}."
	},
	"PluginDisableEvent":{
		"ClassDescription":"当一个插件被禁用时调用."
	},
	"StringPrompt":{
		"ClassDescription":"StringPrompt is the base class for any prompt that accepts an arbitrary\r\nstring from the user.",
		"blocksForInput":"Ensures that the prompt waits for the user to provide input."
	},
	"ItemSpawnEvent":{
		"getLocation":"Gets the location at which the item is spawning.",
		"ClassDescription":"Called when an item is spawned into a world"
	},
	"VehicleCollisionEvent":{
		"ClassDescription":"两个载具碰撞的事件"
	},
	"Coal":{
		"getType":"获取这个煤的种类.\r\n<p>\r\n原文：Gets the current type of this coal",
		"ClassDescription":"代表不同种类的煤(煤和木炭)",
		"setType":"设置这个煤的种类.\r\n<p>\r\n原文：Sets the type of this coal"
	},
	"PlayerArmorStandManipulateEvent":{
		"getSlot":"Returns the raw item slot of the armor stand in this event.",
		"getArmorStandItem":"Returns the item held by the armor stand.\r\nIf this Item is null and the player's Item is also null, there will be no transaction between the player and the armor stand.\r\nIf the Player's item is null, but the armor stand item is not then the player will obtain the armor stand item.\r\nIn the case that the Player's item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\r\nIf both items are not null, the items will be swapped.\r\nIn the case that the event is cancelled the original items will remain the same.",
		"ClassDescription":"Called when a player interacts with an armor stand and will either swap, retrieve or place an item.",
		"getPlayerItem":"Returns the item held by the player. If this Item is null and the armor stand Item is also null,\r\nthere will be no transaction between the player and the armor stand.\r\nIf the Player's item is null, but the armor stand item is not then the player will obtain the armor stand item.\r\nIn the case that the Player's item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\r\nIf both items are not null, the items will be swapped.\r\nIn the case that the event is cancelled the original items will remain the same."
	},
	"ServerListPingEvent":{
		"getNumPlayers":"获取玩家数量。\r\n<p>\r\n原文：\r\nGet the number of players sent.",
		"setMaxPlayers":"设置最大玩家数量。\r\n<p>\r\n原文：\r\nSet the maximum number of players sent.",
		"iterator":"@inheritDoc}\r\n<p>\r\n调用{@link Iterator#remove()}方法将会强制部分玩家不会在玩家列表里显示，减小{@link #getNumPlayers()}返回的大小，并且不会再被任何一个新的迭代器返回。\r\n<p>\r\n原文：\r\n{@inheritDoc}\r\n<p>\r\nCalling the {@link Iterator#remove()} method will force that particular\r\nplayer to not be displayed on the player list, decrease the size\r\nreturned by {@link #getNumPlayers()}, and will not be returned again by\r\nany new iterator.",
		"setServerIcon":"设置发送给客户端的服务器图标。\r\n<p>\r\n原文：\r\nSets the server-icon sent to the client.",
		"setMotd":"更改每日信息。\r\n<p>\r\n原文：\r\nChange the message of the day message.",
		"getAddress":"获取请求来源地址。\r\n<p>\r\n原文：\r\nGet the address the ping is coming from.",
		"getMotd":"获取每日信息。\r\n<p>\r\n原文：\r\nGet the message of the day message.",
		"getMaxPlayers":"获取最大玩家数量。\r\n<p>\r\n原文：\r\nGet the maximum number of players sent.",
		"ClassDescription":"当收到MOTD请求时被调用。显示的玩家会被检查并会在这个事件里被{@link #iterator() iterating}移出。"
	},
	"PistonBaseMaterial":{
		"ClassDescription":"活塞类方块的Material data.",
		"setPowered":"设置这个活塞的状态.\r\n<p>\r\n原文:Sets the current state of this piston",
		"isSticky":"检测这是不是一个粘性活塞。\r\n<p>\r\n原文:Checks if this piston base is sticky, and returns true if so"
	},
	"PluginLogger":{
		"ClassDescription":"The PluginLogger class is a modified {@link Logger} that prepends all\r\nlogging calls with the name of the plugin doing the logging. The API for\r\nPluginLogger is exactly the same as {@link Logger}."
	},
	"Player":{
		"setPlayerTime":"设置该玩家客户端的时间,单位为tick. <p>\n假如relative为true则玩家时间会随着世界时间变动而变动,并且保持一个差值,反之客户端时间固定不动. <p>\n注意!如果relative为true,那么time表示的就是客户端的时间与世界的时间之差(相对于世界的时间),而如果为false\n那么time表示的就是一个绝对的时间. <p>\n原文:Sets the current time on the player's client. When relative is true the\nplayer's time will be kept synchronized to its world time with the\nspecified offset.\n<p>\nWhen using non relative time the player's time will stay fixed at the\nspecified time parameter. It's up to the caller to continue updating\nthe player's time. To restore player time to normal use\nresetPlayerTime().",
		"setPlayerListName":"设置玩家显示在Tab列表中的名称.\n<p>\n不允许超过16个字符,不允许重复.但支持{@link ChatColor}颜色代码.\n<p>\n如果设置为null则不在玩家列表中显示.(玩家自己还是看得到的,只不过别人看不到).\n<p>\n原文:Sets the name that is shown on the in-game player list.\n<p>\nThe name cannot be longer than 16 characters, but {@link ChatColor} is\nsupported.\n<p>\nIf the value is null, the name will be identical to {@link #getName()}.\n<p>\nThis name is case sensitive and unique, two names with different casing\nwill appear as two different people. If a player joins afterwards with\na name that conflicts with a player's custom list name, the joining\nplayer's player list name will have a random number appended to it (1-2\ncharacters long in the default implementation). If the joining player's\nname is 15 or 16 characters long, part of the name will be truncated at\nthe end to allow the addition of the two digits.",
		"isSprinting":"判断玩家是否在疾跑.\n<p>\n原文:Gets whether the player is sprinting or not.",
		"ClassDescription":"玩家对象",
		"awardAchievement":"给予玩家一个成就{@link Achievement}和这个成就所需的父成就. <p>\n原文:Awards the given achievement and any parent achievements that the\nplayer does not have. <p>\n译注:比如,给玩家\"这是?工作台!\"成就,这个方法就会先给玩家它的父成就\"获得木头!\"",
		"decrementStatistic":"将该玩家的统计信息中某个跟实体有关的统计项中的某实体类型({@link EntityType})减少指定的值. <p>\n原文:Decrements the given statistic for this player for the given entity. <p>\n译注:与{@link #incrementStatistic(org.bukkit.Statistic, org.bukkit.entity.EntityType, int) }相反.",
		"getPlayerListName":"得到玩家显示在tab列表中的名称.\n<p>\n原文:Gets the name that is shown on the player list.",
		"setLevel":"设置玩家的等级 <p>.\n原文:Sets the players current experience level",
		"isSleepingIgnored":"查看{@link #setSleepingIgnored(boolean) }方法所设置的值. <p>\n默认为false.<p>\n原文:Returns whether the player is sleeping ignored.",
		"setFlying":"设置该玩家飞行状态. <p>\n原文:Makes this player start or stop flying.",
		"hasAchievement":"判断玩家是否有该成就. <p>\n原文:Gets whether this player has the given achievement.",
		"hidePlayer":"让该玩家看不见某玩家. <p>\n原文:Hides a player from this player",
		"setSleepingIgnored":"是否忽略该玩家.如果设置为true,不需要该玩家睡觉,只需其他人睡觉,时间也能改变. <p>\n如果所有玩家都把这个项设置为true但是没有人睡觉,则什么事也不会发生.<p>\n原文:Sets whether the player is ignored as not sleeping. If everyone is\neither sleeping or has this flag set, then time will advance to the\nnext day. If everyone has this flag set but no one is actually in bed,\nthen nothing will happen.",
		"setResourcePack":"请求玩家的客户端下载并且使用指定资源包. <p>\n玩家的客户端将在后台异步下载新的资源包,并且下载完成后会自动使用那个资源包.如果\n这个资源包已经下载好了,客户端先会检查给定URL的资源包跟已经下载的资源包是否一样. \n如果不一样就会重新下载,一样就直接使用. <p>\n在开始下载之前,客户端会显示一个GUI确定界面,提示要不要下载资源包.如果玩家选择不要,\n就不能下载. <p>\n注意:\n<ul>\n<li>如果玩家的客户端没有开启\"使用服务器资源包\"这个方法将失效. 使用\n{@link PlayerResourcePackStatusEvent} 方法以推断玩家是否加载了你设置的资源包!\n<li>在Minecraft中没有将资源包重置为默认的概念,所以玩家必须重新登陆才能这么做,或者你必须发送一个空白的资源包.\n</ul>\n<p>\n原文:Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>There is no concept of resetting resource packs back to default\n    within Minecraft, so players will have to relog to do so or you\n    have to send an empty pack.\n</ul>",
		"setHealthScale":"设置客户端显示的血量的\"压缩率\". <p>\n显示的血量遵循一个规则: <code>显示的血量 =\ngetHealth() / getMaxHealth() * getHealthScale()</code>. <p>\n译注:当玩家的最大血量过多时({@link #setMaxHealth(double) }),每一排血量将会被\n挤在一起,以免挡住玩家的视线,这就是\"压缩\".这个方法就是设置血量的\"压缩率\".(完全没用的说..). <p>\n原文:Sets the number to scale health to for the client; this will also\n{@link #setHealthScaled(boolean) setHealthScaled(true)}.\n<p>\nDisplayed health follows a simple formula <code>displayedHealth =\ngetHealth() / getMaxHealth() * getHealthScale()</code>.",
		"canSee":"检查该玩家是否能看到某玩家. <p>\n原文:Checks to see if a player has been hidden from this player",
		"sendBlockChange":"类似于 {@link #sendBlockChange(Location loc, Material material, byte data)}方法. <p>\nSend a block change. This fakes a block change packet for a user at a\ncertain location. This will not actually change the world in any way.",
		"setBedSpawnLocation":"设置玩家上一次睡觉的床的位置. <p>\n原文:Sets the Location where the player will spawn at their bed.",
		"getExhaustion":"得到玩家的疲劳度. <p>\n疲劳度控制者玩家的饥饿消耗.当玩家达到一定的疲劳度时,你的饱食度就会下降,并且疲劳度归零. <p>\n译注:如果饱食度为0,那么就扣饥饿度. <p>\n注释2:运动会产生疲劳度. <p>\n原文:Gets the players current exhaustion level.\n<p>\nExhaustion controls how fast the food level drops. While you have a\ncertain amount of exhaustion, your saturation will drop to zero, and\nthen your food will drop to zero.",
		"sendRawMessage":"发送一条不含颜色代码的消息\n<p>\n译注:就是会把颜色代码过滤掉然后{#link sendMessage}\n<p>\n原文:Sends this sender a message raw",
		"sendChunkChange":"向该玩家发送一个伪造的指定位置的长方体的更改数据包.这不会改变世界中的方块.<p>\n原文:Send a chunk change. This fakes a chunk change packet for a user at a\ncertain location. The updated cuboid must be entirely within a single\nchunk. This will not actually change the world in any way.\n<p>\nAt least one of the dimensions of the cuboid must be even. The size of\nthe data buffer must be 2.5*sx*sy*sz and formatted in accordance with\nthe Packet51 format.<p>\n译注:这..很难解释耶,就是说,这个方法可以让玩家的客户端显示这个长方体内全是钻石矿石233~<p>\n具体请看{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte) }方法.\n它其实就是sendBlockChange方法的简单变体.sendBlockChange是伪装一个方块,而这个方法是伪装一堆方块.<p>\n例: <p>\n   byte data = new Byte[27];   //由于我们要发送的是3*3*3的立方体,所以为27<p>\n   for(int i=0;i&lt;data.lenth;i++) data[i] = (byte)11 //由于我们想把这个立方体里填满岩浆,所以都为11 <p>\n   player.sendBlockChange(player.getLocation(),3,3,3,data); //完成~上帝保佑那个玩家233 <p>",
		"setSpectatorTarget":"Sets the entity which is followed by the camera when in\n{@link GameMode#SPECTATOR}.",
		"saveData":"保存玩家数据(位置,血量,背包,移动方向\n及其他信息至在world/player文件夹中的玩家名.dat文件).\n<p>\n原文 Saves the players current location, health, inventory, motion, and\nother information into the username.dat file, in the world/player\nfolder",
		"showPlayer":"让该玩家能看到某玩家. <p>\n原文:Allows this player to see a player that was previously hidden",
		"getHealthScale":"获取客户端显示的血量的\"压缩率\".  <p>\n详见{@link #setHealthScale(double) }\n原文:Gets the number that health is scaled to for the client.",
		"isHealthScaled":"获取客户端显示的玩家血量是否被\"压缩\"了. <p>\n译注:当玩家的最大血量过多时({@link #setMaxHealth(double) }),每一排血量将会被\n挤在一起,以免挡住玩家的视线,这就是\"压缩\".这个方法就是判断血量是否被压缩了.(完全没用的说..). <p>\n原文:Gets if the client is displayed a 'scaled' health, that is, health on a\nscale from 0-{@link #getHealthScale()}.",
		"setAllowFlight":"设置玩家是否能够飞起来(就像创造模式). <p>\n译注:如果被设置为false,即便是创造模式也不能飞.\n原文:Sets if the Player is allowed to fly via jump key double-tap like in\ncreative mode.",
		"isPlayerTimeRelative":"如果玩家时间于当前世界时间保持了一定的差值则返回true. <p>\n原文:Returns true if the player's time is relative to the server time,\notherwise the player's time is absolute and will not change its current\ntime unless done so with setPlayerTime().",
		"performCommand":"强制玩家执行某个命令.\n<p>\n原文:Makes the player perform the given command",
		"giveExp":"给玩家指定经验. <p>\n原文:Gives the player the amount of experience specified.",
		"getDisplayName":"获得玩家在聊天中的昵称.\n<p>\n这个名字只显示在聊天中,可以包括颜色 \n<p>\n原文:Gets the \"friendly\" name to display of this player. This may include\ncolor.\n<p>\nNote that this name will not be displayed in game, only in chat and\nplaces defined by plugins.",
		"isSneaking":"判断玩家是否在潜行中.\n<p>\n原文:Returns if the player is in sneak mode",
		"sendMap":"Render a map and send it to the player in its entirety. This may be\nused when streaming the map in the normal manner is not desirable. <p>\n译注:额...没搞懂...不过一般用不上吧?",
		"getBedSpawnLocation":"得到玩家上一次睡觉的床的位置({@link Location}). <p>\n如果玩家没有睡过觉或床已被拆除则返回null. <p>\n原文:Gets the Location where the player will spawn at their bed, null if\nthey have not slept in one or their current bed spawn is invalid.",
		"getFoodLevel":"得到玩家的饥饿度(不是饱食度). <p>\n原文:Gets the players current food level",
		"setSprinting":"设置玩家疾跑状态开启/取消.\n<p>\n原文:Sets whether the player is sprinting or not.",
		"isFlying":"检查玩家是否在飞. <p>\n原文:Checks to see if this player is currently flying or not.",
		"setStatistic":"设置该玩家的统计信息中某个跟实体有关的统计项的某实体类型({@link EntityType})为某个数值. <p>\n原文:Sets the given statistic for this player for the given entity. <p>",
		"setTotalExperience":"设置总共的经验值. <p>\n原文:Sets the players current experience level",
		"setFlySpeed":"设置该玩家飞行速度. <p>\n速度为-1~1之间,负数代表玩家会反着飞... <p>\n译注:不代表行走的速度!. <p>\n原文:Sets the speed at which a client will fly. Negative values indicate\nreverse directions.",
		"resetTitle":"Resets the title displayed to the player. This will clear the displayed\ntitle / subtitle and reset timings to their default values.",
		"playNote":"Play a note for a player at a location. This requires a note block\nat the particular location (as far as the client is concerned). This\nwill not work without a note block. This will not work with cake.<p>\n译注:貌似就是让一个音符盒播放指定乐器的指定声音..没试过...",
		"getTotalExperience":"得到总共的经验值(等级和经验).\n<br>\n这个数值指玩家随着时间的推移收集的全部经验，并只在玩家死亡时显示为玩家的\"得分\".\n<p>\n原文:Gets the players total experience points\n<br>\nThis refers to the total amount of experience the player has collected\nover time and is only displayed as the player's \"score\" upon dying.",
		"getWalkSpeed":"得到行走速度. <p>\n译注:不代表飞行速度!\n原文:Gets the current allowed speed that a client can walk.",
		"getStatistic":"获得该玩家的统计信息中跟实体有关的统计项中的某实体({@link EntityType})数量. <p>\n原文:Gets the value of the given statistic for this player. <p>\n译注:比如,要获得玩家杀过多少僵尸,就用getStatistic(记录玩家杀实体的统计项,EntityType.Zombie);",
		"sendTitle":"Sends a title and a subtitle message to the player. If either of these\nvalues are null, they will not be sent and the display will remain\nunchanged. If they are empty strings, the display will be updated as\nsuch. If the strings contain a new line, only the first line will be\nsent. All timings values may take a value of -1 to indicate that they\nwill use the last value sent (or the defaults if no title has been\ndisplayed).",
		"getSpectatorTarget":"Gets the entity which is followed by the camera when in\n{@link GameMode#SPECTATOR}.",
		"loadData":"加载上一次保存的数据(从在world/player文件夹中的玩家名.dat文件中加载\n位置,血量,背包,移动方向及其他信息).<p>\n这将会覆盖当前内存中的数据. <p>\n原文:Loads the players current location, health, inventory, motion, and\nother information from the username.dat file, in the world/player\nfolder.\n<p>\nNote: This will overwrite the players current inventory, health,\nmotion, etc, with the state from the saved dat file.",
		"playEffect":"在某个位置({@link Location})向玩家播放一个粒子效果({@link Effect}). <p>\n原文:Plays an effect to just this player.<p>\n译注1:data参数一般为0就行,但是如果要播放的效果为<p>\n{@link Effect}.StepSound(方块被打破时的粒子效果),data就为{@link Material}类型.<p>\n例:playEffect(loc, {@link Effect}.StepSound, Material.REDSTONE_BLOCK)将\n在loc的位置播放一个红石块(REDSTONE_BLOCK)被打破的粒子效果.<p>\n译注2:{@link Material}只能表示主ID,不能表示副ID,所以播放绿色羊毛的打破效果貌似是不可能的,\n但是由于data是泛型,我们猜测会不会data也可以是能表示任何{@link Block 方块}类型?由于时间关系不能测试,请谅解.",
		"getSaturation":"得到玩家的饱食度(不是饥饿度). <p>\n饱食度是一个饥饿度的缓存.当你的饱食度 {@literal  >}0的时候,饥饿度是不会下降的. <p>\n译注:就是说,吃东西的时候,你的饥饿度被填满了,而多出来的部分就是隐藏的饱食度.当你的疲劳值(见{@link #getExhaustion() })\n达到一定程度时,如果饱食度不为0,那么先扣饱食度.只有当没饱食度时,才会扣饥饿度.其实饱食度就是饥饿度,只不过是隐藏的. <p>\n原文:Gets the players current saturation level.\n<p>\nSaturation is a buffer for food level. Your food level will not drop if\nyou are saturated {@literal >} 0.",
		"setDisplayName":"设置玩家在聊天中的昵称.\n<p>\n这个名字只显示在聊天中,可以包括颜色.\n<p>\n原文Sets the \"friendly\" name to display of this player. This may include\ncolor.\n<p>\nNote that this name will not be displayed in game, only in chat and\nplaces defined by plugins.",
		"setCompassTarget":"设置玩家指南针的指向的位置({@link Location}).\n<p>\n原文:Set the target of the player's compass.",
		"setPlayerWeather":"设置玩家的客户端的天气. <p>\n使用{@link #resetPlayerWeather()}来恢复正常. <p>\n原文:Sets the type of weather the player will see.  When used, the weather\nstatus of the player is locked until {@link #resetPlayerWeather()} is\nused.",
		"stopSound":"Stop the specified sound from playing.",
		"sendSignChange":"向该玩家发送一个伪造的牌子({@link Sign})上的字的更改数据包.这不会改变世界中的任何方块. <p>\n如果那个位置没有牌子,这个方法将用{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte) }\n方法在那个位置伪造一个牌子然后更改它.<p>\n如果客户端认为在指定的位置没有牌子,则会显示一个错误给玩家.<p>\n原文:Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via {@link #sendBlockChange(org.bukkit.Location, int, byte)} or\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user. <p>\n译注:该方法类似于{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte) },\n只不过sendBlockChange是伪装一个方块成其他方块,而它只是伪装牌子上的字.",
		"playSound":"Play a sound for a player at the location.\n<p>\nThis function will fail silently if Location or Sound are null. No sound\nwill be heard by the player if their client does not have the respective\nsound for the value passed.",
		"setSneaking":"设置玩家潜行模式开启/取消.\n<p>\n原文:Sets the sneak mode the player",
		"setExp":"设置当前级别升到下一级别经验进度的百分比. <p>\n0表示毫无进展(0%), 0.99表示差一点点(99%), 1表示要升级了(100%). <p>\nSets the players current experience points towards the next level\n<p>\nThis is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
		"getAddress":"得到一个Address对象,包括这个玩家的IP以及登入端口.\n<p>\n可以使用toString()方法得到 \"xxx.xxx.xxx.xxx:xxxxx\"\n<p>\n原文:Gets the socket address of this player",
		"getScoreboard":"获取玩家的计分板. <p>\n原文:Gets the Scoreboard displayed to this player",
		"removeAchievement":"删除玩家的一个成就及其子成就. <p>\n原文:Removes the given achievement and any children achievements that the\nplayer has. <p>\n译注:假如移除玩家的\"获得木头!\"成就,同时也会移除\"这是?工作台\"和后面的所有成就.因为没有\"获得木头!\"成就,就没后面的成就.",
		"setWalkSpeed":"设置该玩家行走速度. <p>\n速度在-1~1之间,负数代表玩家会倒着走(整人专用233~)... <p>\n译注:不代表飞行的速度!\n原文:Sets the speed at which a client will walk. Negative values indicate\nreverse directions.",
		"spawnParticle":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.",
		"getAdvancementProgress":"Return the player's progression on the specified advancement.",
		"incrementStatistic":"将该玩家的统计信息中的某个跟实体有关的统计项的某实体类型({@link EntityType})加上指定的数值. <p>\n原文:Increments the given statistic for this player for the given entity. <p>\n译注:跟{@link #incrementStatistic(org.bukkit.Statistic, org.bukkit.entity.EntityType) }类似.只不过这个方法可以指定每次加多少.",
		"setScoreboard":"设置玩家的计分板. <p>\n原文:Sets the player's visible Scoreboard.",
		"getPlayerTime":"得到玩家的客户端的当前时间,单位为tick. <p>\n原文:Returns the player's current timestamp.",
		"getPlayerTimeOffset":"返回玩家的客户端的当前时间与玩家当前世界时间的差值. <p>\n如玩家时间是固定的，则返回玩家时间.\n原文:Returns the player's current time offset relative to server time, or\nthe current player's fixed time if the player's time is absolute.",
		"getExp":"得到当前级别升到下一级别经验进度的百分比. <p>\n0表示毫无进展(0%), 0.99表示差一点点(99%), 1表示要升级了(100%). <p>\n原文:Gets the players current experience points towards the next level.\n<p>\nThis is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
		"getPlayerWeather":"得到玩家所看到的天气.如果返回null,玩家的天气跟世界的天气一致. <p>\n原文:Returns the type of weather the player is currently experiencing.",
		"kickPlayer":"踢出玩家,并且发送一条自定义的踢出消息.\n<p>\n原文:Kicks player with custom kick message.",
		"getLevel":"得到玩家的等级. <p>\n原文:Gets the players current experience level",
		"giveExpLevels":"增加玩家的等级. <p>\n支持负数(减少等级). <p>\n原文:Gives the player the amount of experience levels specified. Levels can\nbe taken by specifying a negative amount.",
		"getCompassTarget":"得到玩家指南针的指向的位置({@link Location}).\n<p>\n译注:默认为出生点.\n<p>\n原文: Get the previously set compass target.",
		"getAllowFlight":"判断玩家是否能飞起来<p>\n译注:如果玩家确实在创造模式,那么一般返回true,除非被setAllowFlight(false);\n原文:Determines if the Player is allowed to fly via jump key double-tap like\nin creative mode.",
		"chat":"强制玩家发送一个聊天消息,或强制使用命令(需要在内容前加 \"/\").\n<p>\n原文:Says a message (or runs a command).",
		"updateInventory":"刷新玩家的背包.确保玩家的背包和服务器内存中玩家的背包一致. <p>\n译注:在以前的版本(好吧我也不知道是什么版本)中假如不调用该方法当更改背包时会出现莫名其妙的事情,比如\n背包看起来是空的,点一下空的格突然出现了东西之类的.... <p>\n原文:Forces an update of the player's entire inventory.",
		"getFlySpeed":"得到该玩家飞行速度. <p>\n译注:不代表行走速度!\n原文:Gets the current allowed speed that a client can fly.",
		"resetPlayerWeather":"恢复玩家所看到的天气为世界的天气. <p>\n原文:Restores the normal condition where the player's weather is controlled\nby server conditions.",
		"setFoodLevel":"设置玩家的饥饿度(不是饱食度). <p>\n原文:Sets the players current food level",
		"resetPlayerTime":"将玩家时间变为当前世界时间并与世界时间保持同步. <p>\n原文 Restores the normal condition where the player's time is synchronized\nwith the server time.\n<p>\nEquivalent to calling setPlayerTime(0, true).",
		"setExhaustion":"设置玩家的疲劳度. <p>\n关于疲劳度,请参见{@link #getExhaustion() }. <p>\n原文:Sets the players current exhaustion level",
		"setTexturePack":"设置服务器材质包.(因为已过时所以不详解了). <p>\n介绍同{@link #setResourcePack(java.lang.String) }\nRequest that the player's client download and switch texture packs.\n<p>\nThe player's client will download the new texture pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\ntexture pack in the past, it will perform a file size check against\nthe response content to determine if the texture pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server textures on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>There is no concept of resetting texture packs back to default\n    within Minecraft, so players will have to relog to do so or you\n    have to send an empty pack.\n<li>The request is send with \"null\" as the hash. This might result\n    in newer versions not loading the pack correctly.\n<ul>",
		"setSaturation":"设置玩家的饱食度(不是饥饿度). <p>\n关于饱食度,请参见{@link #getSaturation() }. <p>\n原文:Sets the players current saturation level",
		"getLocale":"Gets the player's current locale.\n\nThe value of the locale String is not defined properly.\n<br>\nThe vanilla Minecraft client will use lowercase language / country pairs\nseparated by an underscore, but custom resource packs may use any format\nthey wish.",
		"setHealthScaled":"设置客户端是否要显示一个\"压缩\"了的血量. <p>\n显示的血量遵循一个规则: <code>显示的血量 =\ngetHealth() / getMaxHealth() * getHealthScale()</code>. <p>\n译注:当玩家的最大血量过多时({@link #setMaxHealth(double) }),每一排血量将会被\n挤在一起,以免挡住玩家的视线,这就是\"压缩\".这个方法就是设置血量是否要被\"压缩\".(完全没用的说..). <p>\n原文:Sets if the client is displayed a 'scaled' health, that is, health on a\nscale from 0-{@link #getHealthScale()}.\n<p>\nDisplayed health follows a simple formula <code>displayedHealth =\ngetHealth() / getMaxHealth() * getHealthScale()</code>."
	},
	"Zombie":{
		"isBaby":"获取这个僵尸是否为小僵尸.\n<p>\n原文:\nGets whether the zombie is a baby",
		"setBaby":"设置这个僵尸是否为小僵尸.\n<p>\n原文:\nSets whether the zombie is a baby",
		"getVillagerProfession":"",
		"ClassDescription":"代表僵尸.",
		"isVillager":"获取这个僵尸是否为村民僵尸.\n<p>\n原文:\nGets whether the zombie is a villager",
		"setVillager":"",
		"setVillagerProfession":""
	},
	"VehicleBlockCollisionEvent":{
		"getBlock":"获取载具撞到的方块.\r\n<p>\r\n原文:Gets the block the vehicle collided with",
		"ClassDescription":"载具撞击方块的事件"
	},
	"BlockExpEvent":{
		"getExpToDrop":"在事件被执行之后获取方块掉落的经验.\r\n<p>\r\n原文：Get the experience dropped by the block after the event has processed",
		"ClassDescription":"方块产生经验的时候(比如煤矿被被打破会掉落经验)时触发.",
		"setExpToDrop":"设置这个方块在事件被执行之后会掉落多少经验.\r\n<p>\r\n原文：Set the amount of experience dropped by the block after the event has\r\nprocessed"
	},
	"SpawnEgg":{
		"getSpawnedType":"获取这个刷怪蛋将刷出的实体的种类.\n<p>\n原文:Get the type of entity this egg will spawn.",
		"setSpawnedType":"设置这个刷怪蛋将刷出的实体的种类.\n<p>\n原文:Set the type of entity this egg will spawn.",
		"ClassDescription":"代表刷怪蛋."
	},
	"Chunk":{
		"getChunkSnapshot":"Capture thread-safe read-only snapshot of chunk data",
		"getX":"获取该区块的X轴坐标.\r\n<p>\r\n原文:Gets the X-coordinate of this chunk",
		"getWorld":"获取该区块属于哪个世界.\r\n<p>\r\n原文:Gets the world containing this chunk",
		"getBlock":"从区块中获取某个方块({@link Block}).\r\n<p>\r\n原文:Gets a block from this chunk",
		"getZ":"获取该区块的Z轴坐标.\r\n<p>\r\nGets the Z-coordinate of this chunk",
		"load":"加载区块.",
		"unload":"卸载并可选是否保存区块.\r\n<p>\r\n原文:Unloads and optionally saves the Chunk",
		"getEntities":"获取该区块内所有实体({@link Entity})列表数组. <p>\r\nGet a list of all entities in the chunk.",
		"ClassDescription":"代表一个16*256*16的空间",
		"isSlimeChunk":"Checks if this chunk can spawn slimes without being a swamp biome.",
		"getTileEntities":"获取该区块内所有的TileEntity的列表.\r\n<p>\r\n原文:Get a list of all tile entities in the chunk.",
		"isLoaded":"返回该区块是否被加载.\r\n<p>\r\n原文:Checks if the chunk is loaded."
	},
	"EntityTeleportEvent":{
		"setFrom":"Sets the location that this entity moved from",
		"setTo":"Sets the location that this entity moved to",
		"getTo":"Gets the location that this entity moved to",
		"ClassDescription":"Thrown when a non-player entity (such as an Enderman) tries to teleport\r\nfrom one location to another.",
		"getFrom":"Gets the location that this entity moved from"
	},
	"Dropper":{
		"drop":"一个投掷器的正常行为是尝试从投掷器类型的背包随机进行投掷物品.\n<p>\n投掷器正常的行为如下:\n<p>\n如果这个投掷器方块面对的是一个InventoryHolder或者ContainerBlock类型对象,\nItemStack将会随机抽取投掷器里的物品放在第一个空的物品栏(从0开始计数),如果背包已满,什么也不会发生.\n<p>\n如果这个投掷器方块面对的不是一个InventoryHolder或者ContainerBlock类型对象,\nItemStack将随机抽取投掷器里的物品一掉落在地上的形式 {@link org.bukkit.entity.Item Item} 投掷.\n<p>\n原文:\nTries to drop a randomly selected item from the Dropper's inventory,\nfollowing the normal behavior of a Dropper.\n<p>\nNormal behavior of a Dropper is as follows:\n<p>\nIf the block that the Dropper is facing is an InventoryHolder or\nContainerBlock the randomly selected ItemStack is placed within that \nInventory in the first slot that's available, starting with 0 and\ncounting up.  If the inventory is full, nothing happens.\n<p>\nIf the block that the Dropper is facing is not an InventoryHolder or\nContainerBlock, the randomly selected ItemStack is dropped on\nthe ground in the form of an {@link org.bukkit.entity.Item Item}.",
		"ClassDescription":"代表一个投掷器."
	},
	"CommandMinecart":{
		"setName":"设置这个命令方块矿车的名字。这个名字用于命令方块执行命令。设置名字为null与设置为“@”是一样的。\r\n<p>\r\n原文：Sets the name of this CommandMinecart.  The name is used with commands\r\nthat this CommandMinecart executes.  Setting the name to null is the\r\nsame as setting it to \"@\".",
		"getCommand":"获取这个命令方块矿车激活时运行的命令。这将永远不会返回null，而会返回空的字符串。\r\n<p>\r\n原文：Gets the command that this CommandMinecart will run when activated.\r\nThis will never return null.  If the CommandMinecart does not have a\r\ncommand, an empty String will be returned instead.",
		"ClassDescription":"代表命令方块矿车.",
		"setCommand":"设置这个命令方块激活时运行的命令。设置命令为null与设置命令为空字符串是一样的。\r\n<p>\r\n原文：Sets the command that this CommandMinecart will run when activated.\r\nSetting the command to null is the same as setting it to an empty\r\nString."
	},
	"InventoryAction":{
		"ClassDescription":"用于判断点击物品栏的动作结果."
	},
	"EnchantmentWrapper":{
		"getEnchantment":"得到这个包装类所对应的的附魔.\n<p>\n原文：Gets the enchantment bound to this wrapper",
		"ClassDescription":"方便选择{@link Enchantment}s的一个简单的封装类。\n<p>\n大多数方法于{@link Enchantment}。"
	},
	"ZombieHorse":{
		"ClassDescription":"Represents a ZombieHorse - variant of {@link AbstractHorse}."
	},
	"PlayerJoinEvent":{
		"getJoinMessage":"获取玩家加入游戏后发送给全体玩家的信息.\r\n<p>\r\n原文:Gets the join message to send to all online players",
		"setJoinMessage":"设置玩家加入游戏后发送给全体玩家的信息.\r\n<p>\r\n原文:Sets the join message to send to all online players",
		"ClassDescription":"玩家进入服务器事件."
	},
	"ServerOperator":{
		"setOp":"设置此对象的op状态.\r\n<p>\r\n原文:Sets the operator status of this object",
		"isOp":"检查该对象是否为OP.\r\n<p>\r\n原文:Checks if this object is a server operator",
		"ClassDescription":"代表一个对象,可能为一个OP,例如一个{@link Player}.\r\n<p>\r\n原文:Represents an object that may become a server operator, such as a {@link\r\nPlayer}"
	},
	"InventoryCloseEvent":{
		"getPlayer":"获取涉及此事件的玩家\r\n<p>\r\n原文:Returns the player involved in this event",
		"ClassDescription":"当玩家关闭背包时触发本事件"
	},
	"PermissibleBase":{
		"ClassDescription":"Base Permissible for use in any Permissible object via proxy or extension"
	},
	"PoweredMinecart":{
		"ClassDescription":"代表动力矿车.当玩家往动力矿车里放{@link org.bukkit.Material#COAL 燃料}后它就会自己移动."
	},
	"DirectionalContainer":{
		"ClassDescription":"代表熔炉或发射器"
	},
	"Permissible":{
		"getEffectivePermissions":"Gets a set containing all of the permissions currently in effect by\r\nthis object",
		"hasPermission":"Gets the value of the specified permission, if set.\r\n<p>\r\nIf a permission override is not set on this object, the default value\r\nof the permission will be returned",
		"ClassDescription":"Represents an object that may be assigned permissions",
		"recalculatePermissions":"Recalculates the permissions for this object, if the attachments have\r\nchanged values.\r\n<p>\r\nThis should very rarely need to be called from a plugin.",
		"addAttachment":"Temporarily adds a new empty {@link PermissionAttachment} to this\r\nobject",
		"removeAttachment":"Removes the given {@link PermissionAttachment} from this object",
		"isPermissionSet":"Checks if this object contains an override for the specified {@link\r\nPermission}"
	},
	"TravelAgent":{
		"getCanCreatePortal":"返回TravelAgent是否尝试生成目的传送门。\r\n<p>\r\n原文：\r\nReturns whether the TravelAgent will attempt to create a destination\r\nportal or not.",
		"findOrCreate":"尝试寻找指定方位附近的传送门，如果找不到则会尝试生成一个。\r\n<p>\r\n原文：\r\nAttempt to find a portal near the given location, if a portal is not\r\nfound it will attempt to create one.",
		"setCreationRadius":"设置以指定方位为圆心生成传送门的最大半径。\r\n<p>\r\n原文：\r\nSets the maximum radius from the given location to create a portal.",
		"getSearchRadius":"获取寻找有效传送门的搜索半径数值。\r\n<p>\r\n原文：\r\nGets the search radius value for finding an available portal.",
		"getCreationRadius":"获取以指定方位为圆心生成传送门的最大半径。\r\n<p>\r\n原文：\r\nGets the maximum radius from the given location to create a portal.",
		"ClassDescription":"TravelAgent用于实体试图使用下界或末地传送门时处理相关的生成和搜索。\r\n<p>\r\n被应用于{@link org.bukkit.event.entity.EntityPortalEvent}和{@link org.bukkit.event.player.PlayerPortalEvent}中以帮助开发者复制和修改原版行为。\r\n原文：\r\nThe Travel Agent handles the creation and the research of Nether and End\r\nportals when Entities try to use one.\r\n<p>\r\nIt is used in {@link org.bukkit.event.entity.EntityPortalEvent} and in\r\n{@link org.bukkit.event.player.PlayerPortalEvent} to help developers\r\nreproduce and/or modify Vanilla behaviour.",
		"setSearchRadius":"设置搜索有效传送门的方块半径。\r\n<p>\r\n原文：\r\nSet the Block radius to search in for available portals.",
		"createPortal":"尝试在指定方位附近生成一个传送门。\r\n<p>\r\n如果传送到下界将会尝试生成一个下界传送门。\r\n<p>\r\n如果传送到末地将会（重新）生成黑曜石平台并清除上方的方块。\r\n<p>\r\n原文：\r\nAttempt to create a portal near the given location.\r\n<p>\r\nIn the case of a Nether portal teleportation, this will attempt to\r\ncreate a Nether portal.\r\n<p>\r\nIn the case of an Ender portal teleportation, this will (re-)create the\r\nobsidian platform and clean blocks above it.",
		"setCanCreatePortal":"设置TravelAgent是否尝试生成目的传送门。\r\n<p>\r\n原文：\r\nSets whether the TravelAgent should attempt to create a destination\r\nportal or not.",
		"findPortal":"尝试寻找指定方位附近的传送门。\r\n<p>\r\n原文：\r\nAttempt to find a portal near the given location."
	},
	"CommandSender":{
		"getServer":"返回服务器运行此命令的对象.\r\n<p>\r\n原文:\r\nReturns the server instance that this command is running on",
		"getName":"获取命令发送者的名字.\r\n<p>\r\n原文:\r\nGets the name of this command sender",
		"sendMessage":"给命令发送者发送多条消息.\r\n<p>\r\n原文:\r\nSends this sender multiple messages"
	},
	"LingeringPotionSplashEvent":{
		"ClassDescription":"Called when a splash potion hits an area",
		"getAreaEffectCloud":"Gets the AreaEffectCloud spawned"
	},
	"LongGrass":{
		"getSpecies":"获取草丛的种类.\r\n<p>\r\n原文:Gets the current species of this grass",
		"ClassDescription":"代表两种不同的草丛.",
		"setSpecies":"设置草丛的种类.\r\n<p>\r\n原文:Sets the species of this grass"
	},
	"Enchantment":{
		"getName":"得到这个附魔的名称. \n<p>\n原文：\nGets the unique name of this enchantment",
		"canEnchantItem":"检查该附魔支不支持某物品. \n<p>\n这并不检查任何物品上与它冲突的附魔。 \n<p>\n原文：Checks if this Enchantment may be applied to the given {@link\nItemStack}.\n<p>\nThis does not check if it conflicts with any enchantments already\napplied to the item.",
		"values":"得到所有已经注册了的附魔( {@link Enchantment}s).\n<p>\n原文：\nGets an array of all the registered {@link Enchantment}s",
		"getId":"得到这个附魔独一无二的ID. \n<p>\n原文：\nGets the unique ID of this enchantment",
		"conflictsWith":"检查这个附魔是否与另外的附魔冲突. \n<p>\n原文：\nCheck if this enchantment conflicts with another enchantment.",
		"stopAcceptingRegistrations":"停止接受任何附魔注册. \n<p>\n原文：\nStops accepting any enchantment registrations",
		"ClassDescription":"附魔类.",
		"getMaxLevel":"得到这个附魔所支持的最大等级.\n<p>\n原文：\nGets the maximum level that this Enchantment may become.",
		"getStartLevel":"得到这个附魔的最小等级. \n<p>\n原文：\nGets the level that this Enchantment should start at",
		"isTreasure":"Checks if this enchantment is a treasure enchantment.\n<br>\nTreasure enchantments can only be received via looting, trading, or\nfishing.",
		"getById":"获取附魔的指定id.\n<p>\n原文：\nGets the Enchantment at the specified ID",
		"registerEnchantment":"注册一个附魔的ID和对象.\n<p>\n一般不在插件中使用.\n<p>\n原文：\nRegisters an enchantment with the given ID and object.\n<p>\nGenerally not to be used from within a plugin.",
		"getByName":"获取附魔的指定名称.\n<p>\n原文：\nGets the Enchantment at the specified name",
		"getItemTarget":"得到这个附魔所支持的 物品 {@link ItemStack}. \n<p>\n原文：\nGets the type of {@link ItemStack} that may fit this Enchantment.",
		"isAcceptingRegistrations":"检查是否接受附魔注册 .\n<p>\n原文：\nChecks if this is accepting Enchantment registrations.",
		"isCursed":"Checks if this enchantment is a cursed enchantment\n<br>\nCursed enchantments are found the same way treasure enchantments are"
	},
	"Giant":{
		"ClassDescription":"代表巨人."
	},
	"ConfigurationSection":{
		"getLongList":"在指定路径获取一个 List&lt;Long&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为Long, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Long by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Long if possible, but may miss any values out if they are not compatible.",
		"getBooleanList":"在指定路径获取一个 List&lt;Boolean&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Boolean, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Boolean by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Boolean if possible, but may miss any values out if they are not compatible.",
		"getVector":"在指定路径上获取一个{@link Vector}, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 {@link Vector}, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested {@link Vector} by path, returning a default value if not found. \n<p>\nIf the Vector does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getDouble":"在指定路径上获取一个double, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 double, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested double by path, returning a default value if not found. \n<p>\nIf the double does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"ClassDescription":"@link Configuration}的基类. \n所有用于扩展配置文件读取的类都应当实现以下方法. \n<p>\nRepresents a section of a {@link Configuration}",
		"isVector":"检查指定路径是否是 {@link Vector} . \n<p>\n如果路径存在, 但不是 {@link Vector} , 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a Vector. \n<p>\nIf the path exists but is not a Vector, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a Vector and return appropriately.",
		"getShortList":"在指定路径获取一个 List&lt;Short&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Short, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Short by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Short if possible, but may miss any values out if they are not compatible.",
		"getMapList":"在指定路径获取一个 List&lt;Maps&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Map, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Maps by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Map if possible, but may miss any values out if they are not compatible.",
		"isList":"检查指定路径是否是 List. \n<p>\n如果路径存在, 但不是 List, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a List. \n<p>\nIf the path exists but is not a List, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a List and return appropriately.",
		"isBoolean":"检查指定路径是否是 boolean. \n<p>\n如果路径存在, 但不是 boolean, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a boolean. \n<p>\nIf the path exists but is not a boolean, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a boolean and return appropriately.",
		"getConfigurationSection":"获取一个 {@link ConfigurationSection} ,它是一个以指定路径作为基点的新的配置项,修改会同步. \n<p>\n如果这个 {@link ConfigurationSection} 不存在, 但已指定一个缺省值, 这将返回缺省值.\n<p>\n如果这个 {@link ConfigurationSection} 不存在, 并且没有指定缺省值, 则返回 null. \n<p>\n更人性化的解释: 现在有一个配置文件如下\n<pre>\nroot: \n  branch1:\n    branch1_1: something\n    branch1_2: something\n  branch2: \n    branch2_1: something\n    branch3_2: something\n</pre>\n如果调用 {@link ConfigurationSection#getConfigurationSection(java.lang.String) }\n参数为(\"branch1\") ,则会返回\n<pre>\n  branch1:\n    branch1_1: something\n    branch1_2: something\n</pre>\n并且修改会同步\n<p>原文: \nGets the requested ConfigurationSection by path. \n<p>\nIf the ConfigurationSection does not exist but a default value has been specified, this will return the default value. \nIf the ConfigurationSection does not exist and no default value was specified, this will return null.",
		"getList":"在指定路径上获取一个 List, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 List, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested List by path, returning a default value if not found. \n<p>\nIf the List does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"isColor":"检查指定路径是否是 {@link Color}. \n<p>\n如果路径存在, 但不是 {@link Color}, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a Color. \n<p>\nIf the path exists but is not a Color, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a Color and return appropriately.",
		"get":"在指定路径上获取一个 Object , 如果无法获取, 则直接返回默认值. \n<p>\n如果 Object 无法在 {@link Configuration} 中被获取, 则不会尝试去缺省列表中去寻找, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested Object by path, returning a default value if not found. \n<p>\nIf the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"isInt":"检查指定路径是否是 int. \n<p>\n如果路径存在, 但不是 int, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a int. \n<p>\nIf the path exists but is not a int, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a int and return appropriately.",
		"isString":"检查指定路径是否是 String. \n<p>\n如果路径存在, 但不是 String, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a String. \n<p>\nIf the path exists but is not a String, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a String and return appropriately.",
		"getBoolean":"在指定路径上获取一个 boolean, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 boolean, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested boolean by path, returning a default value if not found. \n<p>\nIf the boolean does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getCharacterList":"在指定路径获取一个 List&lt;Character&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Character, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Character by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Character if possible, but may miss any values out if they are not compatible.",
		"getItemStack":"在指定路径上获取一个 {@link ItemStack}, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 {@link ItemStack}, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested {@link ItemStack} by path, returning a default value if not found. \n<p>\nIf the ItemStack does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getRoot":"Gets the root {@link Configuration} that contains this {@link ConfigurationSection}\n<p>\nFor any {@link Configuration} themselves, this will return its own object. \n<p>\nIf the section is no longer contained within its root for any reason, such as being replaced with a different value, this may return null.",
		"createSection":"Creates a {@link ConfigurationSection} at the specified path, with specified values. \n<p>\nAny value that was previously set at this path will be overwritten. \nIf the previous value was itself a {@link ConfigurationSection}, it will be orphaned.",
		"isItemStack":"检查指定路径是否是 {@link ItemStack}. \n<p>\n如果路径存在, 但不是 {@link ItemStack}, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a ItemStack. \n<p>\nIf the path exists but is not a ItemStack, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a ItemStack and return appropriately.",
		"getDefaultSection":"Gets the equivalent {@link ConfigurationSection} from the default {@link Configuration} defined in {@link #getRoot()}. \n<p>\nIf the root contains no defaults, or the defaults doesn't contain a value for this path, or the value at this path is not a {@link ConfigurationSection} then this will return null.",
		"getCurrentPath":"从根 {@link Configuration} 中获取这个 {@link ConfigurationSection} 的路径. \n<p>\n如果这个 {@link ConfigurationSection} 已经是根目录, 将返回一个空字符串.\n<p>\n如果这个 {@link ConfigurationSection} 不属于任何根目录, 将返回 null.\n<p>\n如果要获取这个 {@link ConfigurationSection} 名字,也就是路径中的最后一节, 你应该使用 {@link #getName()} 来获取.\n<p>原文: \nGets the path of this {@link ConfigurationSection} from its root {@link Configuration}.\n<p>\nFor any {@link Configuration} themselves, this will return an empty string. \n<p>\nIf the section is no longer contained within its root for any reason, such as being replaced with a different value, this may return null. \n<p>\nTo retrieve the single name of this section, that is, the final part of the path returned by this method, you may use {@link #getName()}.",
		"getParent":"Gets the parent {@link ConfigurationSection} that directly contains this {@link ConfigurationSection}. \n<p>\nFor any {@link Configuration} themselves, this will return null. \n<p>\nIf the section is no longer contained within its parent for any reason, such as being replaced with a different value, this may return null.",
		"set":"Sets the specified path to the given value. \n<p>\nIf value is null, the entry will be removed. \nAny existing entry will be replaced, regardless of what the new value is. \n<p>\nSome implementations may have limitations on what you may store. \nSee their individual javadocs for details. \nNo implementations should allow you to store {@link Configuration}s or {@link ConfigurationSection}s, please use {@link #createSection(java.lang.String)} for that.",
		"isLong":"检查指定路径是否是 long. \n<p>\n如果路径存在, 但不是 long, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a long. \n<p>\nIf the path exists but is not a long, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a long and return appropriately.",
		"getValues":"获取这个配置文件的键值集合. \n<p>\n如果为 true, 则返回包括所有的能访问到的键和值的集合. \n类似于获取硬盘中第一层目录还是遍历全部子目录. \n<p>\n如果为 false, 则返回表层的键和值的集合. \n<p>原文: \nGets a Map containing all keys and their values for this section. \n<p>\nIf deep is set to true, then this will contain all the keys and values within any child {@link ConfigurationSection}s (and their children, etc). \nThese keys will be in a valid path notation for you to use. \n<p>\nIf deep is set to false, then this will contain only the keys and values of any direct children, and not their own children.",
		"isOfflinePlayer":"检查指定路径是否是 {@link OfflinePlayer}. \n<p>\n如果路径存在, 但不是 {@link OfflinePlayer}, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a OfflinePlayer. \n<p>\nIf the path exists but is not a OfflinePlayer, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a OfflinePlayer and return appropriately.",
		"getColor":"在指定路径上获取一个 {@link Color}, 如果无法获取, 则直接返回指定默认值. \n<p>\n如果无法获取到一个 {@link Color}, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested {@link Color} by path, returning a default value if not found. \n<p>\nIf the Color does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getKeys":"获取此配置文件的键集合. \n<p>\n如果为 true, 则返回包括所有的能访问到的键的集合. \n类似于获取硬盘中第一层目录还是遍历全部子目录. \n<p>\n例如:\n<p>\ntop1. Second1\n<p>\ntop1. Second2\n<p>\ntop2. Second1\n<p>\ntop2. Second2\n<p>原文: \nGets a set containing all keys in this section. \n<p>\nIf deep is set to true, then this will contain all the keys within any child {@link ConfigurationSection}s (and their children, etc). \nThese will be in a valid path notation for you to use. \n<p>\nIf deep is set to false, then this will contain only the keys of any direct children, and not their own children.",
		"getString":"在指定路径上获取一个 String , 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 String, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested String by path, returning a default value if not found. \n<p>\nIf the String does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getDoubleList":"在指定路径获取一个 List&lt;Double&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Double, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Double by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Double if possible, but may miss any values out if they are not compatible.",
		"getLong":"在指定路径上获取一个 long, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 long, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested long by path, returning a default value if not found. \n<p>\nIf the long does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getOfflinePlayer":"在指定路径上获取一个 {@link OfflinePlayer}, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 {@link OfflinePlayer}, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested {@link OfflinePlayer} by path, returning a default value if not found. \n<p>\nIf the OfflinePlayer does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"getInt":"在指定路径上获取一个 int, 如果无法获取, 则直接返回默认值. \n<p>\n如果无法获取到一个 int, 将不会尝试去缺省列表中去获取, 而是直接返回指定的默认值. \n<p>原文: \nGets the requested int by path, returning a default value if not found. \n<p>\nIf the int does not exist then the specified default value will returned regardless of if a default has been identified in the root {@link Configuration}.",
		"addDefault":"给指定路径添加一个缺省值. \n<p>\n如果缺省值 {@link Configuration} 没有被提供, 则自动创建一个新的. \n<p>\n如果值为 null, 表示从缺省值 {@link Configuration} 中删除这个路径上的默认值\n<p>\n如果 {@link #getDefaultSection()} 返回的值为 null, 则建立一个新的\n<p>原文: \nSets the default value in the root at the given path as provided. \n<p>\nIf no source {@link Configuration} was provided as a default collection, then a new {@link MemoryConfiguration} will be created to hold the new default value. \n<p>\nIf value is null, the value will be removed from the default Configuration source. \n<p>\nIf the value as returned by {@link #getDefaultSection()} is null, then this will create a new section at the path, replacing anything that may have existed there previously.",
		"contains":"Checks if this {@link ConfigurationSection} contains the given path.\n<p>\nIf the value for the requested path does not exist, the boolean parameter\nof true has been specified, a default value for the path exists, this\nwill return true.\n<p>\nIf a boolean parameter of false has been specified, true will only be\nreturned if there is a set value for the specified path.",
		"getFloatList":"在指定路径获取一个 List&lt;Float&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Float, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Float by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Float if possible, but may miss any values out if they are not compatible.",
		"getIntegerList":"在指定路径获取一个 List&lt;Integer&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Integer, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Integer by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Integer if possible, but may miss any values out if they are not compatible.",
		"getByteList":"在指定路径获取一个 List&lt;Byte&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 Byte, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of Byte by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a Byte if possible, but may miss any values out if they are not compatible.",
		"isConfigurationSection":"检查指定路径是否是 {@link ConfigurationSection}. \n<p>\n如果路径存在, 但不是 {@link ConfigurationSection}, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a ConfigurationSection. \n<p>\nIf the path exists but is not a ConfigurationSection, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a ConfigurationSection and return appropriately.",
		"getStringList":"在指定路径获取一个 List&lt;String&gt;. \n<p>\n如果列表不存在，但已指定一个缺省值，这将返回默认值. \n<p>\n如果列表不存在，并且没有指定缺省值，这将返回一个空的列表. \n<p>\n此方法会尽可能的将 List 中所有的项转化为 String, 但是如果值本身不兼容, 将会发生不可预计的状况. \n<p>原文: \nGets the requested List of String by path. \n<p>\nIf the List does not exist but a default value has been specified, this will return the default value. \nIf the List does not exist and no default value was specified, this will return an empty List. \n<p>\nThis method will attempt to cast any values into a String if possible, but may miss any values out if they are not compatible.",
		"isDouble":"检查指定路径是否是 double. \n<p>\n如果路径存在, 但不是 double, 则返回 false. \n<p>\n如果路径不存在, 则返回 false. \n<p>\n如果路径不存在, 但在缺省列表中存在该路径, 则在缺省列表中重复匹配该规则, 直到返回一个适当的值. \n<p>原文: \nChecks if the specified path is a double. \n<p>\nIf the path exists but is not a double, this will return false. \nIf the path does not exist, this will return false. \nIf the path does not exist but a default value has been specified, this will check if that default value is a double and return appropriately."
	},
	"MessagePrompt":{
		"getNextPrompt":"Override this method to return the next prompt in the prompt graph.",
		"acceptInput":"Accepts and ignores any user input, returning the next prompt in the\r\nprompt graph instead.",
		"ClassDescription":"MessagePrompt is the base class for any prompt that only displays a message\r\nto the user and requires no input.",
		"blocksForInput":"Message prompts never wait for user input before continuing."
	},
	"EntityBreedEvent":{
		"getMother":"Gets the parent creating this entity.",
		"getFather":"Gets the other parent of the newly born entity.",
		"getExperience":"Get the amount of experience granted by breeding.",
		"setExperience":"Set the amount of experience granted by breeding.",
		"ClassDescription":"Called when one Entity breeds with another Entity.",
		"getBreeder":"Gets the Entity responsible for breeding. Breeder is null for spontaneous\nconception.",
		"getBredWith":"The ItemStack that was used to initiate breeding, if present."
	},
	"ChunkLoadEvent":{
		"isNewChunk":"获取这个区块是否为最近创建的.\r\n<p>\r\n请注意,如果这个区块是新的,它将不会在这个时候填充.\r\n<p>\r\n原文:\r\nGets if this chunk was newly created or not.\r\n<p>\r\nNote that if this chunk is new, it will not be populated at this time.",
		"ClassDescription":"当一个区块被加载时调用."
	},
	"Creeper":{
		"ClassDescription":"代表爬行者.",
		"isPowered":"检查这个爬行者是否为高压的(触电)\r\n<p>\r\n原文:\r\nChecks if this Creeper is powered (Electrocuted)",
		"setPowered":"设置这个爬行者为高压状态.\r\n<p>\r\n原文:\r\nSets the Powered status of this Creeper"
	},
	"ComplexLivingEntity":{
		"ClassDescription":"Represents a complex living entity - one that is made up of various smaller\r\nparts",
		"getParts":"Gets a list of parts that belong to this complex entity"
	},
	"EnchantmentTarget":{
		"includes":"检查是否包含该物品.\r\n<p>\r\n原文：Check whether this target includes the specified item.",
		"ClassDescription":"代表了{@link Enchantment}的适用目标"
	},
	"Shulker":{},
	"ChannelNameTooLongException":{
		"ClassDescription":"如果插件通道(Plugin Channel)过长则抛出此异常。"
	},
	"BukkitCommand":{},
	"Squid":{
		"ClassDescription":"代表鱿鱼."
	},
	"EnchantItemEvent":{
		"whichButton":"获取玩家点击的附魔的按钮。\r\n<p>\r\n原文:\r\nWhich button was pressed to initiate the enchanting.",
		"getEnchantsToAdd":"获取被加到物品中的附魔的Map (等级, 附魔种类)（若要修改请直接修改Map） . 注意: 不能被添加\r\n到物品中的附魔会被忽略哦。\r\n<p>\r\n原文:\r\nGet map of enchantment (levels, keyed by type) to be added to item - \r\n(modify map returned to change values). Note: Any enchantments not - \r\nallowed for the item will be ignored",
		"getItem":"获取被附魔的物品(可自定义)。\r\n<p>\r\n原文:\r\nGets the item to be enchanted (can be modified)",
		"getEnchanter":"获取附魔这个物品的玩家。\r\n<p>\r\n原文:\r\nGets the player enchanting the item",
		"getExpLevelCost":"获取花费的附魔等级。\r\n<p>\r\n原文:\r\nGet cost in exp levels of the enchantment",
		"ClassDescription":"成功附魔物品的事件 (在附魔台里面附魔的)",
		"getEnchantBlock":"获取附魔这个物品的方块。\r\n<p>\r\n原文:\r\nGets the block being used to enchant the item",
		"setExpLevelCost":"设置花费的附魔等级。\r\n<p>\r\n原文:\r\nSet cost in exp levels of the enchantment"
	},
	"SerializableAs":{
		"ClassDescription":"Represents an \"alias\" that a {@link ConfigurationSerializable} may be\r\nstored as.\r\nIf this is not present on a {@link ConfigurationSerializable} class, it\r\nwill use the fully qualified name of the class.\r\n<p>\r\nThis value will be stored in the configuration so that the configuration\r\ndeserialization can determine what type it is.\r\n<p>\r\nUsing this annotation on any other class than a {@link\r\nConfigurationSerializable} will have no effect."
	},
	"PigZapEvent":{
		"getPigZombie":"Gets the zombie pig that will replace the pig, provided the event is\r\nnot cancelled first.",
		"getLightning":"Gets the bolt which is striking the pig.",
		"ClassDescription":"Stores data for pigs being zapped"
	},
	"PlayerLoginEvent":{
		"allow":"允许玩家登录\r\n<p>\r\n原文:Allows the player to log in",
		"disallow":"以给定的理由不允许玩家登录\r\n<p>\r\n原文:Disallows the player from logging in, with the given reason",
		"getHostname":"获取玩家用于连接服务器的主机名，如果未知则为空\r\n<p>\r\n原文:Gets the hostname that the player used to connect to the server, or\r\nblank if unknown",
		"setResult":"设置登录的状态.\r\n<p>\r\n原文:Sets the new result of the login, as an enum",
		"setKickMessage":"如果<code>getResult() != Result.ALLOWED</code>,设置要显示的踢出消息\r\n<p>\r\n原文:Sets the kick message to display if getResult() != Result.ALLOWED",
		"getResult":"获取当前的登录状态.\r\n<p>\r\n原文:Gets the current result of the login, as an enum",
		"getAddress":"获取玩家的{@link InetAddress IP地址}.\r\n这个方法是在此事件期间使用 <code>player.getAddress()</code> 为null的解决办法\r\n<p>\r\n原文:Gets the {@link InetAddress} for the Player associated with this event.\r\nThis method is provided as a workaround for player.getAddress()\r\nreturning null during PlayerLoginEvent.",
		"ClassDescription":"玩家尝试登录的事件",
		"getKickMessage":"如果<code>getResult() != Result.ALLOWED</code>,获取将使用的踢出消息\r\n<p>\r\n原文:Gets the current kick message that will be used if getResult() !=\r\nResult.ALLOWED"
	},
	"WorldBorder":{
		"setDamageAmount":"设置越界后所受到的伤害值\r\n<P> \r\n原文：Sets the amount of damage a player takes when outside the border plus the border buffer.",
		"getCenter":"得到当前边界的中心.\r\n<p>\r\n原文:Gets the current border center.",
		"getDamageAmount":"获取越过结界后所受到的伤害值\r\n<P>\r\n原文：Gets the current border damage amount.",
		"getDamageBuffer":"得到当前边界的破坏缓冲.\r\n<p>\r\n原文：Gets the current border damage buffer.",
		"setCenter":"设置新的边界中心\r\n<p>\r\n原文:Sets the new border center.",
		"setWarningDistance":"设置玩家离结界几个方块的时候会被警告\r\n<p>\r\n原文：Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.",
		"getSize":"获得指定世界当前的边界长度.\r\n<p>\r\n原文:Gets the current side length of the border.",
		"setSize":"以方块为单位，将边界设置为一个指定长度的正方形.\r\n<p>\r\n原文:Sets the border to a square region with the specified side length in blocks.",
		"getWarningDistance":"获取玩家离方块多远时会被警告\r\n<p>\r\n原文：Gets the current border warning distance.",
		"setWarningTime":"设置玩家接近结界的时候警告玩家的秒数（警告也就是当玩家接近结界的时候，玩家的屏幕会被渲染成红色边框以此来警告玩家不要越界）\r\n<p>\r\n原文：Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.",
		"reset":"将世界的边界恢复为默认值.\r\n<p>\r\n原文:Resets the border to default values.",
		"getWarningTime":"获取临近结界的时候屏幕变红警告玩家的时间\r\n<p>\r\n原文：Gets the current border warning time in seconds.",
		"setDamageBuffer":"设置玩家在越过结界后几个方块后受到伤害（也就是玩家越界后安全的范围），切忌填写负数参数\r\n<P>\r\n原文：Sets the amount of blocks a player may safely be outside the border before taking damage.",
		"isInside":"检查指定的位置是否在这个边界里面.\r\n<p>\r\n原文:Check if the specified location is inside this border."
	},
	"TabExecutor":{
		"ClassDescription":"这个类提供了TabCompleter和CommandExecutor两者的实现."
	},
	"FireworkExplodeEvent":{
		"setCancelled":"设置此事件的取消状态。如果烟花的爆炸被取消，烟花仍然将被移除，但烟花颗粒不会显示.\r\n<p>\r\n原文:Set the cancelled state of this event. If the firework explosion is\r\ncancelled, the firework will still be removed, but no particles will be\r\ndisplayed.",
		"ClassDescription":"当烟花爆炸时触发本事件"
	},
	"InventoryHolder":{
		"getInventory":"获取该对象的用户界面项目.\r\n<p>\r\n原文:Get the object's inventory."
	},
	"ItemMeta":{
		"hasItemFlag":"Check if the specified flag is present on this item.",
		"getEnchants":"Returns a copy the enchantments in this ItemMeta. <br> \r\nReturns an empty map if none.",
		"removeEnchant":"Removes the specified enchantment from this item meta.",
		"hasLocalizedName":"Checks for existence of a localized name.",
		"removeItemFlags":"Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.",
		"ClassDescription":"This type represents the storage mechanism for auxiliary item data.\r\n<p>\r\nAn implementation will handle the creation and application for ItemMeta.\r\nThis class should not be implemented by a plugin in a live environment.",
		"setUnbreakable":"Sets the unbreakable tag. An unbreakable item will not lose durability.",
		"setDisplayName":"Sets the display name.",
		"hasEnchant":"Checks for existence of the specified enchantment.",
		"getLore":"Gets the lore that is set.\r\n<p>\r\nPlugins should check if hasLore() returns <code>true</code> before\r\ncalling this method.",
		"getEnchantLevel":"Checks for the level of the specified enchantment.",
		"hasDisplayName":"Checks for existence of a display name.",
		"addEnchant":"Adds the specified enchantment to this item meta.",
		"getLocalizedName":"Gets the localized display name that is set.\r\n<p>\r\nPlugins should check that hasLocalizedName() returns <code>true</code>\r\nbefore calling this method.",
		"setLore":"Sets the lore for this item. \r\nRemoves lore when given null.",
		"getDisplayName":"Gets the display name that is set.\r\n<p>\r\nPlugins should check that hasDisplayName() returns <code>true</code>\r\nbefore calling this method.",
		"hasLore":"Checks for existence of lore.",
		"addItemFlags":"Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.",
		"getItemFlags":"Get current set itemFlags. The collection returned is unmodifiable.",
		"isUnbreakable":"Return if the unbreakable tag is true. An unbreakable item will not lose\r\ndurability.",
		"hasEnchants":"Checks for the existence of any enchantments.",
		"hasConflictingEnchant":"Checks if the specified enchantment conflicts with any enchantments in\r\nthis ItemMeta.",
		"setLocalizedName":"Sets the localized name."
	},
	"WoodenStep":{
		"ClassDescription":"代表不同种类的木台阶",
		"setInverted":"设置这个台阶是否被反转。\n<p>\n原文:Set step inverted state",
		"isInverted":"这个台阶是否被反转的。\n<p>\n原文:Test if step is inverted"
	},
	"VehicleEnterEvent":{
		"getEntered":"获取进入到载具中的实体.\r\n<p>\r\n原文:Gets the Entity that entered the vehicle.",
		"ClassDescription":"实体进入载具的事件"
	},
	"SpawnerMinecart":{
		"ClassDescription":"代表有{@link org.bukkit.block.CreatureSpawner 刷怪箱}在里面的矿车（即刷怪箱矿车）."
	},
	"PrepareItemEnchantEvent":{
		"getExpLevelCostsOffered":"获取附魔所需要的等级的列表.\r\n<p>\r\n原文:Get a list of offered experience level costs of the enchantment.",
		"getOffers":"Get a list of available {@link EnchantmentOffer} for the player. You can\r\nmodify the values to change the available offers for the player. An offer\r\nmay be null, if there isn't a enchantment offer at a specific slot. There\r\nare 3 slots in the enchantment table available to modify.",
		"getItem":"获取准备附魔的物品(可改动).\r\n<p>\r\n原文:\r\nGets the item to be enchanted (can be modified)",
		"getEnchantmentBonus":"Get enchantment bonus in effect - corresponds to number of bookshelves",
		"getEnchanter":"获取正在为物品附魔的玩家.\r\n<p>\r\n原文:\r\nGets the player enchanting the item",
		"ClassDescription":"物品塞入附魔台的事件 - 可以同时调用。",
		"getEnchantBlock":"获取附魔台方块.\r\n<p>\r\n原文:\r\nGets the block being used to enchant the item"
	},
	"MemoryConfiguration":{
		"ClassDescription":"This is a {@link Configuration} implementation that does not save or load\nfrom any source, and stores all values in memory only.\nThis is useful for temporary Configurations for providing defaults."
	},
	"EntityToggleGlideEvent":{
		"ClassDescription":"Sent when an entity's gliding status is toggled with an Elytra.\nExamples of when this event would be called:\n<ul>\n    <li>Player presses the jump key while in midair and using an Elytra</li>\n    <li>Player lands on ground while they are gliding (with an Elytra)</li>\n</ul>\nThis can be visually estimated by the animation in which a player turns horizontal."
	},
	"PlayerInventory":{
		"getHeldItemSlot":"获取玩家握着的物品所在的物品槽位.\n<p>\n原文:Get the slot number of the currently held item",
		"setArmorContents":"设置装备槽的全部物品. \n<p>原文: \nPut the given ItemStacks into the armor slots",
		"getItemInMainHand":"获得玩家握在主手的物品(的副本).\n<p>\n原文:Gets a copy of the item the player is currently holding in their main hand.",
		"clear":"Clears all matching items from the inventory. Setting either value to\n-1 will skip it's check, while setting both to -1 will clear all items\nin your inventory unconditionally.",
		"setHelmet":"设置头盔物品栏内的物品. 不检查它是不是一个头盔.\n<p>原文: \nPut the given ItemStack into the helmet slot. This does not check if\nthe ItemStack is a helmet",
		"setHeldItemSlot":"设置玩家握着哪一个槽位的物品.\n<p>\n本方法会验证“slot”的取值是否符合该不等式:0≤slot≤8.\n<p>\n原文:Set the slot number of the currently held item.\n<p>\nThis validates whether the slot is between 0 and 8 inclusive.",
		"setLeggings":"设置护腿物品栏内的物品. 不检查它是不是一个护腿.\n<p>原文: \nPut the given ItemStack into the leg slot. This does not check if the\nItemStack is a pair of leggings",
		"setItemInMainHand":"设置玩家握在主手的物品.\n<p>\n原文:Sets the item the player is holding in their main hand.",
		"ClassDescription":"玩家背包. 包括装备栏,背包和其他额外的格子.",
		"getItemInOffHand":"获取玩家握在副手的物品(的副本).\n<p>\n原文:Gets a copy of the item the player is currently holding\nin their off hand.",
		"getChestplate":"返回胸甲槽内的物品. \n<p>原文: \nReturn the ItemStack from the chestplate slot",
		"getLeggings":"返回护腿槽内的物品. \n<p>原文: \nReturn the ItemStack from the leg slot",
		"setItemInHand":"玩家可以双持了,不再详细介绍.Sets the item the player is holding",
		"getHelmet":"返回头盔槽内的物品. \n<p>原文: \nReturn the ItemStack from the helmet slot",
		"setExtraContents":"将给定的物品放在额外物品槽内.\n<p>\n请到 {@link #getExtraContents()} 去了解额外物品槽是什么.\n<p>\n原文:Put the given ItemStacks into the extra slots\n<br>\nSee {@link #getExtraContents()} for an explanation of extra slots.",
		"setItemInOffHand":"设置玩家握在副手的物品.\n<p>\n原文:Sets the item the player is holding in their off hand.",
		"getExtraContents":"获取存储在此背包的所有额外物品.\n<p>\n注意:额外的物品槽是由实现来定义的,但这些额外的物品不会在{@link #getStorageContents()}或{@link #getArmorContents()}之内.\n<p>\n原文:Get all additional ItemStacks stored in this inventory.\n<br>\nNB: What defines an extra slot is up to the implementation, however it will not be contained within {@link #getStorageContents()} or {@link #getArmorContents()}",
		"setBoots":"设置靴子物品栏内的物品. 不检查它是不是一个靴子.\n<p>原文: \nPut the given ItemStack into the boots slot. This does not check if the\nItemStack is a boots",
		"setChestplate":"设置胸甲物品栏内的物品. 不检查它是不是一个胸甲.\n<p>原文: \nPut the given ItemStack into the chestplate slot. This does not check\nif the ItemStack is a chestplate",
		"getBoots":"返回靴子槽内的物品. \n<p>原文: \nReturn the ItemStack from the boots slot",
		"setItem":"把物品放在背包的指定位置.\n<p>\n索引值0~8指向平视显示器(HUD)上的工具栏. 9~35指向主物品栏(中间的27个物品槽),\n从主物品栏的左上角往上数(索引值9指向主物品栏左上角的物品槽),向右移动,\n到行末时再从下一行的最左的物品槽继续往上数.\n<p>\n索引值36~39指向玩家的盔甲槽. 即使你可以使用本方法设置盔甲槽内的物品,\n我们还是建议你使用我们提供的相关的设置盔甲槽内物品的方法来设置.\n<p>\n如果你试图传递错误的index值(取值范围为0&le;index&le;39)给本方法,\n将抛出ArrayIndexOutOfBounds异常.\n<p>\n原文:Stores the ItemStack at the given index of the inventory.\n<p>\nIndexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top\nleft corner of the inventory, moving to the right, and moving to the row below it back on the left side when it\nreaches the end of the row. It follows the same path in the inventory like you would read a book.\n<p>\nIndexes 36 through 39 refer to the armor slots. Though you can set armor with this method using these indexes,\nyou are encouraged to use the provided methods for those slots.\n<p>\nIf you attempt to use this method with an index less than 0 or greater than 39, an ArrayIndexOutOfBounds\nexception will be thrown.",
		"getArmorContents":"获取装备槽内的全部物品. \n<p>原文: \nGet all ItemStacks from the armor slots",
		"getItemInHand":"玩家可以双持了，不再详细介绍.Gets a copy of the item the player is currently holding"
	},
	"RegisteredServiceProvider":{
		"ClassDescription":"A registered service provider."
	},
	"Painting":{
		"setArt":"设置这幅画的画面.\n<p>\n原文：Set the art on this painting",
		"getArt":"获取这幅画上的画面.\n<p>\n原文：Get the art on this painting",
		"ClassDescription":"代表画.\n<p>\n前往<a href=\"http://minecraft-zh.gamepedia.com/%E7%94%BB\">wiki</a>了解更多"
	},
	"Directional":{
		"setFacingDirection":"设置这个方块的朝向.\r\n<p>\r\n原文:Sets the direction that this block is facing in",
		"getFacing":"获取这个方块的朝向.\r\n<p>\r\n原文:Gets the direction this block is facing"
	},
	"InventoryDragEvent":{
		"getCursor":"Gets the result cursor after the drag is done. The returned value is\r\nmutable.",
		"getRawSlots":"Gets the raw slot ids to be changed in this drag.",
		"getOldCursor":"Gets an ItemStack representing the cursor prior to any modifications\r\nas a result of this drag.",
		"getType":"Gets the DragType that describes the behavior of ItemStacks placed\r\nafter this InventoryDragEvent.\r\n<p>\r\nThe ItemStacks and the raw slots that they're being applied to can be\r\nfound using {@link #getNewItems()}.",
		"getNewItems":"Gets all items to be added to the inventory in this drag.",
		"setCursor":"Sets the result cursor after the drag is done.\r\n<p>\r\nChanging this item stack changes the cursor item. Note that changing\r\nthe affected \"dragged\" slots does not change this ItemStack, nor does\r\nchanging this ItemStack affect the \"dragged\" slots.",
		"ClassDescription":"This event is called when the player drags an item in their cursor across\r\nthe inventory. The ItemStack is distributed across the slots the\r\nHumanEntity dragged over. The method of distribution is described by the \r\nDragType returned by {@link #getType()}.\r\n<p>\r\nCanceling this event will result in none of the changes described in\r\n{@link #getNewItems()} being applied to the Inventory.\r\n<p>\r\nBecause InventoryDragEvent occurs within a modification of the Inventory,\r\nnot all Inventory related methods are safe to use.\r\n<p>\r\nThe following should never be invoked by an EventHandler for\r\nInventoryDragEvent using the HumanEntity or InventoryView associated with\r\nthis event.\r\n<ul>\r\n<li>{@link HumanEntity#closeInventory()}\r\n<li>{@link HumanEntity#openInventory(Inventory)}\r\n<li>{@link HumanEntity#openWorkbench(Location, boolean)}\r\n<li>{@link HumanEntity#openEnchanting(Location, boolean)}\r\n<li>{@link InventoryView#close()}\r\n</ul>\r\nTo invoke one of these methods, schedule a task using \r\n{@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\r\non the next tick.  Also be aware that this is not an exhaustive list, and\r\nother methods could potentially create issues as well.\r\n<p>\r\nAssuming the EntityHuman associated with this event is an instance of a\r\nPlayer, manipulating the MaxStackSize or contents of an Inventory will\r\nrequire an Invocation of {@link Player#updateInventory()}.\r\n<p>\r\nAny modifications to slots that are modified by the results of this\r\nInventoryDragEvent will be overwritten. To change these slots, this event\r\nshould be cancelled and the changes applied. Alternatively, scheduling a\r\ntask using {@link BukkitScheduler#runTask(Plugin, Runnable)}, which would\r\nexecute the task on the next tick, would work as well.",
		"getInventorySlots":"Gets the slots to be changed in this drag."
	},
	"ExtendedRails":{
		"getConvertedData":"",
		"ClassDescription":"这是 {@link DetectorRail} 和 {@link PoweredRail} 的父类."
	},
	"EntityAirChangeEvent":{
		"ClassDescription":"当实体的氧气值发生变化时触发本事件",
		"setAmount":"设置实体剩余的氧气值 (单位为刻)\r\n<p>\r\n原文:Sets the amount of air remaining for the entity (measured in ticks.",
		"getAmount":"获取实体剩余的氧气值 (单位为刻)\r\n<p>\r\n原文:Gets the amount of air the entity has left (measured in ticks)."
	},
	"Animals":{
		"ClassDescription":"代表动物."
	},
	"FurnaceInventory":{
		"setFuel":"设置当前熔炉的燃料Item项目.\r\n<p>\r\n原文:Set the current fuel.",
		"getFuel":"获取当前熔炉的燃料Item项目.",
		"setSmelting":"设置当前熔炉的被冶炼物Item项目?\r\n<p>\r\n原文:Set the item currently smelting.",
		"setResult":"设置当前熔炉的生成物Item项目.\r\n<p>\r\n原文:Set the current item in the result slot.",
		"getResult":"获取当前熔炉生成的的Item项目.\r\n<p>\r\n原文:Get the current item in the result slot.",
		"ClassDescription":"熔炉的.用户界面接口",
		"getSmelting":"获取当前熔炉的被冶炼Item项目?\r\n<p>\r\n原文:Get the item currently smelting."
	},
	"MultipleCommandAlias":{
		"ClassDescription":"代表一个或多个命令",
		"getCommands":"获取与多命令别名相关的命令.\r\n<p>\r\n原文:\r\nGets the commands associated with the multi-command alias."
	},
	"PluginNameConversationPrefix":{
		"getPrefix":"Prepends each conversation message with the plugin name.",
		"ClassDescription":"PluginNameConversationPrefix is a {@link ConversationPrefix} implementation\r\nthat displays the plugin name in front of conversation output."
	},
	"BlockDispenseEvent":{
		"getVelocity":"获取物品射出的速度、角度.\r\n<p>\r\n注意: 修改返回的对象并不会修改速度, 必须\r\n用{@link #setVelocity(org.bukkit.util.Vector)} 代替.\r\n<p>\r\n原文：Gets the velocity.\r\n<p>\r\nNote: Modifying the returned Vector will not change the velocity, you\r\nmust use {@link #setVelocity(org.bukkit.util.Vector)} instead.",
		"setVelocity":"设置物品射出的速度、角度.\r\n<p>\r\n原文：Sets the velocity of the item being dispensed.",
		"getItem":"获取被射出的物品.\r\n<p>\r\n注意:修改返回的item对象没用, 必须用 {@link #setItem(org.bukkit.inventory.ItemStack)} 代替.\r\n<p>\r\n原文：Gets the item that is being dispensed. Modifying the returned item will\r\nhave no effect, you must use {@link\r\n#setItem(org.bukkit.inventory.ItemStack)} instead.",
		"ClassDescription":"物品被方块(比如发射器,投掷器等)射出的事件.\r\n<p>\r\n取消该事件, 物品就不会被射出.",
		"setItem":"设置被射出的物品.\r\n<p>\r\n原文：Sets the item being dispensed."
	},
	"Ghast":{
		"ClassDescription":"代表恶魂."
	},
	"Instrument":{
		"getByType":"根据类型ID获取Instrument对象。\r\n<p>\r\n原文：\r\nGet an instrument by its type ID.",
		"getType":""
	},
	"Sheep":{
		"isSheared":"",
		"ClassDescription":"代表羊.",
		"setSheared":""
	},
	"Sign":{
		"isWallSign":"检测这个告示牌是否依附在墙上.\r\n<p>\r\n原文：Check if this sign is attached to a wall",
		"getAttachedFace":"获取这个木牌附着的朝向.\r\n<p>\r\n原文：Gets the face that this block is attached on",
		"getFacing":"获取这个告示牌当前的朝向.\r\n<p>\r\n译注：与另一个方法不同的是，本方法获得是这个告示牌方块本身得朝向，另一个方法是告示牌依附得方向（向哪依附）.\r\n<p>\r\n原文：Gets the direction that this sign is currently facing",
		"ClassDescription":"代表告示牌."
	},
	"PluginMessageListenerRegistration":{
		"getChannel":"获取插件注册的插件通道.\r\n<p>\r\n原文：Gets the plugin channel that this registration is about.",
		"getPlugin":"获取这个注册的相关的插件.\r\n<p>\r\n原文：Gets the plugin that this registration is for.",
		"isValid":"检测这个注册是否仍然有效.\r\n<p>\r\n原文：Checks if this registration is still valid.",
		"ClassDescription":"包含了关于{@link Plugin}注册的插件通道的信息.",
		"getListener":"获取这个注册所描述的监听器.\r\n<p>\r\n原文：Gets the registered listener described by this registration."
	},
	"BlockIgniteEvent":{
		"getPlayer":"获取点燃方块的玩家,如果不是玩家点燃的就返回null.\r\n<p>\r\n原文：Gets the player who ignited this block",
		"getIgnitingEntity":"获取点燃方块的实体.\r\n<p>\r\n原文：Gets the entity which ignited this block",
		"ClassDescription":"当一个方块被点燃时触发.\r\n<p>\r\n若要判断玩家是否放了个火方块,请看{@link BlockPlaceEvent}.\r\n<p>\r\n若本事件被取消，方块将不会被点燃",
		"getCause":"获取点燃方块的原因.\r\n<p>\r\n原文：Gets the cause of block ignite.",
		"getIgnitingBlock":"获取点燃方块的方块.\r\n<p>\r\n原文：Gets the block who ignited this block."
	},
	"StructureGrowEvent":{
		"getSpecies":"获取物种类型(白桦、橡树、云杉、红蘑菇和棕蘑菇).\r\n<p>\r\n原文:\r\nGets the species type (birch, normal, pine, red mushroom, brown\r\nmushroom)",
		"getLocation":"获取这个结构的位置.\r\n<p>\r\n原文:\r\nGets the location of the structure.",
		"getPlayer":"获取“种”下这个结构的玩家.\r\n<p>\r\n原文:\r\nGets the player that created the structure.",
		"isFromBonemeal":"检测此结构的生长是否使用骨粉.\r\n<p>\r\n原文:\r\nChecks if structure was grown using bonemeal.",
		"ClassDescription":"当一个有机结构试图生长的时调用此事件(树苗 {@literal ->} 树, 蘑菇 {@literal ->} 巨型蘑菇, 自然生长的或使用骨粉生长的).",
		"getBlocks":"获取与结构有关的所有方块的ArrayList.\r\n<p>\r\n原文:\r\nGets an ArrayList of all blocks associated with the structure."
	},
	"PluginsCommand":{},
	"BlockCommandSender":{
		"getBlock":"返回命令发送者的方块.\r\n<p>\r\n原文:\r\nReturns the block this command sender belongs to"
	},
	"Plugin":{
		"getServer":"Returns the Server instance currently running this plugin",
		"getResource":"Gets an embedded resource in this plugin",
		"setNaggable":"Set naggable state",
		"getName":"Returns the name of the plugin.\r\n<p>\r\nThis should return the bare name of the plugin and should be used for\r\ncomparison.",
		"isNaggable":"Simple boolean if we can still nag to the logs about things",
		"getDefaultWorldGenerator":"Gets a {@link ChunkGenerator} for use in a default world, as specified\r\nin the server configuration",
		"getLogger":"Returns the plugin logger associated with this server's logger. The\r\nreturned logger automatically tags all log messages with the plugin's\r\nname.",
		"ClassDescription":"Represents a Plugin\r\n<p>\r\nThe use of {@link PluginBase} is recommended for actual Implementation",
		"getDataFolder":"Returns the folder that the plugin data's files are located in. The\r\nfolder may not yet exist.",
		"onEnable":"Called when this plugin is enabled",
		"getDescription":"Returns the plugin.yaml file containing the details for this plugin",
		"saveDefaultConfig":"Saves the raw contents of the default config.yml file to the location\r\nretrievable by {@link #getConfig()}.\r\n<p>\r\nThis should fail silently if the config.yml already exists.",
		"onDisable":"Called when this plugin is disabled",
		"getConfig":"Gets a {@link FileConfiguration} for this plugin, read through\r\n\"config.yml\"\r\n<p>\r\nIf there is a default config.yml embedded in this plugin, it will be\r\nprovided as a default for this Configuration.",
		"saveConfig":"Saves the {@link FileConfiguration} retrievable by {@link #getConfig()}.",
		"isEnabled":"Returns a value indicating whether or not this plugin is currently\r\nenabled",
		"reloadConfig":"Discards any data in {@link #getConfig()} and reloads from disk.",
		"onLoad":"Called after a plugin is loaded but before it has been enabled.\r\n<p>\r\nWhen mulitple plugins are loaded, the onLoad() for all plugins is\r\ncalled before any onEnable() is called.",
		"saveResource":"Saves the raw contents of any resource embedded with a plugin's .jar\r\nfile assuming it can be found using {@link #getResource(String)}.\r\n<p>\r\nThe resource is saved into the plugin's data folder using the same\r\nhierarchy as the .jar file (subdirectories are preserved).",
		"getPluginLoader":"Gets the associated PluginLoader responsible for this plugin"
	},
	"PrepareItemCraftEvent":{
		"getRecipe":"Get the recipe that has been formed. If this event was triggered by a\r\ntool repair, this will be a temporary shapeless recipe representing the\r\nrepair.",
		"getInventory":"",
		"isRepair":"Check if this event was triggered by a tool repair operation rather\r\nthan a crafting recipe."
	},
	"PlayerToggleFlightEvent":{
		"ClassDescription":"玩家切换飞行状态则调用此事件.",
		"isFlying":"返回玩家是否正在飞行或没有飞行.\r\n<p>\r\n原文:Returns whether the player is trying to start or stop flying."
	},
	"ConversationFactory":{
		"addConversationAbandonedListener":"Adds a {@link ConversationAbandonedListener} to all conversations\r\nconstructed by this factory.",
		"withFirstPrompt":"Sets the first prompt to use in all generated conversations.\r\n<p>\r\nThe default is Prompt.END_OF_CONVERSATION.",
		"withModality":"Sets the modality of all {@link Conversation}s created by this factory.\r\nIf a conversation is modal, all messages directed to the player are\r\nsuppressed for the duration of the conversation.\r\n<p>\r\nThe default is True.",
		"withInitialSessionData":"Sets any initial data with which to populate the conversation context\r\nsessionData map.",
		"withPrefix":"Sets the {@link ConversationPrefix} that prepends all output from all\r\ngenerated conversations.\r\n<p>\r\nThe default is a {@link NullConversationPrefix};",
		"withConversationCanceller":"Adds a {@link ConversationCanceller} to constructed conversations.",
		"withTimeout":"Sets the number of inactive seconds to wait before automatically\r\nabandoning all generated conversations.\r\n<p>\r\nThe default is 600 seconds (5 minutes).",
		"withEscapeSequence":"Sets the player input that, when received, will immediately terminate\r\nthe conversation.",
		"buildConversation":"Constructs a {@link Conversation} in accordance with the defaults set\r\nfor this factory.",
		"withLocalEcho":"Sets the local echo status for all {@link Conversation}s created by\r\nthis factory. If local echo is enabled, any text submitted to a\r\nconversation gets echoed back into the submitter's chat window.",
		"ClassDescription":"A ConversationFactory is responsible for creating a {@link Conversation}\r\nfrom a predefined template. A ConversationFactory is typically created when\r\na plugin is instantiated and builds a Conversation each time a user\r\ninitiates a conversation with the plugin. Each Conversation maintains its\r\nown state and calls back as needed into the plugin.\r\n<p>\r\nThe ConversationFactory implements a fluid API, allowing parameters to be\r\nset as an extension to the constructor.",
		"thatExcludesNonPlayersWithMessage":"Prevents this factory from creating a conversation for non-player\r\n{@link Conversable} objects."
	},
	"Configuration":{
		"addDefault":"设置指定路径的缺省值. \r\n<p>\r\n如果没有默认的 {@link Configuration}. \r\n那么将会建立一个新的 {@link MemoryConfiguration} 用于保存.\r\n<p>\r\n如果值为 null ，该值将被从默认的配置源中删除.\r\n<p>原文: \r\nSets the default value of the given path as provided.\r\n<p>\r\nIf no source {@link Configuration} was provided as a default collection, then a new {@link MemoryConfiguration} will be created to hold the new default value.\r\n<p>\r\nIf value is null, the value will be removed from the default Configuration source.",
		"addDefaults":"把 {@link Configuration} 全部加入到缺省值列表.\r\n<p>\r\n如果没有缺省值 {@link Configuration}, 那么将会建立一个新的 {@link MemoryConfiguration} 用于保存.\r\n<p>\r\n你可以使用{@link #setDefaults(org.bukkit.configuration.Configuration)}来设置缺省值列表来源. \r\n<p>原文: \r\nSets the default values of the given paths as provided.\r\n<p>\r\nIf no source {@link Configuration} was provided as a default collection, then a new {@link MemoryConfiguration} will be created to hold the new default value.\r\n<p>\r\nIf you require this, you should set the default source with {@link #setDefaults(org.bukkit.configuration.Configuration)}.",
		"options":"获取这个 {@link Configuration} 的 {@link ConfigurationOptions}.\r\n<p>\r\n如需修改配置,直接修改返回值即可.\r\n<p>原文: \r\nGets the {@link ConfigurationOptions} for this {@link Configuration}.\r\n<p>\r\nAll setters through this method are chainable.",
		"getDefaults":"获取这个 {@link Configuration} 的缺省值 {@link Configuration}.\r\n<p>\r\n如果设置过缺省值, 即使没有设置缺省值列表, 也会返回 {@link Configuration}.\r\n<p>\r\n如果都没有, 则返回 null.\r\n<p>原文: \r\nGets the source {@link Configuration} for this configuration.\r\n<p>\r\nIf no configuration source was set, but default values were added, then a {@link MemoryConfiguration} will be returned. \r\nIf no source was set and no defaults were set, then this method will return null.",
		"ClassDescription":"配置文件的基类.\r\n<p>原文: \r\nRepresents a source of configurable options and settings",
		"setDefaults":"设置新的缺省值列表.\r\n<p>\r\n将直接替换原有的缺省值列表(如果有).\r\n<p>原文: \r\nSets the source of all default values for this {@link Configuration}.\r\n<p>\r\nIf a previous source was set, or previous default values were defined, then they will not be copied to the new source."
	},
	"EntityDamageByBlockEvent":{
		"ClassDescription":"当一个实体受到来自方块的伤害时触发该事件\r\n原文:\r\nCalled when an entity is damaged by a block",
		"getDamager":"返回试玩家受到伤害的Block类"
	},
	"EntityPortalEvent":{
		"getPortalTravelAgent":"返回Travel Agent使用(或不使用)于本次事件.",
		"useTravelAgent":"返回Travel Agent是否启用\r\n<p>\r\n如果此项别设置为true,TravelAgent将尝试寻找一个{@link #getTo()}位置附近的一个传送门\r\n若没有传送门将尝试创建一个传送门.\r\n<p>\r\n如果此项被设为false, {@link #getEntity()} 将只能被传送到 {@link #getTo()}.",
		"ClassDescription":"当一个非玩家的实体被传送门传送时触发本事件\r\n<p>\r\n对于玩家请看 {@link org.bukkit.event.player.PlayerPortalEvent}\r\n原文:\r\nCalled when a non-player entity is about to teleport because it is in\r\ncontact with a portal.\r\n<p>\r\nFor players see {@link org.bukkit.event.player.PlayerPortalEvent}",
		"setPortalTravelAgent":"设置 Travel Agent使用(或不使用)于本次事件."
	},
	"WorldInitEvent":{
		"ClassDescription":"当一个世界被初始化时调用."
	},
	"BossBar":{
		"setVisible":"设置这个boss血条是否可见",
		"hasFlag":"获取某个boss血条属性是否在该血条上存在",
		"removeFlag":"从该boss血条内移除一个指定的属性",
		"setProgress":"设置该血条的进度.请记住,这个参数必须是1.0（最大值）到0.0（血条空）这两个数字之间的",
		"show":"将该boss血条设置为可见状态",
		"setTitle":"设置当前boss血条的标题.\r\n比如凋零这个boss的血条标题就叫凋零.\r\n<p>\r\n原文:\r\nSets the title of this boss bar",
		"getColor":"获取这个boss血条的颜色\r\n<p>\r\n原文:Returns the color of this boss bar",
		"isVisible":"获取该血条是否可见",
		"getProgress":"返回该血条的进度（只会返回1.00到0.00之间的数字）",
		"addFlag":"向该血条添加一个血条属性",
		"removePlayer":"从一个boss血条内移除某个玩家（就是使指定玩家看不见该BOSS血条）",
		"removeAll":"从该boss血条内移除所有玩家",
		"hide":"从所有能看见的玩家屏幕上隐藏该血条",
		"getTitle":"用于获取该Boos血量条的标题\r\n<p>\r\n原文:Returns the title of this boss bar",
		"setColor":"设置这个Boss血条的颜色\r\n<p>\r\n原文:Sets the color of this boss bar.",
		"getStyle":"获取该Boss血条的样式\r\n<p>\r\n原文:Returns the style of this boss bar",
		"addPlayer":"向该boss血条内添加一个玩家（也就是使该玩家能看见这个血条）",
		"setStyle":"设置这个boss血条的样式\r\n<p>\r\n原文:Sets the bar style of this boss bar",
		"getPlayers":"返回所有能看到这个boss血条的玩家"
	},
	"PlayerAnimationEvent":{
		"getAnimationType":"获得此事件中玩家的动作类型.\r\n<p>\r\n原文:Get the type of this animation event",
		"ClassDescription":"玩家动作事件."
	},
	"SkullMeta":{
		"ClassDescription":"代表{@link Material#SKULL_ITEM 头颅}.",
		"getOwner":"获取这个头颅的主人.\r\n<p>\r\n原文：Gets the owner of the skull.",
		"hasOwner":"检测这个头颅是否有主人.\r\n<p>\r\n原文：Checks to see if the skull has an owner.",
		"setOwner":"设置这个头颅的主人.\r\n<p>\r\n插件应该在调用这个方法之前检测hasOwner()是否返回true.\r\n<p>\r\n原文：Sets the owner of the skull.\r\n<p>\r\nPlugins should check that hasOwner() returns true before calling this\r\nplugin."
	},
	"DaylightDetector":{
		"ClassDescription":"Represents a (possibly inverted) daylight detector."
	},
	"TripwireHook":{
		"setActivated":"设置这个绊线钩的激活状态.\r\n<p>\r\n原文:Set hook activated state",
		"isConnected":"这个绊线钩是否处于连接状态.\r\n<p>\r\n原文:Test if tripwire is connected",
		"ClassDescription":"代表绊线钩",
		"isActivated":"这个绊线钩是否被激活.\r\n<p>\r\n原文:Test if hook is currently activated",
		"setConnected":"设置这个绊线钩的连接状态.\r\n<p>\r\n原文:Set tripwire connection state"
	},
	"EnderDragon":{
		"ClassDescription":"Represents an Ender Dragon",
		"getPhase":"Gets the current phase that the dragon is performing.",
		"setPhase":"Sets the next phase for the dragon to perform."
	},
	"Consumer":{
		"ClassDescription":"Represents an operation that accepts a single input argument and returns no\nresult.",
		"accept":"Performs this operation on the given argument."
	},
	"PistonMoveReaction":{
		"getById":"",
		"getId":"",
		"ClassDescription":"Represents how a block or entity will react when interacting with a piston\r\nwhen it is extending or retracting."
	},
	"Permission":{
		"getChildren":"Gets the children of this permission.\n<p>\nIf you change this map in any form, you must call {@link\n#recalculatePermissibles()} to recalculate all {@link Permissible}s",
		"getName":"Returns the unique fully qualified name of this Permission",
		"recalculatePermissibles":"Recalculates all {@link Permissible}s that contain this permission.\n<p>\nThis should be called after modifying the children, and is\nautomatically called after modifying the default value",
		"getPermissibles":"Gets a set containing every {@link Permissible} that has this\npermission.\n<p>\nThis set cannot be modified.",
		"loadPermission":"Loads a Permission from a map of data, usually used from retrieval from\na yaml file.\n<p>\nThe data may contain the following keys:\n<ul>\n<li>default: Boolean true or false. If not specified, false.\n<li>children: {@code Map<String, Boolean>} of child permissions. If not\n    specified, empty list.\n<li>description: Short string containing a very small description of\n    this description. If not specified, empty string.\n</ul>",
		"addParent":"Adds this permission to the specified parent permission.",
		"getDefault":"Gets the default value of this permission.",
		"ClassDescription":"Represents a unique permission that may be attached to a {@link\nPermissible}",
		"setDescription":"Sets the description of this permission.\n<p>\nThis will not be saved to disk, and is a temporary operation until the\nserver reloads permissions.",
		"setDefault":"Sets the default value of this permission.\n<p>\nThis will not be saved to disk, and is a temporary operation until the\nserver reloads permissions. Changing this default will cause all {@link\nPermissible}s that contain this permission to recalculate their\npermissions",
		"getDescription":"Gets a brief description of this permission, if set",
		"loadPermissions":"Loads a list of Permissions from a map of data, usually used from\nretrieval from a yaml file.\n<p>\nThe data may contain a list of name:data, where the data contains the\nfollowing keys:\n<ul>\n<li>default: Boolean true or false. If not specified, false.\n<li>children: {@code Map<String, Boolean>} of child permissions. If not\n    specified, empty list.\n<li>description: Short string containing a very small description of\n    this description. If not specified, empty string.\n</ul>"
	},
	"EnchantingTable":{
		"ClassDescription":"Represents an enchanting table."
	},
	"PluginLoader":{
		"enablePlugin":"Enables the specified plugin\r\n<p>\r\nAttempting to enable a plugin that is already enabled will have no\r\neffect",
		"disablePlugin":"Disables the specified plugin\r\n<p>\r\nAttempting to disable a plugin that is not enabled will have no effect",
		"getPluginDescription":"Loads a PluginDescriptionFile from the specified file",
		"createRegisteredListeners":"Creates and returns registered listeners for the event classes used in\r\nthis listener",
		"getPluginFileFilters":"Returns a list of all filename filters expected by this PluginLoader",
		"ClassDescription":"Represents a plugin loader, which handles direct access to specific types\r\nof plugins",
		"loadPlugin":"Loads the plugin contained in the specified file"
	},
	"TimedRegisteredListener":{
		"hasMultiple":"Gets whether this listener has handled multiple events, such that for\r\nsome two events, <code>eventA.getClass() != eventB.getClass()</code>.",
		"reset":"Resets the call count and total time for this listener",
		"getEventClass":"Gets the class of the events this listener handled. If it handled\r\nmultiple classes of event, the closest shared superclass will be\r\nreturned, such that for any event this listener has handled,\r\n<code>this.getEventClass().isAssignableFrom(event.getClass())</code>\r\nand no class <code>this.getEventClass().isAssignableFrom(clazz)\r\n{@literal && this.getEventClass() != clazz &&}\r\nevent.getClass().isAssignableFrom(clazz)</code> for all handled events.",
		"ClassDescription":"Extends RegisteredListener to include timing information",
		"getCount":"Gets the total times this listener has been called",
		"getTotalTime":"Gets the total time calls to this listener have taken"
	},
	"BannerMeta":{
		"getBaseColor":"返回这个旗帜的底色.\r\n<p>\r\n原文：Returns the base color for this banner",
		"setBaseColor":"设置这个旗帜的底色.\r\n<p>\r\n原文：Sets the base color for this banner",
		"setPatterns":"设置这个旗帜的图案.\r\n<p>\r\n原文：Sets the patterns used on this banner",
		"numberOfPatterns":"返回在这个旗帜的图案数量.\r\n<p>\r\n原文：Returns the number of patterns on this\r\nbanner",
		"removePattern":"在指定索引处移除图案.\r\n<p>\r\n原文：Removes the pattern at the specified index",
		"getPatterns":"返回这个旗帜的图案的列表.\r\n<p>\r\n原文：Returns a list of patterns on this banner",
		"addPattern":"在现有的图案顶上新增图案.\r\n<p>\r\n原文：Adds a new pattern on top of the existing\r\npatterns",
		"setPattern":"在指定的索引处设置图案.\r\n<p>\r\n原文：Sets the pattern at the specified index",
		"getPattern":"返回在指定索引处的图案.\r\n<p>\r\n原文：Returns the pattern at the specified index"
	},
	"Wrapper":{},
	"InventoryCreativeEvent":{
		"ClassDescription":"This event is called when a player in creative mode puts down or picks up\r\nan item in their inventory / hotbar and when they drop items from their\r\nInventory while in creative mode."
	},
	"InventoryType":{},
	"BlockPhysicsEvent":{
		"getChangedType":"获取事件中被改变的方块.\r\n<p>\r\n原文：Gets the type of block that changed, causing this event",
		"ClassDescription":"方块物理事件(例如是沙子掉落).",
		"getChangedTypeId":"获取事件中被改变的方块的ID.\r\n<p>\r\n原文：Gets the type of block that changed, causing this event"
	},
	"BukkitObjectInputStream":{
		"ClassDescription":"这个类旨在被用于连接到{@link ConfigurationSerializable}的API。\r\n它把对象转换回它们在被{@link BukkitObjectInputStream}序列化之后的原始实现。\r\n<p>\r\n原文：This class is designed to be used in conjunction with the {@link\r\nConfigurationSerializable} API. It translates objects back to their\r\noriginal implementation after being serialized by {@link\r\nBukkitObjectInputStream}.\r\n<p>\r\n直接继承实现这个类的语法可能在未来版本被取消。\r\n<p>\r\n原文：Behavior of implementations extending this class is not guaranteed across\r\nfuture versions."
	},
	"PlayerMoveEvent":{
		"isCancelled":"获取此事件的取消状态. 被取消的事件将不会在服务器上执行，但将仍然传递给其他插件.\r\n<p>\r\n如果一个移动或传送事件被取消,玩家将被移动或传送回getFrom()定义的位置。这不会触发此事件.\r\n<p>\r\n原文:Gets the cancellation state of this event. A cancelled event will not\r\nbe executed in the server, but will still pass to other plugins\r\n<p>\r\nIf a move or teleport event is cancelled, the player will be moved or\r\nteleported back to the Location as defined by getFrom(). This will not\r\nfire an event",
		"setCancelled":"设置取消状态的事件。被取消的事件不会在服务器执行,但仍将传递给其他插件执行.\r\n<p>\r\n如果一个移动或传送事件被取消,玩家将被移动或传送回getFrom()定义的位置。这不会触发此事件.\r\n<p>\r\n原文:Sets the cancellation state of this event. A cancelled event will not\r\nbe executed in the server, but will still pass to other plugins\r\n<p>\r\nIf a move or teleport event is cancelled, the player will be moved or\r\nteleported back to the Location as defined by getFrom(). This will not\r\nfire an event",
		"setFrom":"设置玩家将要移动到此位置之前的位置.\r\n<p>\r\n原文:Sets the location to mark as where the player moved from",
		"setTo":"设置玩家将要移动的位置.\r\n<p>\r\n原文:Sets the location that this player will move to",
		"getTo":"得到玩家移动到的位置.\r\n<p>\r\n原文:Gets the location this player moved to",
		"ClassDescription":"玩家移动事件.",
		"getFrom":"得到玩家移动到此位置之前的位置.\r\n<p>\r\n原文:Gets the location this player moved from"
	},
	"EvokerFangs":{
		"ClassDescription":"Represents Evoker Fangs.",
		"getOwner":"Gets the {@link LivingEntity} which summoned the fangs.",
		"setOwner":"Sets the {@link LivingEntity} which summoned the fangs."
	},
	"DyeColor":{
		"getByWoolData":"获取给定的羊毛数据值的染料颜色.\n<p>\n原文:\nGets the DyeColor with the given wool data value.",
		"getDyeData":"获取代表这种颜色的染料数据值.\n<p>\n原文:\nGets the associated dye data value representing this color.",
		"getByDyeData":"用给定的数据值获取DyeColor.\n<p>\n原文:\nGets the DyeColor with the given dye data value.",
		"getWoolData":"获取这个颜色代表的相关羊毛的数据值.\n<p>\n原文:\nGets the associated wool data value representing this color.",
		"getFireworkColor":"获取这个染料代表的烟花颜色.\n<p>\n原文:\nGets the firework color that this dye represents.",
		"getByFireworkColor":"获取给定的颜色颜色值的染料颜色.\n<p>\n原文:\nGets the DyeColor with the given firework color value.",
		"getByColor":"获取给定的颜色值的染料颜色.\n<p>\n原文:\nGets the DyeColor with the given color value.",
		"getColor":"获取这个染料代表的颜色.\n<p>\n原文:\nGets the color that this dye represents.",
		"ClassDescription":"染料和布料所有支持的颜色值."
	},
	"WitherSkeleton":{
		"ClassDescription":"Represents a WitherSkeleton - variant of {@link Skeleton}."
	},
	"BlockPopulator":{
		"populate":"在指定的区块附近或内部填充一定区域的方块。\r\n<p>\r\n在指定区块四周的区块必须已经存在；就是说，指定方块的东南西北都必须有一个区块存在，\r\n角落区块可以不存在。当准备好时填充器会记录那些区块所有的修改请求并执行修改。\r\n<p>\r\n译注：存在的意思可能是加载。\r\n<p>\r\n原文：\r\nPopulates an area of blocks at or around the given chunk.\r\n<p>\r\nThe chunks on each side of the specified chunk must already exist; that\r\nis, there must be one north, east, south and west of the specified\r\nchunk. The \"corner\" chunks may not exist, in which scenario the\r\npopulator should record any changes required for those chunks and\r\nperform the changes when they are ready.",
		"ClassDescription":"用于生成一定小区域的方块的方块填充器。\r\n<p>\r\n例如，在地狱中或生成的填满宝藏的地牢中生成萤石。"
	},
	"EntityEvent":{
		"getEntityType":"获取涉及这个事件的实体的EntityType.\r\n<p>\r\n原文：Gets the EntityType of the Entity involved in this event.",
		"ClassDescription":"代表实体相关事件.",
		"getEntity":"返回这个事件所涉及的实体.\r\n<p>\r\n原文: Returns the Entity involved in this event"
	},
	"Beacon":{
		"setSecondaryEffect":"Set the secondary effect on this beacon, or null to clear. Note that tier\nmust be &gt;= 4 for this effect to be active.",
		"getSecondaryEffect":"Returns the secondary effect set on the beacon.",
		"setPrimaryEffect":"Set the primary effect on this beacon, or null to clear.",
		"ClassDescription":"代表信标.",
		"getTier":"Returns the tier of the beacon pyramid (0-4). The tier refers to the\nbeacon's power level, based on how many layers of blocks are in the\npyramid. Tier 1 refers to a beacon with one layer of 9 blocks under it.",
		"getEntitiesInRange":"Returns the list of players within the beacon's range of effect.",
		"getPrimaryEffect":"Returns the primary effect set on the beacon"
	},
	"LeatherArmorMeta":{
		"setColor":"设置这个盔甲的颜色.\r\n<p>\r\n原文：Sets the color of the armor.",
		"getColor":"获取这个盔甲的颜色.如果它还没有被设置，就会返回{@link ItemFactory#getDefaultLeatherColor()}.\r\n<p>\r\n原文：Gets the color of the armor. If it has not been set otherwise, it will\r\nbe {@link ItemFactory#getDefaultLeatherColor()}.",
		"ClassDescription":"代表{@link Material#LEATHER_BOOTS 皮革靴子}，{@link Material#LEATHER_CHESTPLATE 皮革外套}，{@link Material#LEATHER_HELMET 皮革帽子}，{@link Material#LEATHER_LEGGINGS 皮革裤子}，可以被染色.\r\n<p>\r\n译注：下文中的“盔甲”可以是皮革靴子、外套、帽子、裤子任意一种，因为这个类代表了四种嘛."
	},
	"FireworkEffectMeta":{
		"setEffect":"设置这个meta的烟花效果.\r\n<p>\r\n原文:Sets the firework effect for this meta.",
		"getEffect":"获取这个meta的烟花效果.\r\n<p>\r\n原文:Gets the firework effect for this meta.",
		"ClassDescription":"代表可以存储单个FireworkEffect的meta.例如包含{@link Material#FIREWORK_CHARGE}.",
		"hasEffect":"检测这个meta是否拥有烟花效果.\r\n<p>\r\n原文：Checks if this meta has an effect."
	},
	"Effect":{
		"getType":"",
		"getById":"获取给定id相关联的效果.\n<p>\n原文：Gets the Effect associated with the given ID.",
		"getId":"获取这个效果的id.\n<p>\n原文：Gets the ID for this effect.",
		"ClassDescription":"效果列表",
		"getData":""
	},
	"Chicken":{
		"ClassDescription":"代表鸡."
	},
	"VillagerAcquireTradeEvent":{
		"setRecipe":"Set the recipe to be acquired.",
		"getRecipe":"Get the recipe to be acquired.",
		"ClassDescription":"Called whenever a villager acquires a new trade."
	},
	"ChunkEvent":{
		"getChunk":"获取准备加载/卸载的区块.\r\n<p>\r\n原文:\r\nGets the chunk being loaded/unloaded",
		"ClassDescription":"代表与区块有关系的事件."
	},
	"MaterialData":{
		"setData":"设置这个物品的原始数据.\r\n<p>\r\n原文：Sets the raw data of this material",
		"toItemStack":"基于这个MaterialData创建一个新的ItemStack.\r\n<p>\r\n原文:Creates a new ItemStack based on this MaterialData",
		"getItemType":"获取这个MaterialData代表的Material.\r\n<p>\r\n原文:Gets the Material that this MaterialData represents",
		"getItemTypeId":"获取这个MaterialData代表的Material ID.\r\n<p>\r\n原文：Gets the Material Id that this MaterialData represents",
		"ClassDescription":"为某些物品或方块处理特定的元数据.",
		"getData":"获取这个物品的原始数据。\r\n<p>\r\n原文:Gets the raw data in this material"
	},
	"Bukkit":{
		"getRecipesFor":"Get a list of all recipes for a given item. The stack size is ignored\nin comparisons. If the durability is -1, it will match any data value.",
		"clearRecipes":"清理所有已添加的合成配方.\n<p>\n原文:Clears the list of crafting recipes.",
		"getAdvancement":"Get the advancement specified by this key.",
		"getOnlinePlayers":"获取所有在线玩家的集合的视图. \n<p>\n此 {@linkplain Collections#unmodifiableCollection(Collection) 视图} is a reused\nobject, making some operations like {@link Collection#size()}\nzero-allocation.\n(以下翻译仅供参考)\n<p>\n此集合是由内部表示支持的视图, 因此, 一切修改服务器内部状态的操作将会\n立即反映到此集合上. 并不严格保证未来或所有实现都会遵守\n返回一个可再利用集合 (一致性)的约定. 不赞成对这个集合执行强制转换或\n依赖于接口实现 (例如 {@link Serializable} or {@link List}). \n<p>\n迭代操作 is undefined outside of self-contained main-thread\nuses. 正常且立即的迭代器会影响集合是否被完全支持. \n{@link Entity#teleport(Location) 传送}, \n{@link Player#setHealth(double) 死亡}, \n{@link Player#kickPlayer(String) 踢出} 等操作的结果是未知的 (没有罗列完全). \n任何对这个集合的异步操作都是安全的. \n<p>\nFor safe consequential iteration or mimicking the old array behavior,\nusing {@link Collection#toArray(Object[])} is recommended. For making\nsnapshots, {@link ImmutableList#copyOf(Collection)} is recommended.\n<p>\n原文: \nThis {@linkplain\nCollections#unmodifiableCollection(Collection) view} is a reused\nobject, making some operations like {@link Collection#size()}\nzero-allocation.\n<p>\nThe collection is a view backed by the internal representation, such\nthat, changes to the internal state of the server will be reflected\nimmediately. However, the reuse of the returned collection (identity)\nis not strictly guaranteed for future or all implementations. Casting\nthe collection, or relying on interface implementations (like {@link\nSerializable} or {@link List}), is deprecated.\n<p>\nIteration behavior is undefined outside of self-contained main-thread\nuses. Normal and immediate iterator use without consequences that\naffect the collection are fully supported. The effects following\n(non-exhaustive) {@link Entity#teleport(Location) teleportation},\n{@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\nString) kicking} are undefined. Any use of this collection from\nasynchronous threads is unsafe.\n<p>\nFor safe consequential iteration or mimicking the old array behavior,\nusing {@link Collection#toArray(Object[])} is recommended. For making\nsnapshots, {@link ImmutableList#copyOf(Collection)} is recommended.",
		"getPlayer":"使用给定{@link UUID}获取玩家. \n<p>\n原文: Gets the player with the given UUID.",
		"getWorld":"使用给定{@linkplain UUID 唯一ID}查找世界. \n<p>\n原文: Gets the world from the given Unique ID.",
		"getName":"获取这个 {@link Server} 实例的名字. \n<p>\n原文:\nGets the name of this server implementation.",
		"getPluginCommand":"用给定命令名或别名获取 {@link PluginCommand}. \n<p>\n原文: Gets a {@link PluginCommand} with the given name or alias.",
		"getMessenger":"Gets the {@link Messenger} responsible for this server.",
		"getMotd":"获取在客户端服务器列表里显示的消息.\n<p>\n原文:Gets the message that is displayed on the server list.",
		"ClassDescription":"代表一个 Bukkit 核心, 用来转发 {@link Server} 单例的调用.",
		"setServer":"请求设置所持有的 {@link Server} 实例.\n如果 Server 已经被设定过了, 这个操作无法完成. \n<p>\n原文:\nAttempts to set the {@link Server} singleton.\nThis cannot be done if the Server is already set.",
		"getServerName":"获取服务器的名称. \n<p>\n原文:\nGet the name of this server.",
		"getConsoleSender":"Gets a {@link ConsoleCommandSender} that may be used as an input source\nfor this server.",
		"getAnimalSpawnLimit":"获取用户指定的可以在一个区块内生成的动物的数量的限制.\n<p>\n原文:\nGets user-specified limit for number of animals that can spawn in a\nchunk.",
		"setDefaultGameMode":"设置服务器的默认游戏模式.\n<p>\n原文:Sets the default {@link GameMode} for new players.",
		"getOperators":"获取包含了所有OP的集合.\n<p>\n原文:Gets a set containing all player operators.",
		"getBannedPlayers":"获取包含了已被封禁的玩家的集合.\n<p>\n原文:Gets a set containing all banned players.",
		"createChunkData":"创建一个 ChunkData 实例，以用于区块生成。\n<p>\n原文:\nCreate a ChunkData for use in a generator.\n\nSee {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}",
		"reloadWhitelist":"从硬盘重载白名单列表. \n<p>\n原文:Reloads the whitelist from disk.",
		"getWaterAnimalSpawnLimit":"Gets user-specified limit for number of water animals that can spawn in\na chunk.",
		"getSpawnRadius":"获取出生地保护的范围（以方块为单位）.\n<p>\n原文:Gets the radius, in blocks, around each worlds spawn point to protect.",
		"getUnsafe":"",
		"loadServerIcon":"Creates a cached server-icon for the specific image.\n<p>\nSize and type are implementation defined. An incompatible file is\nguaranteed to throw an implementation-defined {@link Exception}.",
		"getServer":"获取当前持有的 {@link Server} 实例. \n<p>\n原文:\nGets the current {@link Server} singleton",
		"getOfflinePlayers":"获取曾在此服务器游戏的玩家.\n<p>\n原文:Gets every player that has ever played on this server.",
		"getAllowEnd":"获取此服务器是否开启了末路之地. \n<p>\n原文:\nGets whether this server allows the End or not.",
		"unloadWorld":"卸载指定的世界. \n<p>\n原文: Unloads a world with the given name.",
		"setWhitelist":"设置此服务器是否开启白名单. \n<p>\n原文:\nSets if the server is whitelisted.",
		"getLogger":"返回与此服务器实例绑定的主{@link Logger}. \n<p>\n原文: Returns the primary logger associated with this server instance.",
		"getAllowNether":"获取此服务器是否开启了下界. \n<p>\n原文：\nGets whether this server allows the Nether or not.",
		"getIPBans":"获取包含了已被封禁的IP地址的集合.\n<p>\n原文:Gets a set containing all current IPs that are banned.",
		"getBukkitVersion":"获取正在运行的服务器的Bukkit版本. \n<p>\n原文:\nGets the Bukkit version that this server is running.",
		"getMap":"使用给定物品ID获取地图. \n<p>\n原文: Gets the map from the given item ID.",
		"isPrimaryThread":"Checks the current thread against the expected primary thread for the\nserver.\n<p>\n<b>Note:</b> this method should not be used to indicate the current\nsynchronized state of the runtime. A current thread matching the main\nthread indicates that it is synchronized, but a mismatch <b>does not\npreclude</b> the same assumption.",
		"getItemFactory":"Gets the instance of the item factory (for {@link ItemMeta}).",
		"getOfflinePlayer":"以指定的UUID获取玩家，无论他们使用正版模式还是离线模式.\n<p>\n本方法都将返回一个对象，甚至此玩家并不存在.对于此方法来说，任何玩家都存在.\n<p>\n原文:Gets the player by the given UUID, regardless if they are offline or\nonline.\n<p>\nThis will return an object even if the player does not exist. To this\nmethod, all players will exist.",
		"getScoreboardManager":"Gets the instance of the scoreboard manager.\n<p>\nThis will only exist after the first world has loaded.",
		"getServicesManager":"获取服务管理器. \n<p>\n原文: Gets a services manager.",
		"getServerIcon":"Gets an instance of the server's default server-icon.",
		"createBossBar":"创建一个Boos血量条实例。血量条的进度默认为1.0。\n<p>\n原文:\nCreates a boss bar instance to display to players. The progress\ndefaults to 1.0",
		"getServerId":"获取服务器的ID. 这是一个简单的字母标识, \n可以用来唯一地识别此服务器.\n<p>\n原文:\nGet an ID of this server. The ID is a simple generally alphanumeric ID\nthat can be used for uniquely identifying this server.",
		"createMerchant":"Creates an empty merchant.",
		"getCommandAliases":"获取服务器配置定义的命令别名列表.\n<p>\n原文:Gets a list of command aliases defined in the server properties.",
		"shutdown":"关闭服务器，停止一切在运行的东西.\n<p>\n原文:Shutdowns the server, stopping everything.",
		"getWorldContainer":"Gets the folder that contains all of the various {@link World}s.",
		"getTicksPerAnimalSpawns":"获取每隔多少tick应该生成一次动物. \n<b>例如:</b>\n<ul>\n<li>此值为 1 表示服务器会在每个tick尝试生成动物. \n<li>此值为 400 表示服务器会每隔400tick尝试生成动物. \n<li>此值小于 0 表示会使用Minecraft的默认设置. \n</ul>\n<b>注意:</b> 如果设为 0, 动物生成会被禁用. \n我们推荐使用 spawn-animals 选项来代替将其设为0.\n<p>\nMinecraft使用的默认值: 400.\n<p>\n原文: <hr>\nGets default ticks per animal spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, animal spawning will be disabled. \nWe recommend using spawn-animals to control this instead.\n<p>\nMinecraft default: 400.",
		"setSpawnRadius":"设置出生地保护的范围.\n<p>\n原文:Sets the radius, in blocks, around each worlds spawn point to protect.",
		"getBanList":"获取指定类型的封禁列表.\n<p>\n以玩家名封禁已不再支持，尝试请求获取将返回null（Is it true? 经测试并没有返回null）.替代方法是封禁UUID.\n<p>\n原文:Gets a ban list for the supplied type.\n<p>\nBans by name are no longer supported and this method will return\nnull when trying to request them. The replacement is bans by UUID.",
		"broadcast":"Broadcasts the specified message to every user with the given\npermission name.",
		"getIp":"获取服务器绑定的IP, 如果没有就返回空字符串. \n<p>\n原文:\nGet the IP that this server is bound to, or empty string if not\nspecified.",
		"getIdleTimeout":"Gets the idle kick timeout.",
		"getViewDistance":"获取服务器的视距. \n<p>\n原文:\nGet the view distance from this server.",
		"savePlayers":"保存已加载的玩家信息.\n<p>\n原文:Writes loaded players to disk.",
		"reloadData":"只重载Minecraft游戏数据. 这包括自定义的进度和掉落表.\n<p>\n原文:Reload only the Minecraft data for the server. This includes custom\nadvancements and loot tables.",
		"advancementIterator":"Get an iterator through all advancements. Advancements cannot be removed\nfrom this iterator,",
		"getPluginManager":"获取插件管理器以与其他插件进行交互. \n<p>\n原文: Gets the plugin manager for interfacing with plugins.",
		"resetRecipes":"重置自定义合成配方列表值至默认.\n<p>\n原文:Resets the list of crafting recipes to the default.",
		"reload":"重载服务器, 刷新设置与插件信息.\n<p>\n原文: Reloads the server, refreshing settings and plugin information.",
		"getShutdownMessage":"获取服务器关闭时显示的提示消息.\n<p>\n原文:Gets the default message that is displayed when the server is stopped.",
		"getWarningState":"Gets the current warning state for the server.",
		"createWorld":"用给定的世界生成器来创建或者加载一个世界. \n<p>\n如果这个世界已经被加载了, 那么就会返回等同于调用 \n<code>getWorld(creator.name())</code> 的结果. \n<p>\n原文: Creates or loads a world with the given name using the specified\noptions.\n<p>\nIf the world is already loaded, it will just return the equivalent of\ngetWorld(creator.name()).",
		"getUpdateFolderFile":"获取更新文件夹的 {@link File} 实例. \n<p>\n系统将会在插件加载时选择适当的时机利用此文件夹来安全地更新插件.\n<p>\n原文:\nGets the update folder. The update folder is used to safely update\nplugins at the right moment on a plugin load.",
		"getOnlineMode":"获取服务器是否处于正版模式.\n<p>\n原文:Gets whether the Server is in online mode or not.",
		"getScheduler":"获取用于管理调度任务的调度器. \n<p>\n原文: Gets the scheduler for managing scheduled events.",
		"getVersion":"获取这个 {@link Server} 实例的版本. \n<p>\n原文:\nGets the version string of this server implementation.",
		"hasWhitelist":"获取此服务器是否开启了白名单. \n<p>\n原文:\nGets whether this server has a whitelist or not.",
		"getUpdateFolder":"获取更新文件夹的名字. \n<p>\n系统将会在插件加载时选择适当的时机利用此文件夹来安全地更新插件.\n<p>\n更新文件夹的位置相对于插件文件夹.\n<p>\n\n原文:\nGets the name of the update folder. The update folder is used to safely\nupdate plugins at the right moment on a plugin load.\n<p>\nThe update folder name is relative to the plugins folder.",
		"getDefaultGameMode":"获取服务器的的默认{@link GameMode 游戏模式}.\n<p>\n原文:Gets the default {@link GameMode} for new players.",
		"banIP":"封禁指定的IP地址.\n<p>\n原文:Bans the specified address from the server.",
		"getGenerateStructures":"获取此服务器是否自然生成结构. \n<p>\n原文:\nGet generate-structures setting.",
		"broadcastMessage":"广播一条消息到所有在线玩家. \n<p>\n这与调用 {@link #broadcast(java.lang.String,\njava.lang.String)} 并将第二个参数设为 {@link \nServer#BROADCAST_CHANNEL_USERS} 等效. \n\n原文: \nBroadcast a message to all players.\n<p>\nThis is the same as calling {@link #broadcast(java.lang.String,\njava.lang.String)} to {@link Server#BROADCAST_CHANNEL_USERS}",
		"getMaxPlayers":"获取服务器允许进入的最大玩家数. \n<p>\n原文:\nGet the maximum amount of players which can login to this server.",
		"createMap":"创建一个新地图并自动分配一个ID. \n<p>\n原文: Create a new map with an automatically assigned ID.",
		"getTicksPerMonsterSpawns":"获取每隔多少tick应该生成一次怪物. \n<b>例如:</b>\n<ul>\n<li>此值为 1 表示服务器会在每个tick尝试生成怪物. \n<li>此值为 400 表示服务器会每隔400tick尝试生成怪物. \n<li>此值小于 0 表示会使用Minecraft的默认设置. \n</ul>\n<b>注意:</b> 如果设为 0, 怪物生成会被禁用. \n我们推荐使用 spawn-monsters 选项来代替将其设为0.\n<p>\nMinecraft使用的默认值: 1.\n<p>\n原文: \nGets default ticks per monster spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, monster spawning will be disabled. \nWe recommend using spawn-monsters to control this instead.\n<p>\nMinecraft default: 1.",
		"getWorldType":"获取默认世界的世界类型 (level-type 设置). \n<p>\n原文:\nGet world type (level-type setting) for default world.",
		"getEntity":"用UUID获取实体.\n<p>\n原文:Gets an entity on the server by its UUID",
		"getWorlds":"获取当前服务器加载的所有世界的列表. \n<p>\n原文: Gets a list of all worlds on this server.",
		"getMonsterSpawnLimit":"Gets user-specified limit for number of monsters that can spawn in a\nchunk.",
		"matchPlayer":"尝试获取所有匹配给定名称的玩家, 并返回包含了一切可能匹配的列表. \n<p>\n这个列表没有经过任何特殊排序. 如果能在在线玩家内精确匹配到给定名称,\n则返回一个只包含单个结果的列表. \n<p>\n译注: 设有在线玩家 abcd, efg, dbca 那么 <code>matchPlayer(\"bc\")</code> 会\n返回一个包含 [abcd, dbca] 的列表. 但如果此时玩家 bc 上线了, 再执行相同的查找\n就只会返回包含一个结果的列表 [bc]. \n<p>\n原文: \nAttempts to match any players with the given name, and returns a list\nof all possibly matches.\n<p>\nThis list is not sorted in any particular order. If an exact match is\nfound, the returned list will only contain a single result.",
		"dispatchCommand":"Dispatches a command on this server, and executes it if found.",
		"recipeIterator":"通过自定义合成配方列表获取迭代器.\n<p>\n原文:Get an iterator through the list of crafting recipes.",
		"getHelpMap":"Gets the {@link HelpMap} providing help topics for this server.",
		"addRecipe":"向合成管理器添加一个合成配方.\n<p>\n原文:Adds a recipe to the crafting manager.",
		"isHardcore":"获取服务器是否处于极限模式.\n<p>\n原文:Gets whether the server is in hardcore mode or not.",
		"getPort":"获取运行的服务器所在的端口号. \n<p>\n原文:Get the game port that the server runs on.",
		"getAllowFlight":"获取服务器是否允许飞行.\n<p>\n原文:Gets whether this server allows flying or not.",
		"getPlayerExact":"使用给定玩家名精确查找玩家, 不区分大小写. \n<p>\n原文: Gets the player with the exact given name, case insensitive.",
		"getAmbientSpawnLimit":"Gets user-specified limit for number of ambient mobs that can spawn in\na chunk.",
		"getWhitelistedPlayers":"获取所有已被添加到白名单的玩家. \n<p>\n原文:\nGets a list of whitelisted players.",
		"createInventory":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size and title.",
		"unbanIP":"解禁指定的IP地址.\n<p>\n原文:Unbans the specified address from the server.",
		"setIdleTimeout":"Set the idle kick timeout. Any players idle for the specified amount of\ntime will be automatically kicked.\n<p>\nA value of 0 will disable the idle kick timeout.",
		"getConnectionThrottle":"获取服务器的最小连接间隔设定. \n<p>\n译注: 单位为毫秒. \n<p>\n\n原文: Gets the value of the connection throttle setting."
	},
	"BanList":{
		"getBanEntry":"根据封禁目标(IP地址或玩家名)来获取对应的 {@link BanEntry}.\r\n<p>\r\n原文：Gets {@link BanEntry} by target.",
		"pardon":"从列表中移除指定目标，因此表示“无封禁”的状态(即解除封禁).\r\n<p>\r\n原文:\r\nRemoves the specified target from this list, therefore indicating a\r\n\"not banned\" status.",
		"isBanned":"获取此目标的封禁状态.\r\n<p>\r\n原文:\r\nGets if a {@link BanEntry} exists for the target, indicating an active\r\nban status.",
		"ClassDescription":"一个封禁列表，包含了一些{@link Type 封禁类型}",
		"addBan":"添加一个封禁到这个列表。如果以前的封禁存在，这将更新以前的封禁.\r\n<p>\r\n原文：Adds a ban to the this list. If a previous ban exists, this will\r\nupdate the previous entry.",
		"getBanEntries":"获取此列表包含的所有{@link BanEntry}.\r\n<p>\r\n原文:\r\nGets a set containing every {@link BanEntry} in this list."
	},
	"Inventory":{
		"getMaxStackSize":"返回这个物品栏的最大物品堆叠数量.\n<p>\n原文:Returns the maximum stack size for an ItemStack in this inventory.",
		"removeItem":"移除在物品栏内的指定物品堆.\n<p>\n本方法将按照你所给的物品堆的数量和种类作为参数尽可能多地移除物品堆.\n<p>\n返回的HashMap包含不能移除的物品堆，map的键\n是你所给的参数的索引值，值是在你所给的参数指定索引处的物品堆.如果\n所给的物品堆全部被移除，将返回一个空HashMap.\n<p>\n原文:Removes the given ItemStacks from the inventory.\n<p>\nIt will try to remove 'as much as possible' from the types and amounts\nyou give as arguments.\n<p>\nThe returned HashMap contains what it couldn't remove, where the key is\nthe index of the parameter, and the value is the ItemStack at that\nindex of the varargs parameter. If all the given ItemStacks are\nremoved, it will return an empty HashMap.\n<p>\nIt is known that in some implementations this method will also set the\ninputted argument amount to the number of that item not removed from\nslots.",
		"setStorageContents":"放置所给的物品堆至物品栏.\n<p>\n原文:Put the given ItemStacks into the storage slots",
		"getLocation":"获得对应于此物品栏的方块或实体的位置. 若此容器是被定制创建的或是一个虚拟的容器/子容器时可能返回null.\n<p>\n原文:Get the location of the block or entity which corresponds to this inventory. May return null if this container\nwas custom created or is a virtual / subcontainer.",
		"getName":"返回此物品栏的名字.\n<p>\n原文:Returns the name of the inventory",
		"setMaxStackSize":"此方法可以让你改变一个物品栏的最大物品堆叠数量.\n<p>\n<b>警告:</b>\n<ul>\n<li>不是所有种类的的物品栏都遵循本值。\n<li>若本值大于127，当世界保存时可能会被缩减。\n<li>本值不保证被保存；一定要在设置一个格子的最大堆叠数之前修改本值\n<li>若本值大于这种物品栏默认的大小，可能不会正确地在客户端上显示\n</ul>\n<p>\n原文:\nThis method allows you to change the maximum stack size for an\ninventory.\n<p>\n<b>Caveats:</b>\n<ul>\n<li>Not all inventories respect this value.\n<li>Stacks larger than 127 may be clipped when the world is saved.\n<li>This value is not guaranteed to be preserved; be sure to set it\n    before every time you want to set a slot over the max stack size.\n<li>Stacks larger than the default max size for this type of inventory\n    may not display correctly in the client.\n</ul>",
		"firstEmpty":"返回第一个空格子的格子数.\n<p>\n原文:\nReturns the first empty Slot.",
		"getItem":"返回在指定索引的物品堆.\n<p>\n原文:Returns the ItemStack found in the slot at the given index",
		"ClassDescription":"各种物品栏的接口。有关{@link\nMaterial#AIR}的行为时是未指定的.",
		"getViewers":"获得正在查看此物品栏的玩家. (以下翻译仅供参考，不保证准确性)注意:玩家被认为是在查看他们自己的物品栏\n和合成屏幕甚至当所说的物品栏没有打开.他们将通常被考虑为查看他们\n的物品栏甚至当他们打开了不同的物品栏，但对自定义物品栏来说有可能排除查看者\n的物品栏，所以返回的内容应该从不被呈现为非空(？？？).\n<p>\n原文:Gets a list of players viewing the inventory. Note that a player is\nconsidered to be viewing their own inventory and internal crafting\nscreen even when said inventory is not open. They will normally be\nconsidered to be viewing their inventory even when they have a\ndifferent inventory screen open, but it's possible for customized\ninventory screens to exclude the viewer's inventory, so this should\nnever be assumed to be non-empty.",
		"remove":"移除在此物品栏内与给定物品堆匹配的所有物品堆.\n<p>\n只有物品堆的种类和数目相应匹配时对应的格子才会被匹配.\n<p>\n原文:Removes all stacks in the inventory matching the given stack.\n<p>\nThis will only match a slot if both the type and the amount of the\nstack match",
		"addItem":"在物品栏存放所给的物品堆.本方法将尽可能完美地尝试填充已有的但还未达到堆叠上限的物品堆\n和空格子.\n<p>\n返回的HashMap包含不能存放的物品堆，键是你所给的参数的索引值，\n值是你所给的参数指定索引处的物品堆.如果所有物品都被存放，将返回一个空HashMap.\n<p>\n(以下翻译不保证准确性，自己试试呗)如果你传递的物品堆超过了物品的最大堆叠量,首先它们将被按\n最大堆叠量[Material.getMaxStackSize()]添加一部分.如果当没有部分的物品堆剩余时，\n物品堆将被以Inventory.getMaxStackSize()的数量分割，允许你超过那个物品的最大堆叠量.\n<p>\n已知在一些实现里本方法也将会设置输入的argument amount to the number of that item not placed in\nslots.\n<p>\n原文:Stores the given ItemStacks in the inventory. This will try to fill\nexisting stacks and empty slots as well as it can.\n<p>\nThe returned HashMap contains what it couldn't store, where the key is\nthe index of the parameter, and the value is the ItemStack at that\nindex of the varargs parameter. If all items are stored, it will return\nan empty HashMap.\n<p>\nIf you pass in ItemStacks which exceed the maximum stack size for the\nMaterial, first they will be added to partial stacks where\nMaterial.getMaxStackSize() is not exceeded, up to\nMaterial.getMaxStackSize(). When there are no partial stacks left\nstacks will be split on Inventory.getMaxStackSize() allowing you to\nexceed the maximum stack size for that material.\n<p>\nIt is known that in some implementations this method will also set\nthe inputted argument amount to the number of that item not placed in\nslots.",
		"iterator":"返回一个从指定索引开始的迭代器. 如果此索引是正数,\n那么第一次对next()的调用将返回处在那个索引的物品;\n如果索引值为负的,那么第一次对next()的调用将返回\n处在索引值(getSize() + index)的物品.\n<p>\n原文:Returns an iterator starting at the given index. If the index is\npositive, then the first call to next() will return the item at that\nindex; if it is negative, the first call to previous will return the\nitem at index (getSize() + index).",
		"getTitle":"返回此物品栏的标题.\n<p>\n原文:Returns the title of this inventory.",
		"getContents":"返回这个物品栏内的所有物品堆.\n<p>\n原文:Returns all ItemStacks from the inventory",
		"setContents":"完全地覆盖物品栏的内容.移除所有存在的内容并替换为指定的物品堆.\n<p>\n原文:Completely replaces the inventory's contents. Removes all existing\ncontents and replaces it with the ItemStacks given in the array.",
		"setItem":"在物品栏指定索引存放物品堆.\n<p>\n原文:Stores the ItemStack at the given index of the inventory.",
		"all":"查找在物品栏内的包含指定物品堆的所有格子与物品堆.只有\n物品堆的数目和种类都相同时才会匹配.\n<p>\n返回的HashMap的键是格子的索引，值是在那个格子的物品堆.如果\n没有找到指定的物品堆，将返回一个空map.\n<p>\n原文:Finds all slots in the inventory containing any ItemStacks with the\ngiven ItemStack. This will only match slots if both the type and the\namount of the stack match\n<p>\nThe HashMap contains entries where, the key is the slot index, and the\nvalue is the ItemStack in that slot. If no matching ItemStack with the\ngiven Material is found, an empty map is returned.",
		"getStorageContents":"返回.大部分情况下本方法返回的内容代表整个物品栏，\n但某些情况下返回的内容可能不包括盔甲或格子.\n<br>\n这些内容会被用于add/contains/remove方法查找指定的物品堆.\n<p>\n原文:Return the contents from the section of the inventory where items can\nreasonably be expected to be stored. In most cases this will represent\nthe entire inventory, but in some cases it may exclude armor or result\nslots.\n<br>\nIt is these contents which will be used for add / contains / remove\nmethods which look for a specific stack.",
		"clear":"清除整个物品栏.\n<p>\n原文:Clears out the whole Inventory.",
		"getSize":"返回此物品栏的大小.\n<p>\n原文:Returns the size of the inventory",
		"contains":"检测物品栏是否含有一定数量的完全匹配的物品堆.\n<p>\n如果物品堆的种类和数量都匹配时才会计数.\n<p>\n原文:Checks if the inventory contains at least the minimum amount specified\nof exactly matching ItemStacks.\n<p>\nAn ItemStack only counts if both the type and the amount of the stack\nmatch.",
		"getType":"返回这个物品栏的种类.\n<p>\n原文:Returns what type of inventory this is.",
		"containsAtLeast":"检测物品栏是否含有与所给物品堆匹配的并数量足够的物品堆.\n<p>\n原文:Checks if the inventory contains ItemStacks matching the given\nItemStack whose amounts sum to at least the minimum amount specified.",
		"first":"查找包含此物品堆的第一个格子。若物品堆的种类和数量都匹配才会匹配对应格子.\n<p>\n原文:Returns the first slot in the inventory containing an ItemStack with\nthe given stack. This will only match a slot if both the type and the\namount of the stack match",
		"getHolder":"获得此物品栏的持有者(方块或实体).\n<p>\n原文:Gets the block or entity belonging to the open inventory"
	},
	"Endermite":{},
	"PressureSensor":{},
	"Art":{
		"getBlockWidth":"得到这幅画的宽度,单位：块\n<p>\n原文：Gets the width of the painting, in blocks",
		"getById":"通过ID获得一幅画.\n<p>\n原文：Get a painting by its numeric ID",
		"getByName":"通过一幅画的唯一名称来获取这幅画,忽略大小写和下划线。\n<p>\n原文：Get a painting by its unique name.This ignores underscores and capitalization.",
		"getBlockHeight":"得到这幅画的高度,单位：块\n<p>\n原文：Gets the height of the painting, in blocks",
		"getId":"得到这幅画的ID.\n<p>\n原文：Get the ID of this painting.",
		"ClassDescription":"代表画."
	},
	"BlockExplodeEvent":{
		"blockList":"返回被炸毁的方块的列表.\r\n<p>\r\n原文：Returns the list of blocks that would have been removed or were removed\r\nfrom the explosion event.",
		"ClassDescription":"方块爆炸事件.\r\n<p>\r\n译注:{@link #getBlock()}方法返回的是引起爆炸的方块(比如TNT),并不是被炸掉的方块.",
		"setYield":"设置这次爆炸炸毁的方块掉落的可能性(小数百分比).\r\n<p>\r\n原文：Sets the percentage of blocks to drop from this explosion",
		"getYield":"返回这次爆炸炸毁的方块掉落的可能性(小数百分比). \r\n<p>\r\n原文：Returns the percentage of blocks to drop from this explosion"
	},
	"ItemDespawnEvent":{
		"getLocation":"Gets the location at which the item is despawning.",
		"ClassDescription":"This event is called when a {@link org.bukkit.entity.Item} is removed from\r\nthe world because it has existed for 5 minutes.\r\n<p>\r\nCancelling the event results in the item being allowed to exist for 5 more\r\nminutes. This behavior is not guaranteed and may change in future versions."
	},
	"Attribute":{
		"ClassDescription":"在 {@link Attributable} 里面的枚举."
	},
	"BrewerInventory":{
		"setFuel":"设置当前用来酿造的燃料.一般只有{@link Material#BLAZE_POWDER}将使用此方法.\n<p>\n原文:Set the current fuel for brewing. Generally only\n{@link Material#BLAZE_POWDER} will be of use.",
		"getFuel":"获取当前用来酿造的燃料.\n<p>\n原文:Get the current fuel for brewing.",
		"getIngredient":"获取当前酿造台的原料.\n<p>\n原文:Get the current ingredient for brewing.",
		"setIngredient":"设置当前酿造台的原料成分.\n<p>\n原文:Set the current ingredient for brewing.",
		"ClassDescription":"酿造台的用户界面接口."
	},
	"Cake":{
		"getSlicesRemaining":"获取这个蛋糕还剩多少片\r\n<p>\r\n原文:Gets the number of slices remaining on this cake",
		"setSlicesEaten":"设置这个蛋糕吃了多少片.\r\n<p>\r\n原文:Sets the number of slices eaten from this cake",
		"getSlicesEaten":"获取这个蛋糕吃了多少片\r\n<p>\r\n原文:Gets the number of slices eaten from this cake",
		"setSlicesRemaining":"设置这个蛋糕还剩多少片.\r\n<p>\r\n原文:Sets the number of slices remaining on this cake"
	},
	"EventHandler":{
		"ClassDescription":"用来标记要处理的事件的注释。"
	},
	"PlayerGameModeChangeEvent":{
		"getNewGameMode":"获取玩家切换后的游戏模式.\r\n<p>\r\n原文:Gets the GameMode the player is switched to.",
		"ClassDescription":"当玩家游戏模式发生变化时调用此事件."
	},
	"WorldLoadEvent":{
		"ClassDescription":"当一个世界被加载时调用."
	},
	"Illager":{
		"ClassDescription":"Represents a type of \"Illager\"."
	},
	"BroadcastPermissions":{},
	"PluginIdentifiableCommand":{
		"getPlugin":"获取拥有这个PluginIdentifiableCommand的插件.\r\n<p>\r\n原文:Gets the owner of this PluginIdentifiableCommand.",
		"ClassDescription":"这个接口可以用于帮助系统分类命令至基于{@link Plugin}的子索引的一部分.自定义的命令实现这个接口来拥有由插件自动生成的子索引.\r\n<p>\r\n原文:This interface is used by the help system to group commands into\r\nsub-indexes based on the {@link Plugin} they are a part of. Custom command\r\nimplementations will need to implement this interface to have a sub-index\r\nautomatically generated on the plugin's behalf."
	},
	"Dye":{
		"setColor":"设置这个染料的颜色\n<p>\n原文:\nSets the color of this dye",
		"getColor":"获取这个染料的颜色.\n<p>\n原文:Gets the current color of this dye",
		"ClassDescription":"代表染料"
	},
	"PlayerInteractAtEntityEvent":{
		"ClassDescription":"当玩家在实体上点击某实体上的某位置时触发此事件."
	},
	"ConfigurationSerializable":{
		"serialize":"Creates a Map representation of this class.\r\n<p>\r\nThis class must provide a method to restore this class, as defined in\r\nthe {@link ConfigurationSerializable} interface javadocs.",
		"ClassDescription":"Represents an object that may be serialized.\r\n<p>\r\nThese objects MUST implement one of the following, in addition to the\r\nmethods as defined by this interface:\r\n<ul>\r\n<li>A static method \"deserialize\" that accepts a single {@link Map}&lt;\r\n{@link String}, {@link Object}&gt; and returns the class.</li>\r\n<li>A static method \"valueOf\" that accepts a single {@link Map}&lt;{@link\r\nString}, {@link Object}&gt; and returns the class.</li>\r\n<li>A constructor that accepts a single {@link Map}&lt;{@link String},\r\n{@link Object}&gt;.</li>\r\n</ul>\r\nIn addition to implementing this interface, you must register the class\r\nwith {@link ConfigurationSerialization#registerClass(Class)}."
	},
	"PlayerLeashEntityEvent":{
		"getPlayer":"Returns the player involved in this event",
		"getLeashHolder":"Returns the entity that is holding the leash.",
		"ClassDescription":"Called immediately prior to a creature being leashed by a player.",
		"getEntity":"Returns the entity being leashed."
	},
	"InvalidPluginException":{
		"ClassDescription":"Thrown when attempting to load an invalid Plugin file"
	},
	"Statistic":{
		"isBlock":"检查是否为一项用于处理方块的次级统计数据.\n<p>\n这是个多余的方法，相当于检查<code>getType() == Type.BLOCK</code>.\n<p>\n原文: Checks if this is a substatistic dealing with blocks.\n<p>\nThis is a redundant method and equivalent to checking\n<code>getType() == Type.BLOCK</code>",
		"getType":"获取这项统计数据的种类.\n<p>\n原文：Gets the type of this statistic.",
		"ClassDescription":"表示被服务器监测的统计数据",
		"isSubstatistic":"检查该数据是否为次级统计数据.\n<p>\n一项次级统计数据同时存在于每个方块、物品或实体(取决于{@link #getType()}).\n<p>\n这是个多余的方法，相当于检查<code>getType() != Type.UNTYPED</code>.\n<p>\n原文：Checks if this is a substatistic.\n<p>\nA substatistic exists en masse for each block, item, or entitytype,\ndepending on {@link #getType()}.\n<p>\nThis is a redundant method and equivalent to checking\n<code>getType() != Type.UNTYPED</code>"
	},
	"ProxiedCommandSender":{
		"getCaller":"返回触发这个代理命令的CommandSender.\r\n<p>\r\n原文:Returns the CommandSender which triggered this proxied command",
		"getCallee":"返回CommandSender正在运行的命令.\r\n<p>\r\n原文:Returns the CommandSender which is being used to call the command"
	},
	"EntityEquipment":{
		"getItemInOffHandDropChance":"Gets the chance of the off hand item being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"setArmorContents":"Sets the entities armor to the provided array of ItemStacks",
		"setItemInOffHandDropChance":"Sets the chance of the off hand item being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getBootsDropChance":"Gets the chance of the boots being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"setItemInMainHand":"Sets the item the entity is holding in their main hand.",
		"ClassDescription":"An interface to a creatures inventory",
		"setItemInHand":"Sets the item the entity is holding",
		"setLeggingsDropChance":"Sets the chance of the leggings being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"setItemInOffHand":"Sets the item the entity is holding in their off hand.",
		"getHelmetDropChance":"Gets the chance of the helmet being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"setChestplate":"Sets the chest plate worn by the entity",
		"getItemInMainHandDropChance":"Gets the chance of the main hand item being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getItemInHand":"Gets a copy of the item the entity is currently holding",
		"getArmorContents":"Gets a copy of all worn armor",
		"setHelmetDropChance":"Sets the chance of the helmet being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getChestplateDropChance":"Gets the chance of the chest plate being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"setBootsDropChance":"Sets the chance of the boots being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getItemInMainHand":"Gets a copy of the item the entity is currently holding\nin their main hand.",
		"getItemInHandDropChance":"",
		"clear":"Clears the entity of all armor and held items",
		"setHelmet":"Sets the helmet worn by the entity",
		"setLeggings":"Sets the leggings worn by the entity",
		"getItemInOffHand":"Gets a copy of the item the entity is currently holding\nin their off hand.",
		"getChestplate":"Gets a copy of the chest plate currently being worn by the entity",
		"getLeggings":"Gets a copy of the leggings currently being worn by the entity",
		"setItemInMainHandDropChance":"Sets the chance of the item this creature is currently holding in their\nmain hand being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getLeggingsDropChance":"Gets the chance of the leggings being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getHelmet":"Gets a copy of the helmet currently being worn by the entity",
		"setItemInHandDropChance":"",
		"setBoots":"Sets the boots worn by the entity",
		"getBoots":"Gets a copy of the boots currently being worn by the entity",
		"setChestplateDropChance":"Sets the chance of the chest plate being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>",
		"getHolder":"Get the entity this EntityEquipment belongs to"
	},
	"Observer":{
		"ClassDescription":"Represents an observer."
	},
	"Stairs":{
		"getDescendingDirection":"",
		"setFacingDirection":"设置楼梯部分的朝向.\r\n<p>\r\n原文:Set the direction the stair part of the block is facing",
		"getFacing":"",
		"ClassDescription":"代表楼梯",
		"getAscendingDirection":"",
		"setInverted":"设置台阶的反转状态.\r\n<p>\r\n原文:Set step inverted state",
		"isInverted":"测试这个台阶是否被反转.\r\n<p>\r\n原文:Test if step is inverted"
	},
	"Fish":{
		"ClassDescription":"Represents a fishing hook."
	},
	"Team":{
		"removeEntry":"Removes the entry from this team.",
		"getName":"Gets the name of this Team",
		"canSeeFriendlyInvisibles":"Gets the team's ability to see {@link PotionEffectType#INVISIBILITY\ninvisible} teammates.",
		"getOption":"Get an option for this team",
		"ClassDescription":"A team on a scoreboard that has a common display theme and other\nproperties. This team is only relevant to the display of the associated\n{@link #getScoreboard() scoreboard}.",
		"setDisplayName":"Sets the name displayed to entries for this team",
		"setAllowFriendlyFire":"Sets the team friendly fire state",
		"hasEntry":"Checks to see if the specified entry is a member of this team.",
		"removePlayer":"Removes the player from this team.",
		"addPlayer":"This puts the specified player onto this team for the scoreboard.\n<p>\nThis will remove the player from any other team on the scoreboard.",
		"getScoreboard":"Gets the Scoreboard to which this team is attached",
		"getPlayers":"Gets the Set of players on the team",
		"setCanSeeFriendlyInvisibles":"Sets the team's ability to see {@link PotionEffectType#INVISIBILITY\ninvisible} teammates.",
		"setOption":"Set an option for this team",
		"getPrefix":"Gets the prefix prepended to the display of entries on this team.",
		"unregister":"Unregisters this team from the Scoreboard",
		"getColor":"Gets the color of the team.\n<br>\nThis only sets the team outline, other occurrences of colors such as in\nnames are handled by prefixes / suffixes.",
		"setNameTagVisibility":"Set's the team's ability to see name tags",
		"allowFriendlyFire":"Gets the team friendly fire state",
		"getSuffix":"Gets the suffix appended to the display of entries on this team.",
		"getSize":"Gets the size of the team",
		"setColor":"Sets the color of the team.\n<br>\nThis only sets the team outline, other occurrences of colors such as in\nnames are handled by prefixes / suffixes.",
		"addEntry":"This puts the specified entry onto this team for the scoreboard.\n<p>\nThis will remove the entry from any other team on the scoreboard.",
		"hasPlayer":"Checks to see if the specified player is a member of this team.",
		"getDisplayName":"Gets the name displayed to entries for this team",
		"setPrefix":"Sets the prefix prepended to the display of entries on this team.",
		"getEntries":"Gets the Set of entries on the team",
		"getNameTagVisibility":"Gets the team's ability to see name tags",
		"setSuffix":"Sets the suffix appended to the display of entries on this team."
	},
	"Wolf":{
		"isAngry":"检测狼是否愤怒.\r\n<p>\r\n原文:\r\nChecks if this wolf is angry",
		"getCollarColor":"获取这只狼的项圈颜色.\r\n<p>\r\n原文:\r\nGet the collar color of this wolf",
		"setAngry":"设置这只狼的愤怒状态.\r\n<p>\r\n愤怒的狼不能喂食或驯服,并会积极寻找目标进行攻击.\r\n<p>\r\n原文:\r\nSets the anger of this wolf.\r\n<p>\r\nAn angry wolf can not be fed or tamed, and will actively look for\r\ntargets to attack.",
		"ClassDescription":"代表狼.",
		"setCollarColor":"设置这只狼的项圈颜色.\r\n<p>\r\n原文:\r\nSet the collar color of this wolf"
	},
	"RegisteredListener":{
		"callEvent":"Calls the event executor",
		"isIgnoringCancelled":"Whether this listener accepts cancelled events",
		"getPlugin":"Gets the plugin for this registration",
		"getPriority":"Gets the priority for this registration",
		"ClassDescription":"Stores relevant information for plugin listeners",
		"getListener":"Gets the listener for this registration"
	},
	"EventPriority":{
		"ClassDescription":"代表一个事件的优先级."
	},
	"Wither":{
		"ClassDescription":"代表凋零boss."
	},
	"CraftingInventory":{
		"getMatrix":"获取合成公式.\r\n<p>\r\n原文:Get the contents of the crafting matrix.",
		"setResult":"设置最终合成品.\r\n<p>\r\n原文:Set the item in the result slot of the crafting inventory.",
		"getResult":"获取合成台产生的合成品.\r\n<p>\r\n原文:Check what item is in the result slot of this crafting inventory.",
		"getRecipe":"Get the current recipe formed on the crafting inventory, if any.",
		"setMatrix":"Replace the contents of the crafting matrix",
		"ClassDescription":"合成台的用户界面接口."
	},
	"InventoryEvent":{
		"ClassDescription":"代表与玩家相关的物品栏事件",
		"getInventory":"获取此事件涉及的主要物品栏.\r\n<p>\r\n原文:Gets the primary Inventory involved in this transaction",
		"getViewers":"获取正在查看此主要/顶部物品栏的玩家列表.\r\n<p>\r\n原文:Gets the list of players viewing the primary (upper) inventory involved\r\nin this event",
		"getView":"获取物品栏本身的 InventoryView 对象。\r\n<p>\r\n原文:Gets the view object itself"
	},
	"TreeType":{
		"ClassDescription":"树和结构的种类."
	},
	"PlayerChatEvent":{
		"setFormat":"设置用于展示这条消息的格式。\r\n<p>\r\n原文:Sets the format to use to display this chat message",
		"getMessage":"获取这个玩家尝试发送的消息。\r\n<p>\r\n原文：Gets the message that the player is attempting to send",
		"setPlayer":"设置这条消息显示成的玩家，或谁将执行这条命令.\r\n<p>\r\n原文:Sets the player that this message will display as, or command will be\r\nexecuted as",
		"getFormat":"获取用于展示这条消息的格式。\r\n<p>\r\n原文:Gets the format to use to display this chat message",
		"ClassDescription":"存储玩家聊天和命令的信息。玩家聊天/使用命令会触发本事件。",
		"setMessage":"设置这个玩家将发送的消息。\r\n<p>\r\n原文：Sets the message that the player will send",
		"getRecipients":"获取一个将被展示这条消息的玩家的集合。\r\n<p>\r\n原文:Gets a set of recipients that this chat message will be displayed to"
	},
	"HelpTopic":{
		"getFullText":"Returns the full description of this help topic that is displayed when\r\nthe user requests this topic's details.\r\n<p>\r\nThe result will be paginated to properly fit the user's client.",
		"getName":"Returns the name of this help topic.",
		"amendTopic":"Allows the server admin (or another plugin) to add or replace the\r\ncontents of a help topic.\r\n<p>\r\nA null in either parameter will leave that part of the topic unchanged.\r\nIn either amending parameter, the string {@literal <text>} is replaced\r\nwith the existing contents in the help topic. Use this to append or\r\nprepend additional content into an automatically generated help topic.",
		"amendCanSee":"Allows the server administrator to override the permission required to\r\nsee a help topic.\r\n<p>\r\nHelpTopic implementations should take this into account when\r\ndetermining topic visibility on the {@link\r\nHelpTopic#canSee(org.bukkit.command.CommandSender)} function.",
		"canSee":"Determines if a {@link Player} is allowed to see this help topic.\r\n<p>\r\nHelpTopic implementations should take server administrator wishes into\r\naccount as set by the {@link HelpTopic#amendCanSee(String)} function.",
		"applyAmendment":"Developers implementing their own custom HelpTopic implementations can\r\nuse this utility method to ensure their implementations comply with the\r\nexpected behavior of the {@link HelpTopic#amendTopic(String, String)}\r\nmethod.",
		"ClassDescription":"HelpTopic implementations are displayed to the user when the user uses the\r\n/help command.\r\n<p>\r\nCustom implementations of this class can work at two levels. A simple\r\nimplementation only needs to set the value of {@code name}, {@code\r\nshortText}, and {@code fullText} in the constructor. This base class will\r\ntake care of the rest.\r\n<p>\r\nComplex implementations can be created by overriding the behavior of all\r\nthe methods in this class.",
		"getShortText":"Returns a brief description that will be displayed in the topic index."
	},
	"Mushroom":{
		"getBlockTexture":"Gets the mushroom texture of this block.",
		"ClassDescription":"Represents a huge mushroom block with certain combinations of faces set to\ncap, pores or stem.",
		"isStem":"",
		"setStem":"Sets this to be a mushroom stem.",
		"setBlockTexture":"Sets the mushroom texture of this block.",
		"getPaintedFaces":"",
		"setFacePainted":"Set a face of the block to be painted or not. Note that due to the\nnature of how the data is stored, setting a face painted or not is not\nguaranteed to leave the other faces unchanged.",
		"isFacePainted":"Checks whether a face of the block is painted with cap texture."
	},
	"EntityTargetEvent":{
		"getTarget":"Get the entity that this is targeting.\n<p>\nThis will be null in the case that the event is called when the mob\nforgets its target.",
		"getReason":"Returns the reason for the targeting",
		"setTarget":"Set the entity that you want the mob to target instead.\n<p>\nIt is possible to be null, null will cause the entity to be\ntarget-less.\n<p>\nThis is different from cancelling the event. Cancelling the event will\ncause the entity to keep an original target, while setting to be null\nwill cause the entity to be reset.",
		"ClassDescription":"Called when a creature targets or untargets another entity"
	},
	"ConversationAbandonedListener":{
		"conversationAbandoned":"Called whenever a {@link Conversation} is abandoned.",
		"ClassDescription":""
	},
	"AttributeModifier":{
		"getName":"Get the name of this modifier.",
		"getOperation":"Get the operation this modifier will apply.",
		"ClassDescription":"Concrete implementation of an attribute modifier.",
		"getUniqueId":"Get the unique ID for this modifier.",
		"getAmount":"Get the amount by which this modifier will apply its {@link Operation}."
	},
	"AreaEffectCloud":{
		"setDuration":"设置这片云存在的时间 (单位为tick). \r\n\n原文: \r\nSets the duration which this cloud will exist for (in ticks).",
		"setDurationOnUse":"设置这片云对一个实体产生效果后持续时间应减少多少. \r\n\n原文:  \r\nSets the amount that the duration of this cloud will decrease by when it\r\napplies an effect to an entity.",
		"setBasePotionData":"设置基本药水数据.  \r\n\n原文: \r\nSets the underlying potion data",
		"setSource":"设置这片云的初始来源. \r\n\n原文: \r\nSet the original source of this cloud.",
		"setReapplicationDelay":"设置实体受到效果后的免疫时间. \r\n\n原文:  \r\nSets the time that an entity will be immune from subsequent exposure.",
		"getParticle":"获取组成这片云的粒子.  \r\n\n原文: \r\nGets the particle which this cloud will be composed of",
		"ClassDescription":"代表一片即将对处于其中的生物施加药水效果的区域效果云 (即喷溅药水使用后形成的雾). \r\n\n参考：\r\n<a href='http://minecraft-zh.gamepedia.com/%E5%8C%BA%E5%9D%97%E6%A0%BC%E5%BC%8F#AreaEffectCloud'>区块格式#AreaEffectCloud</a> \r\n<a href='http://minecraft-zh.gamepedia.com/%E6%BB%9E%E7%95%99%E8%8D%AF%E6%B0%B4'>滞留药水</a>",
		"setRadius":"设置这片云的初始半径. \r\n\n原文: \r\nSets the initial radius of the cloud.",
		"addCustomEffect":"向这片云添加一个自定义药水效果.  \r\n\n原文: \r\nAdds a custom potion effect to this cloud.",
		"getDuration":"获取这片云存在的时间 (单位为tick).  \r\n\n原文: \r\nGets the duration which this cloud will exist for (in ticks).",
		"setWaitTime":"设置实体受到效果前延迟的时间.  \r\n\n原文: \r\nSets the time which an entity has to be exposed to the cloud before the\r\neffect is applied.",
		"getRadiusPerTick":"获取每tick这片云的半径应缩小多少.  \r\n\n原文: \r\nGets the amount that the radius of this cloud will decrease by each tick.",
		"removeCustomEffect":"从这片云移除一个自定义药水效果. \r\n\n原文:  \r\nRemoves a custom potion effect from this cloud.",
		"setRadiusPerTick":"设置每一tick这片云的半径应缩小多少.  \r\n\n原文(疑似有误, get应为set):\r\nGets the amount that the radius of this cloud will decrease by each tick.",
		"getRadiusOnUse":"获取这片云对一个实体产生效果后半径应该减少多少. \r\n\n原文\r\nGets the amount that the radius of this cloud will decrease by when it\r\napplies an effect to an entity.",
		"getReapplicationDelay":"获取实体受到效果后的免疫时间.  \r\n\n原文: \r\nGets the time that an entity will be immune from subsequent exposure.",
		"hasCustomEffect":"检查这片云中是否存在一种特定的自定义药水效果类型. \r\n\n原文: \r\nChecks for a specific custom potion effect type on this cloud.",
		"getBasePotionData":"返回基本药水的药水数据. \r\n\n原文: \r\nReturns the potion data about the base potion",
		"getWaitTime":"获取实体受到效果前延迟的时间. \r\n\n原文: \r\nGets the time which an entity has to be exposed to the cloud before the\r\neffect is applied.",
		"getDurationOnUse":"获取这片云对一个实体产生效果后持续时间应减少多少. \r\n\n原文: \r\nGets the amount that the duration of this cloud will decrease by when it\r\napplies an effect to an entity.",
		"setParticle":"设置组成这片云的粒子. \r\n\n原文:  \r\nSets the particle which this cloud will be composed of",
		"getColor":"获取这片云的颜色，即粒子的颜色。\r\n\n原文: \r\nGets the color of this cloud. Will be applied as a tint to its particles.",
		"hasCustomEffects":"检查自定义药水效果是否有效. \r\n\n原文: \r\nChecks for the presence of custom potion effects.",
		"getRadius":"获取这片云的初始半径.  \r\n\n原文: \r\nGets the initial radius of the cloud.",
		"getCustomEffects":"获取一个包含这片云所有的自定义药水效果的不可变集合 (immutable list).  \r\n调用此方法前插件应确保 {@link #hasCustomEffects()} 返回true. \r\n\n原文: \r\nGets an immutable list containing all custom potion effects applied to\r\nthis cloud.\r\nPlugins should check that hasCustomEffects() returns true before calling\r\nthis method.",
		"setColor":"设置这片云的颜色, 即粒子的颜色.  \r\n\n原文: \r\nSets the color of this cloud. Will be applied as a tint to its particles.",
		"setRadiusOnUse":"设置这片云对一个实体产生效果后半径应该减少多少.  \r\n\n原文:  \r\nSets the amount that the radius of this cloud will decrease by when it\r\napplies an effect to an entity.",
		"getSource":"检索这片云的初始来源. \r\n\n原文: \r\nRetrieve the original source of this cloud.",
		"clearCustomEffects":"从这片云移除所有自定义药水效果。\r\n\n原文: \r\nRemoves all custom potion effects from this cloud."
	},
	"Slime":{
		"getSize":"",
		"setSize":"",
		"ClassDescription":"代表史莱姆."
	},
	"MinecraftFont":{
		"ClassDescription":"Represents the built-in Minecraft font."
	},
	"EnderDragonChangePhaseEvent":{
		"getNewPhase":"Gets the new phase that the dragon will switch to.",
		"ClassDescription":"Called when an EnderDragon switches controller phase.",
		"getCurrentPhase":"Gets the current phase that the dragon is in. This method will return null \nwhen a dragon is first spawned and hasn't yet been assigned a phase.",
		"setNewPhase":"Sets the new phase for the ender dragon."
	},
	"ReloadCommand":{},
	"ProjectileHitEvent":{
		"getHitBlock":"Gets the block that was hit, if it was a block that was hit.",
		"ClassDescription":"Called when a projectile hits an object",
		"getHitEntity":"Gets the entity that was hit, if it was an entity that was hit."
	},
	"FurnaceBurnEvent":{
		"getFuel":"获取这个事件中的燃料. \n<p>\n原文：Gets the fuel ItemStack for this event",
		"setBurnTime":"设置此燃料的燃烧时间. \n<p>\n原文：Sets the burn time for this fuel",
		"setBurning":"设置熔炉中的燃料是否正在燃烧. \n<p>\n原文：Sets whether the furnace's fuel is burning or not.",
		"getBurnTime":"获取此燃料的燃烧时间. \n<p>\n原文：Gets the burn time for this fuel",
		"ClassDescription":"当一个物品作为燃料被燃烧的时候触发这个事件.",
		"isBurning":"获取熔炉中的燃料是否正在燃烧. \n<p>\n原文：Gets whether the furnace's fuel is burning or not."
	},
	"BlockBreakEvent":{
		"setDropItems":"设置这个方块是否像平常那样掉落物品.\r\n<p>\r\n原文:Sets whether or not the block will drop items as it normally would.",
		"getPlayer":"获取破坏这个方块的玩家.\r\n<p>\r\n原文：Gets the Player that is breaking the block involved in this event.",
		"ClassDescription":"当一个方块被玩家破坏的时候，调用本事件.\r\n<p>\r\n如果你想要在方块被破坏之后掉落经验, 你必须设置经验值\r\n为0以上。 默认情况下, 如果满足以下条件，经验会被设置：\r\n<ol>\r\n<li>玩家不能是创造/冒险模式\r\n<li>The player can loot the block (ie: does not destroy it completely, by\r\n    using the correct tool)\r\n<li>玩家没有精准采集\r\n<li>方块在原版Minecraft中掉落经验\r\n</ol>\r\n<p>\r\n注意:\r\n插件要模拟一个方块掉落应该设置空气为方块，利用自己的方法确定方块被破坏后默认掉落什么，和要做什么。\r\n<p>\r\n如果方块破坏事件（即本事件）被取消，这个方块将不会被破坏，并且经验不会掉落。",
		"isDropItems":"获取方块是否会掉落物品.\r\n<p>\r\n原文:Gets whether or not the block will drop items."
	},
	"Event":{
		"getEventName":"获取这个事件的名称,默认情况下,他是事件的类的{@linkplain Class#getSimpleName() 简短名称}.\n<p>\n原文：Convenience method for providing a user-friendly identifier. By\ndefault, it is the event's class's {@linkplain Class#getSimpleName()\nsimple name}.",
		"ClassDescription":"代表事件.\n<p>\n所有事件需要添加一个名为 getHandlerList() 的静态方法，返回与{@link #getHandlers()}一样的{@link HandlerList}.\n<p>\n译注:说明白点，您必须把以下代码复制到您的自定义事件:\n<pre>\n    private static final HandlerList handlers = new HandlerList();\n\n    public HandlerList getHandlers() {\n        return handlers;\n    }\n\n    public static HandlerList getHandlerList() {\n        return handlers;\n    }\n</pre>",
		"isAsynchronous":"任何自定义事件应该不与其他事件同步,必须使用特定的构造器.这是对使用异步事件的一些警告(注意事项)：\n<ul>\n<li>这个事件永远不会触发内部代码触发的同步事件.尝试这么做的结果会得到{@link java.lang.IllegalStateException}.</li>\n<li>不过，异步事件处理器可能触发同步或异步事件.</li>\n<li>事件可能在多个时间任何优先级被触发.</li>\n<li>任何新注册或未注册的处理器将在一个事件开始执行后被忽略.</li>\n<li>这个事件的处理器可能阻塞一段时间.</li>\n<li>一些实现可能会有选择地声明一个事件是异步的.这一行为应被明确定义.</li>\n<li>异步调用不会计算在插件定时系统中.</li>\n</ul>\n<p>\n原文：Any custom event that should not by synchronized with other events must\nuse the specific constructor. These are the caveats of using an\nasynchronous event:\n<ul>\n<li>The event is never fired from inside code triggered by a\n    synchronous event. Attempting to do so results in an {@link\n    java.lang.IllegalStateException}.</li>\n<li>However, asynchronous event handlers may fire synchronous or\n    asynchronous events.</li>\n<li>The event may be fired multiple times simultaneously and in any\n    order.</li>\n<li>Any newly registered or unregistered handler is ignored after an\n    event starts execution.</li>\n<li>The handlers for this event may block for any length of time.\n<li>Some implementations may selectively declare a specific event use\n    as asynchronous. This behavior should be clearly defined.</li>\n<li>Asynchronous calls are not calculated in the plugin timing system.</li>\n</ul>"
	},
	"PluginMessageListener":{
		"onPluginMessageReceived":"当PluginMessageSource(插件消息源)在已注册的通道上发送了插件消息调用此方法.\r\n<p>\r\n原文：A method that will be thrown when a PluginMessageSource sends a plugin\r\nmessage on a registered channel.",
		"ClassDescription":"一个指定通道的一个监听器，将接收从客户端发送的消息的通知."
	},
	"EntityInteractEvent":{
		"getBlock":"返回实体交互的方块\r\n<p>\r\n原文:\r\nReturns the involved block",
		"ClassDescription":"当一个实体与其他物体互交时触发本事件"
	},
	"Criterias":{
		"ClassDescription":"游戏内标准计分项目（生命、击杀信息、死亡次数等）."
	},
	"PluginEnableEvent":{
		"ClassDescription":"当一个插件被启用时调用."
	},
	"BarColor":{},
	"TabCompleter":{
		"onTabComplete":"用命令传递的参数请求可能的补全项的list.\r\n<p>\r\n原文:Requests a list of possible completions for a command argument.",
		"ClassDescription":"代表可以为命令提供补全建议的类."
	},
	"Pumpkin":{
		"ClassDescription":"代表南瓜."
	},
	"PoweredRail":{
		"ClassDescription":"代表充能铁轨",
		"isPowered":"获取这个充能铁轨是否充能.",
		"setPowered":"设置这个充能铁轨是否充能.\r\n<p>\r\n原文：Set whether this PoweredRail should be powered or not."
	},
	"CachedServerIcon":{
		"ClassDescription":"这表示一个缓存版的服务器图标。这只是内部表示，还未实现。\r\n<p>\r\n原文：This is a cached version of a server-icon. It's internal representation\r\nand implementation is undefined."
	},
	"GrassSpecies":{
		"ClassDescription":"代表不同种类的草丛.",
		"getByData":"用给定值获取草丛品种.\r\n<p>\r\n原文:\r\nGets the GrassSpecies with the given data value",
		"getData":"获取相关数据代表的品种.\r\n<p>\r\n原文:\r\nGets the associated data value representing this species"
	},
	"ClickType":{
		"isRightClick":"判断这个按键类型是否使用了鼠标右键. \n<p>\n原文：Gets whether this ClickType represents a right click.",
		"isShiftClick":"判断这个按键类型是否使用了Shift键. \n<p>\n原文：Gets whether this ClickType indicates that the shift key was pressed\ndown when the click was made.",
		"isLeftClick":"判断这个按键类型是否使用了鼠标左键. \n<p>\n原文：Gets whether this ClickType represents a left click.",
		"ClassDescription":"点击类型.",
		"isCreativeAction":"判断这个按键类型所定义的操作是否只能在创造模式被执行. \n<p>\n原文：Gets whether this ClickType represents an action that can only be\nperformed by a Player in creative mode.",
		"isKeyboardClick":"判断这个按键类型是否为键盘按键. \n<p>\n原文：Gets whether this ClickType represents the pressing of a key on a\nkeyboard."
	},
	"CreatureSpawnEvent":{
		"getLocation":"返回生物出生的位置\r\n<p>\r\n原文:\r\nGets the location at which the creature is spawning.",
		"ClassDescription":"当一个生物体在世界中出生时触发该事件.\r\n<p>\r\n如果该事件被取消了,那么这个生物将不会出生.",
		"getSpawnReason":"返回生物出生的原因\r\n<p>\r\n原文:\r\nGets the reason for why the creature is being spawned."
	},
	"PlayerResourcePackStatusEvent":{
		"ClassDescription":"当玩家对通过 {@link Player#setResourcePack(java.lang.String)} 发起的资源包请求采取动作时触发本事件.",
		"getStatus":"获取这个资源包的状态.\r\n<p>\r\n原文:Gets the status of this pack."
	},
	"EnderSignal":{
		"ClassDescription":"Represents an Ender Signal, which is often created upon throwing an ender\r\neye"
	},
	"Hanging":{
		"setFacingDirection":"设置悬挂实体的方向，这可能会重写所有规则. 注意：如果结果无效，实体可能会掉落为物品.\r\n<p>\r\n原文：Sets the direction of the hanging entity, potentially overriding rules\r\nof placement. Note that if the result is not valid the object would\r\nnormally drop as an item.",
		"ClassDescription":"代表悬挂实体."
	},
	"LazyMetadataValue":{
		"eval":"Lazily evaluates the value of this metadata item.",
		"ClassDescription":"The LazyMetadataValue class implements a type of metadata that is not\r\ncomputed until another plugin asks for it.\r\n<p>\r\nBy making metadata values lazy, no computation is done by the providing\r\nplugin until absolutely necessary (if ever). Additionally,\r\nLazyMetadataValue objects cache their values internally unless overridden\r\nby a {@link CacheStrategy} or invalidated at the individual or plugin\r\nlevel. Once invalidated, the LazyMetadataValue will recompute its value\r\nwhen asked."
	},
	"Colorable":{
		"setColor":"设置这个物品的颜色.\r\n<p>\r\n原文:Sets the color of this object to the specified DyeColor.",
		"getColor":"获取这个物品的颜色.\r\n<p>\r\n原文:Gets the color of this object.",
		"ClassDescription":"代表可染色的物品."
	},
	"FixedSetPrompt":{
		"formatFixedSet":"Utility function to create a formatted string containing all the\r\noptions declared in the constructor.",
		"ClassDescription":"FixedSetPrompt is the base class for any prompt that requires a fixed set\r\nresponse from the user."
	},
	"PermissionAttachment":{
		"getRemovalCallback":"Gets the class that was previously set to be called when this\r\nattachment was removed from a {@link Permissible}. May be null.",
		"unsetPermission":"Removes the specified permission from this attachment.\r\n<p>\r\nIf the permission does not exist in this attachment, nothing will\r\nhappen.",
		"getPlugin":"Gets the plugin responsible for this attachment",
		"getPermissions":"Gets a copy of all set permissions and values contained within this\r\nattachment.\r\n<p>\r\nThis map may be modified but will not affect the attachment, as it is a\r\ncopy.",
		"ClassDescription":"Holds information about a permission attachment on a {@link Permissible}\r\nobject",
		"setPermission":"Sets a permission to the given value",
		"getPermissible":"Gets the Permissible that this is attached to",
		"setRemovalCallback":"Sets an object to be called for when this attachment is removed from a\r\n{@link Permissible}. May be null.",
		"remove":"Removes this attachment from its registered {@link Permissible}"
	},
	"PlayerBucketFillEvent":{
		"ClassDescription":"水桶装满水事件."
	},
	"DoubleChestInventory":{
		"getLeftSide":"获取这个大箱子的左半部分界面.",
		"ClassDescription":"大箱子的用户界面接口.",
		"getRightSide":"获取这个大箱子的右半部分界面"
	},
	"EntityShootBowEvent":{
		"setProjectile":"Replaces the projectile which will be launched",
		"getProjectile":"Gets the projectile which will be launched by this event",
		"getForce":"Gets the force the arrow was launched with",
		"ClassDescription":"Called when a LivingEntity shoots a bow firing an arrow",
		"getBow":"Gets the bow ItemStack used to fire the arrow."
	},
	"SimplexOctaveGenerator":{
		"setWScale":"设置每个W坐标通过的区间大小。\r\n<p>\r\n原文：Sets the scale used for each W-coordinates passed",
		"noise":"使用特殊的数个音阶和参数产生一个三维坐标的噪音。\r\n<p>\r\n原文：Generates noise for the 3D coordinates using the specified number of\r\noctaves and parameters\r\n<p>\r\n译注:根据参数的翻译 这里3D疑似打错应该是4D。",
		"ClassDescription":"使用中音阶创建基于单纯形的噪声。\r\n<p>\r\n原文：Creates simplex noise through unbiased octaves",
		"getWScale":"获取每个W坐标通过的区间大小。\r\n<p>\r\n原文：Gets the scale used for each W-coordinates passed"
	},
	"BlockProjectileSource":{
		"getBlock":"获取这个抛射物所属的方块。\r\n<p>\r\n原文：Gets the block this projectile source belongs to."
	},
	"HangingBreakEvent":{
		"ClassDescription":"当一个悬挂实体被移除时调用.",
		"getCause":"获取这个悬挂实体被移除的原因.\r\n<p>\r\n原文：Gets the cause for the hanging entity's removal"
	},
	"GameMode":{
		"getValue":"获取相关模式的游戏模式值.\r\n<p>\r\n原文:\r\nGets the mode value associated with this GameMode",
		"getByValue":"获取指定值表示的游戏模式.\r\n<p>\r\n原文:\r\nGets the GameMode represented by the specified value",
		"ClassDescription":"代表{@link HumanEntity}能有的不同种类的游戏模式."
	},
	"InventoryView":{
		"getCursor":"Get the item on the cursor of one of the viewing players.",
		"getBottomInventory":"Get the lower inventory involved in this transaction.",
		"getPlayer":"Get the player viewing.",
		"getTopInventory":"Get the upper inventory involved in this transaction.",
		"countSlots":"Check the total number of slots in this view, combining the upper and\nlower inventories.\n<p>\nNote though that it's possible for this to be greater than the sum of\nthe two inventories if for example some slots are not being used.",
		"getItem":"Gets one item in this inventory view by its raw slot ID.",
		"ClassDescription":"Represents a view linking two inventories and a single player (whose\ninventory may or may not be one of the two).\n<p>\nNote: If you implement this interface but fail to satisfy the expected\ncontracts of certain methods, there's no guarantee that the game will work\nas it should.",
		"convertSlot":"Converts a raw slot ID into its local slot ID into whichever of the two\ninventories the slot points to.\n<p>\nIf the raw slot refers to the upper inventory, it will be returned\nunchanged and thus be suitable for getTopInventory().getItem(); if it\nrefers to the lower inventory, the output will differ from the input\nand be suitable for getBottomInventory().getItem().",
		"getTitle":"Get the title of this inventory window.",
		"getType":"Determine the type of inventory involved in the transaction. This\nindicates the window style being shown. It will never return PLAYER,\nsince that is common to all windows.",
		"setProperty":"Sets an extra property of this inventory if supported by that\ninventory, for example the state of a progress bar.",
		"setCursor":"Sets the item on the cursor of one of the viewing players.",
		"close":"Closes the inventory view.",
		"setItem":"Sets one item in this inventory view by its raw slot ID.\n<p>\nNote: If slot ID -999 is chosen, it may be expected that the item is\ndropped on the ground. This is not required behaviour, however."
	},
	"Score":{
		"getPlayer":"Gets the OfflinePlayer being tracked by this Score",
		"getObjective":"Gets the Objective being tracked by this Score",
		"getScoreboard":"Gets the scoreboard for the associated objective.",
		"ClassDescription":"A score entry for an {@link #getEntry() entry} on an {@link\r\n#getObjective() objective}. Changing this will not affect any other\r\nobjective or scoreboard.",
		"getEntry":"Gets the entry being tracked by this Score",
		"getScore":"Gets the current score",
		"setScore":"Sets the current score."
	},
	"EntityDamageByEntityEvent":{
		"ClassDescription":"当一个实体受到另外一个实体伤害时触发该事件",
		"getDamager":"返回造成这次伤害的实体\r\n<p>\r\n原文:\r\nReturns the entity that damaged the defender."
	},
	"PermissionDefault":{
		"getValue":"计算此默认权限给予某op的值.\r\n<p>\r\n原文:\r\nCalculates the value of this PermissionDefault for the given operator\r\nvalue",
		"getByName":"查找一个默认权限的名称.\r\n<p>\r\n原文:\r\nLooks up a PermissionDefault by name",
		"ClassDescription":"表示权限的默认值."
	},
	"Enderman":{
		"getCarriedMaterial":"获取末影人手持的方块的id和数据.\r\n<p>\r\n原文:Get the id and data of the block that the Enderman is carrying.",
		"ClassDescription":"代表末影人.",
		"setCarriedMaterial":"设置末影人手持的方块的id和数据.\r\n<p>\r\n原文:Set the id and data of the block that the Enderman is carring."
	},
	"NetherWarts":{
		"getState":"获取这个地狱疣的生长状态.\r\n<p>\r\n原文:Gets the current growth state of this nether wart",
		"setState":"设置这个地狱疣的生长状态.\r\n<p>\r\n原文:Sets the growth state of this nether wart",
		"ClassDescription":"代表地狱疣"
	},
	"BarFlag":{},
	"SimplexNoiseGenerator":{
		"noise":"计算并返回四维的基于单纯形的噪声对于给定的四维空间坐标。\r\n<p>\r\n原文：Computes and returns the 4D simplex noise for the given coordinates in\r\n4D space",
		"ClassDescription":"产生基于单纯形的噪声。\r\n<p>\r\n原文：Generates simplex-based noise.\r\n<p>\r\n这是一个修正版的免费发布的论文，作者是Stefan Gustavson，链接：\r\n<a href=\"http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\">\r\nhttp://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>。\r\n<p>\r\n原文：This is a modified version of the freely published version in the paper by\r\nStefan Gustavson at\r\n<a href=\"http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\">\r\nhttp://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>",
		"getNoise":"计算并返回四维的基于单纯形的噪声对于给定的四维空间坐标。\r\n<p>\r\n原文：Computes and returns the 4D simplex noise for the given coordinates in\r\n4D space",
		"getInstance":"获取单独的不含种子的此类发生器的实例。\r\n<p>\r\n原文：Gets the singleton unseeded instance of this generator"
	},
	"ItemMergeEvent":{
		"getTarget":"获取主物品正在合并的物品实体.\r\n<p>\r\n原文:Gets the Item entity the main Item is being merged into."
	},
	"MapFont":{
		"setChar":"Set the sprite for a given character.",
		"getChar":"Get the sprite for a given character.",
		"getHeight":"Get the height of this font.",
		"isValid":"Check whether the given text is valid.",
		"ClassDescription":"Represents a bitmap font drawable to a map.",
		"getWidth":"Get the width of the given text as it would be rendered using this\r\nfont."
	},
	"PlayerBedEnterEvent":{
		"getBed":"返回此事件涉及的床.\r\n<p>\r\n原文:Returns the bed block involved in this event.",
		"ClassDescription":"玩家躺在床上时触发此事件."
	},
	"MainHand":{
		"ClassDescription":"Represents the chosen main hand of a player"
	},
	"PlayerNamePrompt":{
		"acceptValidatedInput":"Override this method to perform some action with the user's player name\r\nresponse.",
		"ClassDescription":"PlayerNamePrompt is the base class for any prompt that requires the player\r\nto enter another player's name."
	},
	"NPC":{
		"ClassDescription":"代表非玩家角色."
	},
	"Stray":{
		"ClassDescription":"Represents a Stray - variant of {@link Skeleton}."
	},
	"Action":{},
	"PlayerToggleSprintEvent":{
		"isSprinting":"获得玩家目前的疾跑状态(正在疾跑/没有疾跑).\r\n<p>\r\nGets whether the player is now sprinting or not.",
		"ClassDescription":"玩家切换疾跑状态时调用此事件"
	},
	"WorldCreator":{
		"environment":"设置用于创建或加载世界的环境。\r\n<p>\r\n原文：\r\nSets the environment that will be used to create or load the world",
		"generatorSettings":"获取将被创建或加载的世界的生成器的配置。\r\n<p>\r\n原文：\r\nGets the generator settings of the world that will be created or loaded",
		"seed":"设置用于创建这个世界的种子。\r\n<p>\r\n原文：\r\nSets the seed that will be used to create this world",
		"generateStructures":"获取世界是否生成建筑。\r\n<p>\r\n原文:\r\nGets whether or not structures will be generated in the world.",
		"createWorld":"使用指定的设置创建一个世界。\r\n<p>\r\n如果世界存在，它就会从磁盘被加载，一些设置可能被忽略。\r\n<p>\r\n原文：\r\nCreates a world with the specified options.\r\n<p>\r\nIf the world already exists, it will be loaded from disk and some\r\noptions may be ignored.",
		"name":"为指定的世界名创建一个新的{@link WorldCreator}。\r\n<p>\r\n原文：\r\nCreates a new {@link WorldCreator} for the given world name",
		"generator":"设置将用于创建或加载的生成器。\r\n<p>\r\n可能为null值，在这种情况下会使用这个环境的\"natural\"型生成器。\r\n<p>\r\n如果找不到指定名字的生成器，就会使用自然环境生成器以代替并且会在控制台上输出一个警告。\r\n<p>\r\n原文：\r\nSets the generator that will be used to create or load the world.\r\n<p>\r\nThis may be null, in which case the \"natural\" generator for this\r\nenvironment will be used.\r\n<p>\r\nIf the generator cannot be found for the given name, the natural\r\nenvironment generator will be used instead and a warning will be\r\nprinted to the specified output",
		"getGeneratorForName":"试图使用指定的名称获取{@link ChunkGenerator}。\r\n<p>\r\n如果生成器找不到，则会返回null并会向指定的{@link CommandSender}输出一条信息来解释原因。\r\n<p>\r\n名称的形式必须为\"plugin:id\"或\"plugin\"形式，请求的插件的\"plugin\"为一个插件的安全名称并且\"id\"是生成器的可选的唯一的标识符。\r\n<p>\r\n原文：\r\nAttempts to get the {@link ChunkGenerator} with the given name.\r\n<p>\r\nIf the generator is not found, null will be returned and a message will\r\nbe printed to the specified {@link CommandSender} explaining why.\r\n<p>\r\nThe name must be in the \"plugin:id\" notation, or optionally just\r\n\"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\r\noptional unique identifier for the generator you wish to request from\r\nthe plugin.",
		"ClassDescription":"表示可能用于创建一个世界的各种类型的设置。",
		"copy":"从指定的{@link WorldCreator}复制设置。\r\n<p>\r\n原文：\r\nCopies the options from the specified {@link WorldCreator}",
		"type":"设置将被创建或加载的世界的类型。\r\n<p>\r\n原文：\r\nSets the type of the world that will be created or loaded"
	},
	"MemorySection":{
		"ClassDescription":"A type of {@link ConfigurationSection} that is stored in memory.",
		"createPath":"Creates a relative path to the given {@link ConfigurationSection} from\nthe given relative section.\n<p>\nYou may use this method for any given {@link ConfigurationSection}, not\nonly {@link MemorySection}."
	},
	"ConversationPrefix":{
		"getPrefix":"Gets the prefix to use before each message to the player.",
		"ClassDescription":"A ConversationPrefix implementation prepends all output from the\r\nconversation to the player. The ConversationPrefix can be used to display\r\nthe plugin name or conversation status as the conversation evolves."
	},
	"ChunkSnapshot":{
		"getRawBiomeTemperature":"获取指定坐标原始生物群系的温度（范围为0.0到1.0）。\r\n原文：\r\nGet raw biome temperature (0.0-1.0) at given coordinate",
		"isSectionEmpty":"测试区块是否为空。\r\n原文：\r\nTest if section is empty",
		"getBlockTypeId":"获取区块中对应坐标方块的方块类型。\r\n原文：\r\nGet block type for block at corresponding coordinate in the chunk",
		"getBlockData":"获取区块中对应坐标方块的方块数据。\r\n原文：\r\nGet block data for block at corresponding coordinate in the chunk",
		"ClassDescription":"表示一个静态的，线程安全的方块的区块的快照。\r\n<p>\r\n目的是允许清洁高效地复制一个区块的数据，然后在另一个线程（例如，地图渲染）中处理。",
		"getCaptureFullTime":"抓取区块快照时获取世界的完整时间。\r\n原文：\r\nGet world full time when chunk snapshot was captured",
		"getWorldName":"获取指定区块所在世界的名称。\r\n原文：\r\nGets name of the world containing this chunk",
		"getX":"获取指定区块的X坐标。\r\n原文：\r\nGets the X-coordinate of this chunk",
		"getZ":"获取指定区块的Z坐标。\r\n原文：\r\nGets the Z-coordinate of this chunk",
		"getBlockSkyLight":"获取区块中对应坐标方块的天空亮度等级。\r\n原文：\r\nGet sky light level for block at corresponding coordinate in the chunk",
		"getHighestBlockYAt":"获取指定坐标最高非空气方块的Y坐标。\r\n原文：\r\nGets the highest non-air coordinate at the given coordinates",
		"getBlockEmittedLight":"获取区块中对应坐标方块的发光亮度等级。\r\n原文：\r\nGet light level emitted by block at corresponding coordinate in the\r\nchunk",
		"getBiome":"获取指定坐标的生物群系。\r\n原文：\r\nGet biome at given coordinates",
		"getRawBiomeRainfall":"获取指定坐标原始生物群系的降雨量（范围为0.0到1.0）。\r\n原文：\r\nGet raw biome rainfall (0.0-1.0) at given coordinate"
	},
	"PlayerPickupArrowEvent":{
		"getArrow":"获取玩家捡起的箭.\r\n<p>\r\n原文:Get the arrow being picked up by the player",
		"ClassDescription":"当玩家从地上捡起箭时触发本事件."
	},
	"JavaPlugin":{
		"getServer":"返回正在运行此插件的服务器对象.\n<p>\n原文:\nReturns the Server instance currently running this plugin",
		"getCommand":"获取这个插件在plugin.yml里注册的命令\n命令需要在{@link PluginDescriptionFile#getCommands()\nPluginDescriptionFile}里已被注册\n<p>\n原文:\nGets the command with the given name, specific to this plugin. Commands\nneed to be registered in the {@link PluginDescriptionFile#getCommands()\nPluginDescriptionFile} to exist at runtime.",
		"onCommand":"@inheritDoc}",
		"getClassLoader":"返回这个插件的ClassLoader.\n<p>\n原文:\nReturns the ClassLoader which holds this plugin",
		"ClassDescription":"一个Java插件的基类",
		"getDataFolder":"返回存放插件文件数据的文件夹.\n文件夹可能不存在.\n<p>\n原文:\nReturns the folder that the plugin data's files are located in. The\nfolder may not yet exist.",
		"getFile":"返回这个插件的文件.\n<p>\n原文:\nReturns the file which contains this plugin",
		"getDescription":"返回插件的plugin.yml的内容的描述信息.\n<p>\n原文:\nReturns the plugin.yaml file containing the details for this plugin",
		"getProvidingPlugin":"此方法给给定的类提供了快速访问.\n<p>\n原文:\nThis method provides fast access to the plugin that has provided the\ngiven class.",
		"getTextResource":"提供jar中文本文件的读取器.\n此方法依赖 {@link PluginAwareness.Flags#UTF8} 提供编码, 在没有\n定义的情况下, 如果指定了 {@link FileConfiguration#UTF8_OVERRIDE} 将使用UTF8编码\n否则使用系统默认的编码.\n<p>\n原文:\nProvides a reader for a text file located inside the jar. The behavior\nof this method adheres to {@link PluginAwareness.Flags#UTF8}, or if not\ndefined, uses UTF8 if {@link FileConfiguration#UTF8_OVERRIDE} is\nspecified, or system default otherwise.",
		"setEnabled":"设置插件开启的状态.\n<p>\n原文:\nSets the enabled state of this plugin",
		"isEnabled":"返回插件是否已正常启用.\n<p>\n原文:\nReturns a value indicating whether or not this plugin is currently\nenabled",
		"getPlugin":"这个方法可以通过{@link\n#getProvidingPlugin(Class) provided} 的类来快速访问插件对象 .\n这通常是创建插件对象.\n<p>\n例外:如果插件jar中的类不能继承类, 将可能是不同的jar/类加载器.\n<p>\n原文:\nThis method provides fast access to the plugin that has {@link\n#getProvidingPlugin(Class) provided} the given plugin class, which is\nusually the plugin that implemented it.\n<p>\nAn exception to this would be if plugin's jar that contained the class\ndoes not extend the class, where the intended plugin would have\nresided in a different jar / classloader.",
		"onTabComplete":"@inheritDoc}",
		"getPluginLoader":"获取这个插件关联的PluginLoader.\n<p>\n原文:\nGets the associated PluginLoader responsible for this plugin"
	},
	"Step":{
		"getTextureIndex":"",
		"ClassDescription":"代表不同种类的台阶。",
		"setInverted":"设置反转状态.\r\n<p>\r\n原文:Set step inverted state",
		"setTextureIndex":"",
		"isInverted":"看看一个台阶是否被反转了。\r\n原文:Test if step is inverted"
	},
	"EntityChangeBlockEvent":{
		"getBlock":"返回改变之前的方块(Block)类\r\n\n原文:\r\nGets the block the entity is changing",
		"getTo":"返回改变后的材料(Material)类\r\n\n原文：\r\nGets the Material that the block is changing into",
		"ClassDescription":"当一个非玩家的实体在改变方块时调用该事件。\r\n原文:\r\nCalled when any Entity, excluding players, changes a block.",
		"getData":"返回改变后的数据值\r\n\n原文:\r\nGets the data for the block that would be changed into"
	},
	"PlayerStatisticIncrementEvent":{
		"getMaterial":"如果{@link #getStatistic() getStatistic()}是关于方块或物品的统计信息，获取该统计数据的物品种类，否则返回null.\r\n<p>\r\n原文:Gets the Material if {@link #getStatistic() getStatistic()} is a block\r\nor item statistic otherwise returns null.",
		"getPreviousValue":"获取这个统计信息之前的数据值.\r\n<p>\r\n原文:Gets the previous value of the statistic.",
		"getStatistic":"获取正在增长的统计数据.\r\n<p>\r\n原文:Gets the statistic that is being incremented.",
		"getEntityType":"如果{@link #getStatistic() getStatistic()}是关于实体的统计信息，获取该统计数据的实体种类，否则返回null.\r\n<p>\r\n原文:Gets the EntityType if {@link #getStatistic() getStatistic()} is an\r\nentity statistic otherwise returns null.",
		"ClassDescription":"当玩家统计信息增长时触发本事件.\r\n<p>\r\n这个事件不会因 {@link org.bukkit.Statistic#PLAY_ONE_TICK} 或基于移动(比如玩家走动、坐矿车的距离等)的统计数据的改变而触发.",
		"getNewValue":"获取这个统计数据的新数据值.\r\n<p>\r\n原文:Gets the new value of the statistic."
	},
	"Attributable":{
		"getAttribute":"从指定的一个对象内获取对应的属性.\r\n这个方法将直接返回包含属性的对象，任何对此对象的变动将立即可见（生效）.\r\n<p>\r\n原文:Gets the specified attribute instance from the object. This instance will\r\nbe backed directly to the object and any changes will be visible at once.",
		"ClassDescription":"用于表示一个可以包含属性的对象"
	},
	"BlockPistonExtendEvent":{
		"getLength":"获取被活塞移动的方块数.\r\n<p>\r\n原文：Get the amount of blocks which will be moved while extending.",
		"ClassDescription":"活塞臂推出事件.",
		"getBlocks":"获取被活塞移动的不可改变的方块列表.\r\n<p>\r\n原文：Get an immutable list of the blocks which will be moved by the\r\nextending."
	},
	"ArmorStand":{
		"isSmall":"返回盔甲架是否缩小\r\n原文：\r\nReturns whether this armor stand is scaled\r\ndown",
		"setRightLegPose":"以{@link org.bukkit.util.EulerAngle}的形式设置盔甲架右腿的当前姿势\r\n原文：\r\nSets the armor stand's right leg's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"setItemInHand":"设置当前握持的盔甲架物品\r\n原文：\r\nSets the item the armor stand is currently\r\nholding",
		"getHeadPose":"以{@link org.bukkit.util.EulerAngle}的形式返回盔甲架头的当前姿势\r\n原文：\r\nReturns the armor stand's head's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"hasArms":"返回盔甲架是否有双臂\r\n原文：\r\nReturns whether this armor stand has arms",
		"setArms":"设置盔甲架是否有双臂\r\n原文：\r\nSets whether this armor stand has arms",
		"setBodyPose":"以{@link org.bukkit.util.EulerAngle}的形式设置盔甲架身体的当前姿势\r\n原文；\r\nSets the armor stand's body's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"setChestplate":"设置盔甲架当前穿在胸上的物品\r\n原文：\r\nSets the item currently being worn\r\nby the armor stand on its chest",
		"setHeadPose":"以{@link org.bukkit.util.EulerAngle}的形式设置盔甲架头的当前姿势\r\n原文：\r\nSets the armor stand's head's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"getBodyPose":"以{@link org.bukkit.util.EulerAngle}的形式返回盔甲架身体的当前姿势\r\n原文：\r\nReturns the armor stand's body's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"getLeftLegPose":"以{@link org.bukkit.util.EulerAngle}的形式返回盔甲架左腿的当前姿势\r\n原文：\r\nReturns the armor stand's left leg's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"getItemInHand":"返回当前握持的盔甲架物品\r\n原文：\r\nReturns the item the armor stand is\r\ncurrently holding",
		"setVisible":"设置盔甲架是否可视\r\n原文：\r\nSets whether the armor stand should be\r\nvisible or not",
		"setLeftArmPose":"以{@link org.bukkit.util.EulerAngle}的形式设置盔甲架左臂的当前姿势\r\n原文：\r\nSets the armor stand's left arm's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"setMarker":"设置盔甲架的marker属性，即是否具有非常小的碰撞箱\r\n原文：\r\nSets whether this armor stand is a marker,\r\nmeaning it has a very small collision box",
		"getRightArmPose":"以{@link org.bukkit.util.EulerAngle}的形式返回盔甲架右臂的当前姿势\r\n原文：\r\nReturns the armor stand's right arm's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"setBasePlate":"设置盔甲架是否有底盘\r\n原文：\r\nSets whether the armor stand has a\r\nbase plate",
		"setHelmet":"设置盔甲架当前穿在头上的物品\r\n原文：\r\nSets the item currently being worn\r\nby the armor stand on its head",
		"setLeggings":"设置盔甲架当前穿在腿上的物品\r\n原文：\r\nSets the item currently being worn\r\nby the armor stand on its legs",
		"getLeftArmPose":"以{@link org.bukkit.util.EulerAngle}的形式返回盔甲架左臂的当前姿势\r\n原文：\r\nReturns the armor stand's left arm's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"isVisible":"返回盔甲架是否可视\r\n原文：\r\nReturns whether the armor stand should be\r\nvisible or not",
		"hasBasePlate":"返回盔甲架是否有底盘\r\n原文：\r\nReturns whether the armor stand has\r\na base plate",
		"getChestplate":"返回盔甲架当前穿在胸上的物品\r\n原文：\r\nReturns the item currently being worn\r\nby the armor stand on its chest",
		"getLeggings":"返回盔甲架当前穿在腿上的物品\r\n原文：\r\nReturns the item currently being worn\r\nby the armor stand on its legs",
		"getHelmet":"返回盔甲架当前穿在头上的物品\r\n原文：\r\nReturns the item currently being worn\r\nby the armor stand on its head",
		"setSmall":"设置盔甲架是否缩小\r\n原文：\r\nSets whether this armor stand is scaled\r\ndown",
		"setLeftLegPose":"以{@link org.bukkit.util.EulerAngle}的形式设置盔甲架身左腿的当前姿势\r\n原文：\r\nSets the armor stand's left leg's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"setRightArmPose":"以{@link org.bukkit.util.EulerAngle}的形式设置盔甲架右臂的当前姿势\r\n原文：\r\nSets the armor stand's right arm's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"setBoots":"设置盔甲架当前穿在脚上的物品\r\n原文：\r\nSets the item currently being worn\r\nby the armor stand on its feet",
		"getRightLegPose":"以{@link org.bukkit.util.EulerAngle}的形式返回盔甲架右腿的当前姿势\r\n原文：\r\nReturns the armor stand's right leg's\r\ncurrent pose as a {@link org.bukkit.util.EulerAngle}",
		"getBoots":"返回盔甲架当前穿在脚上的物品\r\n原文；\r\nReturns the item currently being worn\r\nby the armor stand on its feet",
		"isMarker":"返回盔甲架的marker属性，即是否具有非常小的碰撞箱\r\n原文：\r\nReturns whether this armor stand is a marker,\r\nmeaning it has a very small collision box"
	},
	"Scoreboard":{
		"getEntryTeam":"获取在这个计分板上的项目队伍.\n<p>\n原文:Gets a entries Team on this Scoreboard",
		"registerNewObjective":"注册一个新的{@link Objective}在这个计分板中. \n<p>\n原文：Registers an Objective on this Scoreboard\n<p>",
		"getObjective":"得到该计分板显示在某{@link DisplaySlot}的{@link Objective}. \n<p>\n原文：Gets the Objective currently displayed in a DisplaySlot on this\nScoreboard.\n<p>",
		"ClassDescription":"代表计分板.\n翻译质量比较糟，一看就是机翻，做个标记。",
		"getScores":"获取这个计分板上的所有分数. \n<p>\n原文：Gets all scores for an entry on this Scoreboard.\n<p>",
		"getTeams":"得到这个计分板中所有的队伍. \n<p>\n原文：Gets all teams on this Scoreboard.\n<p>",
		"getObjectives":"得到所有的{@link Objective}在该计分板中. \n<p>\n原文：Gets all Objectives on this Scoreboard.\n<p>",
		"resetScores":"移除这个计分板中所有的分数(重置) .\n<p>\nRemoves all scores for an entry on this Scoreboard.\n<p>",
		"clearSlot":"清除指定的{@link DisplaySlot}位置的{@link Objective}.\n<p>\n原文：Clears any objective in the specified slot.",
		"getEntries":"Gets all entries tracked by this Scoreboard",
		"getTeam":"得到一个给定名称的队伍在该计分板中. \n<p>\n原文：Gets a Team by name on this Scoreboard.\n<p>",
		"getPlayerTeam":"获取在这个计分板上的玩家队伍.\n<p>\n原文：Gets a player's Team on this Scoreboard.\n<p>",
		"getObjectivesByCriteria":"通过{@link Objective}标准来得到在这个计分板中对应的{@link Objective}. \n<p>\n原文：Gets all Objectives of a Criteria on the Scoreboard.\n<p>",
		"registerNewTeam":"注册一个新的队伍在这个计分板中. \n<p>\n原文：Registers a Team on this Scoreboard.\n<p>",
		"getPlayers":"获取所有目标玩家追踪信息.\n<p>\nGets all players tracked by this Scoreboard.\n<p>"
	},
	"PluginCommandYamlParser":{},
	"PlayerLocaleChangeEvent":{
		"ClassDescription":"当玩家改变他们的语言设置时触发本事件.",
		"getLocale":""
	},
	"PressurePlate":{
		"ClassDescription":"代表压力板"
	},
	"VehicleMoveEvent":{
		"getTo":"获取载具新的位置.\r\n<p>\r\n原文:Get the next position.",
		"ClassDescription":"载具移动事件",
		"getFrom":"获取载具的上一个位置.\r\n<p>\r\n原文:Get the previous position."
	},
	"YamlRepresenter":{},
	"ScoreboardManager":{
		"ClassDescription":"计分板管理",
		"getMainScoreboard":"获取初始服务器计分板.\r\n<p>\r\n该计分板数据保于服务器,受/scoreboard 指令影响,\r\n显示玩家初始计分.\r\n<p>",
		"getNewScoreboard":"获取一个新的计分板，由服务器持续保存监测\r\n可受玩家、插件影响.\r\n<p>"
	},
	"StringUtil":{
		"copyPartialMatches":"Copies all elements from the iterable collection of originals to the\r\ncollection provided.",
		"startsWithIgnoreCase":"This method uses a region to check case-insensitive equality. This\r\nmeans the internal array does not need to be copied like a\r\ntoLowerCase() call would."
	},
	"SkeletonHorse":{
		"ClassDescription":"Represents a SkeletonHorse - variant of {@link AbstractHorse}."
	},
	"SandstoneType":{
		"ClassDescription":"代表三种不同的沙石.",
		"getByData":"用数据值获取沙石种类.\r\n<p>\r\n原文:\r\nGets the type of sandstone with the given data value",
		"getData":"获取沙石的数据值.\r\n<p>\r\n原文:\r\nGets the associated data value representing this type of sandstone"
	},
	"PluginClassLoader":{
		"ClassDescription":"一个插件类加载器，允许跨插件共享一个加载器."
	},
	"PolarBear":{
		"ClassDescription":"Represents a polar bear."
	},
	"RedstoneWire":{
		"ClassDescription":"代表红石线.",
		"isPowered":"这个物品有没有充能.\r\n<p>\r\n原文:Gets the current state of this Material, indicating if it's powered or\r\nunpowered"
	},
	"MerchantRecipe":{
		"setMaxUses":"Set the maximum number of uses this trade has.",
		"getUses":"Get the number of times this trade has been used.",
		"setExperienceReward":"Set whether to reward experience for the trade.",
		"getMaxUses":"Get the maximum number of uses this trade has.\n<br>\nThe maximum uses of this trade may increase when a player trades with the\nowning merchant.",
		"hasExperienceReward":"Whether to reward experience for the trade.",
		"ClassDescription":"Represents a merchant's trade.\n\nTrades can take one or two ingredients, and provide one result. The\ningredients' Itemstack amounts are respected in the trade.\n<br>\nA trade has a limited number of uses, after which the trade can no longer be\nused, unless the player uses a different trade, which will cause its maximum\nuses to increase.\n<br>\nA trade may or may not reward experience for being completed.",
		"setUses":"Set the number of times this trade has been used."
	},
	"NumericPrompt":{
		"isNumberValid":"Override this method to do further validation on the numeric player\r\ninput after the input has been determined to actually be a number.",
		"acceptValidatedInput":"Override this method to perform some action with the user's integer\r\nresponse.",
		"getInputNotNumericText":"Optionally override this method to display an additional message if the\r\nuser enters an invalid number.",
		"ClassDescription":"NumericPrompt is the base class for any prompt that requires a {@link\r\nNumber} response from the user.",
		"getFailedValidationText":"Optionally override this method to display an additional message if the\r\nuser enters an invalid numeric input."
	},
	"RemoteServerCommandEvent":{
		"ClassDescription":"这个事件当服务器RCON收到指令时调用.{@link ServerCommandEvent 了解更多}."
	},
	"Wood":{
		"getSpecies":"获取这个木头的树木种类.\n<p>\n原文:Gets the current species of this wood block",
		"ClassDescription":"代表不同种类的木头方块.",
		"getSpeciesType":"更正某些物种类型组合的方块类型.\n<p>\n原文:Correct the block type for certain species-type combinations.",
		"setSpecies":"设置木头的树木种类.\n<p>\n原文:Sets the species of this wood block"
	},
	"EntityDeathEvent":{
		"getDroppedExp":"返回这个死亡的实体掉落的经验数量.\r\n<p>\r\n这不表明这个实体有多少经验值,而是它死亡时应该被创建多少掉落的经验值\r\n<p>\r\n原文:\r\nGets how much EXP should be dropped from this death.\r\n<p>\r\nThis does not indicate how much EXP should be taken from the entity in\r\nquestion, merely how much should be created after its death.",
		"setDroppedExp":"设置这个实体死亡所掉落的经验值数量.\r\n<p>\r\n这不表明这个实体有多少经验值,而是它死亡时应该被创建多少掉落的经验值\r\n<p>\r\n原文:Sets how much EXP should be dropped from this death.\r\n<p>\r\nThis does not indicate how much EXP should be taken from the entity in\r\nquestion, merely how much should be created after its death.",
		"getDrops":"返回这实体死亡掉落物品的集合\r\n<p>\r\nGets all the items which will drop when the entity dies",
		"ClassDescription":"当任何一个实体死亡时触发本事件"
	},
	"RedstoneTorch":{
		"ClassDescription":"代表红石火把",
		"isPowered":"获取这个红石火把是否充能.\r\n<p>\r\n原文：Gets the current state of this Material, indicating if it's powered or\r\nunpowered"
	},
	"PotionMeta":{
		"setMainEffect":"移动一个药水效果至这个药水效果列表的顶端.\n<p>\n这将会使客户端上的药水名称显示成设置的药水效果.\n<p>\n译注：第一句不好理解？比如有三个效果，有个效果在最后面是最主要的效果，我们就可以把这个效果移动到最顶上，这样玩家第一眼看到的就是这个效果啦.\n<p>\n原文：Moves a potion effect to the top of the potion effect list.\n<p>\nThis causes the client to display the potion effect in the potion's\nname.",
		"setBasePotionData":"设置基础药水数据.\n<p>\n原文:Sets the underlying potion data",
		"getColor":"Gets the potion color that is set. A custom potion color will alter the\ndisplay of the potion in an inventory slot.\n<p>\nPlugins should check that hasColor() returns <code>true</code> before\ncalling this method.",
		"ClassDescription":"代表药水和有自定义药水效果的物品.",
		"hasCustomEffects":"检测这个药水是否存在药水效果.\n<p>\n原文：Checks for the presence of custom potion effects.",
		"addCustomEffect":"添加一个自定义药水效果到这个药水上.\n<p>\n原文：Adds a custom potion effect to this potion.",
		"getCustomEffects":"获取包含了这个药水存在的所有药水效果的一个不可变的列表.\n<p>\n插件应该在调用这个方法之前检查hasCustomEffects()是否返回true.\n<p>\n原文：Gets an immutable list containing all custom potion effects applied to\nthis potion.\n<p>\nPlugins should check that hasCustomEffects() returns true before\ncalling this method.",
		"hasColor":"Checks for existence of a potion color.",
		"setColor":"Sets the potion color. A custom potion color will alter the display of\nthe potion in an inventory slot.",
		"removeCustomEffect":"移除这个药水的一个自定义效果.\n<p>\n原文：Removes a custom potion effect from this potion.",
		"hasCustomEffect":"Checks for a specific custom potion effect type on this potion.",
		"getBasePotionData":"返回关于这个基础药水的药水数据.\n<p>\n原文:Returns the potion data about the base potion",
		"clearCustomEffects":"移除这个药水的全部自定义药水效果.\n<p>\n原文：Removes all custom potion effects from this potion."
	},
	"ConsoleCommandSender":{},
	"Rotation":{
		"rotateCounterClockwise":"按逆时针方向旋转90度。\r\n<p>\r\n原文：Rotate counter-clockwise by 90 degrees.",
		"rotateClockwise":"按顺时针方向旋转90度。\r\n<p>\r\n原文：Rotate clockwise by 90 degrees.",
		"ClassDescription":"指定旋转方向的枚举。"
	},
	"WaterMob":{
		"ClassDescription":"代表海洋生物."
	},
	"BlockStateMeta":{
		"hasBlockState":"返回这个物品当前是否附加BlockState. \r\n<p>\r\n原文:Returns whether the item has a block state currently\r\nattached to it.",
		"getBlockState":"返回这个物品当前附加的BlockState，如果不存在将创建一个新的.\r\n<p>\r\n这个状态是一个副本，它必须被{@link #setBlockState(org.bukkit.block.BlockState)}重新设置(或其它物品).\r\n<p>\r\n原文:Returns the currently attached block state for this\r\nitem or creates a new one if one doesn't exist.\r\n\nThe state is a copy, it must be set back (or to another\r\nitem) with {@link #setBlockState(org.bukkit.block.BlockState)}",
		"setBlockState":"将BlockState副本附加到物品上(设置这个物品的BlockState).\r\n<p>\r\n原文:Attaches a copy of the passed block state to the item."
	},
	"BlockState":{
		"getBlock":"Gets the block represented by this BlockState",
		"getWorld":"Gets the world which contains this Block",
		"getLocation":"Stores the location of this block in the provided Location object.\r\n<p>\r\nIf the provided Location is null this method does nothing and returns\r\nnull.",
		"setData":"Sets the metadata for this block",
		"setRawData":"",
		"update":"Attempts to update the block represented by this state, setting it to\r\nthe new values as defined by this state.\r\n<p>\r\nUnless force is true, this will not modify the state of a block if it\r\nis no longer the same type as it was when this state was taken. It will\r\nreturn false in this eventuality.\r\n<p>\r\nIf force is true, it will set the type of the block to match the new\r\nstate, set the state data and then return true.\r\n<p>\r\nIf applyPhysics is true, it will trigger a physics update on\r\nsurrounding blocks which could cause them to update or disappear.",
		"ClassDescription":"Represents a captured state of a block, which will not change\r\nautomatically.\r\n<p>\r\nUnlike Block, which only one object can exist per coordinate, BlockState\r\ncan exist multiple times for any given Block. Note that another plugin may\r\nchange the state of the block and you will not know, or they may change the\r\nblock to another type entirely, causing your BlockState to become invalid.",
		"setTypeId":"Sets the type-id of this block",
		"setType":"Sets the type of this block",
		"isPlaced":"Returns whether this state is placed in the world.\r\n\nSome methods will not work if the blockState isn't\r\nplaced in the world.",
		"getTypeId":"Gets the type-id of this block",
		"getX":"Gets the x-coordinate of this block",
		"getY":"Gets the y-coordinate of this block",
		"getZ":"Gets the z-coordinate of this block",
		"getType":"Gets the type of this block",
		"getChunk":"Gets the chunk which contains this block",
		"getLightLevel":"Gets the light level between 0-15",
		"getRawData":"",
		"getData":"Gets the metadata for this block"
	},
	"CoalType":{
		"ClassDescription":"代表两种煤.",
		"getByData":"用数据值获取煤的类型.\r\n<p>\r\n原文:\r\nGets the type of coal with the given data value",
		"getData":"获取表示该类型的煤的相关数据值.\r\n<p>\r\n原文:\r\nGets the associated data value representing this type of coal\r\n获取煤的数据值"
	},
	"EventExecutor":{
		"ClassDescription":"定义了事件调用插件的类的接口。"
	},
	"SimpleServicesManager":{
		"isProvidedFor":"Returns whether a provider has been registered for a service.",
		"load":"Queries for a provider. This may return if no provider has been\r\nregistered for a service. The highest priority provider is returned.",
		"getKnownServices":"Get a list of known services. A service is known if it has registered\r\nproviders for it.",
		"unregister":"Unregister a particular provider.",
		"getRegistration":"Queries for a provider registration. This may return if no provider\r\nhas been registered for a service.",
		"unregisterAll":"Unregister all the providers registered by a particular plugin.",
		"ClassDescription":"A simple services manager.",
		"getRegistrations":"Get registrations of providers for a service. The returned list is\r\nan unmodifiable copy.",
		"register":"Register a provider of a service."
	},
	"MapRenderer":{
		"isContextual":"Get whether the renderer is contextual, i.e. has different canvases for\r\ndifferent players.",
		"ClassDescription":"Represents a renderer for a map.",
		"initialize":"Initialize this MapRenderer for the given map.",
		"render":"Render to the given map."
	},
	"WorldEvent":{
		"getWorld":"获取这个事件主要涉及的世界.\r\n<p>\r\n原文:\r\nGets the world primarily involved with this event",
		"ClassDescription":"代表世界范围内的事件."
	},
	"OctaveGenerator":{
		"getZScale":"获取每个Z坐标通过的区间大小。\r\n<p>\r\n原文：Gets the scale used for each Z-coordinates passed",
		"getXScale":"获取每个X坐标通过的区间大小。\r\n<p>\r\n原文：Gets the scale used for each X-coordinates passed",
		"setXScale":"设置每个X坐标通过的区间大小。\r\n<p>\r\n原文：Sets the scale used for each X-coordinates passed",
		"setYScale":"设置每个Y坐标通过的区间大小。\r\n<p>\r\n原文：Sets the scale used for each Y-coordinates passed",
		"setScale":"设置用于此生成器的所有坐标的区间大小。\r\n<p>\r\n原文：Sets the scale used for all coordinates passed to this generator.\r\n<p>\r\n这相当于将每一个坐标设置为指定的值。\r\n<p>\r\n原文：This is the equivalent to setting each coordinate to the specified\r\nvalue.",
		"getYScale":"获取每个Y坐标通过的区间大小。\r\n<p>\r\n原文：Gets the scale used for each Y-coordinates passed",
		"noise":"使用特殊的数个音阶和参数产生一个3维坐标的噪音。\r\n<p>\r\n原文：Generates noise for the 3D coordinates using the specified number of\r\noctaves and parameters",
		"setZScale":"设置每个Z坐标通过的区间大小。\r\n<p>\r\n原文：Sets the scale used for each Z-coordinates passed",
		"ClassDescription":"使用中音阶创建一个噪音。\r\n<p>\r\n原文：Creates noise using unbiased octaves",
		"getOctaves":"获取一个复制的单个音阶在这个生成器内使用。\r\n<p>\r\n原文：Gets a clone of the individual octaves used within this generator"
	},
	"PlayerPickupItemEvent":{
		"getRemaining":"获得地面剩余掉落物品数量(如果有的话).\r\n<p>\r\n原文:Gets the amount remaining on the ground, if any",
		"getItem":"获得此玩家在地面捡起的物品.\r\n<p>\r\n原文:Gets the Item picked up by the player.",
		"ClassDescription":"玩家捡起掉落物品事件."
	},
	"Wool":{
		"setColor":"设置颜色。\r\n<p>\r\n原文：Sets the color of this dye",
		"getColor":"获取颜色。\r\n<p>\r\n原文：Gets the current color of this dye",
		"ClassDescription":"代表羊毛/地毯方块。"
	},
	"VillagerReplenishTradeEvent":{
		"setRecipe":"Set the recipe to replenish.",
		"getRecipe":"Get the recipe to replenish.",
		"setBonus":"Set the bonus uses added.",
		"ClassDescription":"Called when a villager's trade's maximum uses is increased, due to a player's\ntrade.",
		"getBonus":"Get the bonus uses added. The maximum uses of the recipe will be\nincreased by this number."
	},
	"Location":{
		"getWorld":"获取该location对象所在的世界名\r\n<p>\r\n原文:Gets the world that this location resides in",
		"setY":"设置该Location对象中的Y轴数据",
		"setX":"设置该Location对象中的X坐标数据\r\n<p>\r\n原文:Sets the x-coordinate of this location",
		"getDirection":"Gets a unit-vector pointing in the direction that this Location is\r\nfacing.",
		"distance":"Get the distance between this location and another. The value of this\r\nmethod is not cached and uses a costly square-root function, so do not\r\nrepeatedly call this method to get the location's magnitude. NaN will\r\nbe returned if the inner result of the sqrt() function overflows, which\r\nwill be caused if the distance is too long.",
		"toVector":"Constructs a new {@link Vector} based on this Location",
		"ClassDescription":"世界中的三维位置,包含x,y,z\r\n<p>\r\n原文:Represents a 3-dimensional position in a world.\r\n<br>\r\nNo constraints are placed on any angular values other than that they be\r\nspecified in degrees. This means that negative angles or angles of greater\r\nmagnitude than 360 are valid, but may be normalized to any other equivalent\r\nrepresentation by the implementation.",
		"setZ":"设置该Location对象中的Z坐标数据",
		"zero":"Zero this location's components. Not world-aware.",
		"distanceSquared":"Get the squared distance between this location and another.",
		"checkFinite":"Check if each component of this Location is finite.",
		"getBlockZ":"获取该Location对象中的Z轴坐标,以方块为单位",
		"getBlockY":"获取该方块的Y轴坐标,以方块为单位?\r\n<p>\r\n原文:Gets the floored value of the Y component, indicating the block that\r\n<p>\r\nthis location is contained with.",
		"getBlockX":"获取该方块的X轴坐标,以方块为单位?\r\n<p>\r\n原文:Gets the floored value of the X component, indicating the block that\r\n<p>\r\nthis location is contained with.",
		"setDirection":"Sets the {@link #getYaw() yaw} and {@link #getPitch() pitch} to point\r\nin the direction of the vector.",
		"multiply":"Performs scalar multiplication, multiplying all components with a\r\nscalar. Not world-aware.",
		"deserialize":"Required method for deserialization",
		"add":"Adds the location by another. Not world-aware.",
		"getBlock":"获取该方块的Location对象信息\r\n<p>\r\n原文:Gets the block at the represented location",
		"lengthSquared":"Gets the magnitude of the location squared. Not world-aware and\r\norientation independent.",
		"subtract":"Subtracts the location by another. Not world-aware and\r\norientation independent.",
		"length":"Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The\r\nvalue of this method is not cached and uses a costly square-root\r\nfunction, so do not repeatedly call this method to get the location's\r\nmagnitude. NaN will be returned if the inner result of the sqrt()\r\nfunction overflows, which will be caused if the length is too long. Not\r\nworld-aware and orientation independent.",
		"setYaw":"设置该Location对象的在X轴平面上的旋转角度, 以度为单位\r\n<p>\r\n原文: * Sets the yaw of this location, measured in degrees.\r\n<ul>\r\n<li>旋转值为0或360度表示正Z轴正方向\r\n<li>旋转值为180度表示正Z轴负方向\r\n<li>旋转值为90度表示正X轴负方向\r\n<li>旋转值为270度表示正X轴正方向\r\n</ul>\r\n<p>\r\n原文:<ul>\r\n<li>A yaw of 0 or 360 represents the positive z direction.\r\n<li>A yaw of 180 represents the negative z direction.\r\n<li>A yaw of 90 represents the negative x direction.\r\n<li>A yaw of 270 represents the positive x direction.\r\n</ul>\r\nIncreasing yaw values are the equivalent of turning to your\r\nright-facing, increasing the scale of the next respective axis, and\r\ndecreasing the scale of the previous axis.",
		"getYaw":"Gets the yaw of this location, measured in degrees.\r\n<ul>\r\n<li>A yaw of 0 or 360 represents the positive z direction.\r\n<li>A yaw of 180 represents the negative z direction.\r\n<li>A yaw of 90 represents the negative x direction.\r\n<li>A yaw of 270 represents the positive x direction.\r\n</ul>\r\nIncreasing yaw values are the equivalent of turning to your\r\nright-facing, increasing the scale of the next respective axis, and\r\ndecreasing the scale of the previous axis.",
		"getX":"获取该Location对象中的X坐标",
		"getY":"获取该Location对象中的Y坐标",
		"getPitch":"Gets the pitch of this location, measured in degrees.\r\n<ul>\r\n<li>A pitch of 0 represents level forward facing.\r\n<li>A pitch of 90 represents downward facing, or negative y\r\n    direction.\r\n<li>A pitch of -90 represents upward facing, or positive y direction.\r\n</ul>\r\nIncreasing pitch values the equivalent of looking down.",
		"getZ":"获取该Location对象中的Z轴坐标",
		"locToBlock":"把double类型数值(位置坐标)安全地转换为int类型数值(方块坐标).\r\n<p>\r\n原文:Safely converts a double (location coordinate) to an int (block\r\ncoordinate)",
		"getChunk":"获取该Chunk的Location对象信息\r\n<p>\r\n原文:Gets the chunk at the represented location",
		"setPitch":"Sets the pitch of this location, measured in degrees.\r\n<ul>\r\n<li>A pitch of 0 represents level forward facing.\r\n<li>A pitch of 90 represents downward facing, or negative y\r\n    direction.\r\n<li>A pitch of -90 represents upward facing, or positive y direction.\r\n</ul>\r\nIncreasing pitch values the equivalent of looking down.",
		"setWorld":"Sets the world that this location resides in"
	},
	"DragType":{
		"ClassDescription":"在物品栏中拖动物品的拖动类型."
	},
	"JavaPluginLoader":{
		"ClassDescription":"Represents a Java plugin loader, allowing plugins in the form of .jar"
	},
	"ComplexEntityPart":{
		"getParent":"Gets the parent {@link ComplexLivingEntity} of this part.",
		"ClassDescription":"Represents a single part of a {@link ComplexLivingEntity}"
	},
	"InactivityConversationCanceller":{
		"startTimer":"Starts an inactivity timer.",
		"stopTimer":"Stops the active inactivity timer.",
		"ClassDescription":"An InactivityConversationCanceller will cancel a {@link Conversation} after\r\na period of inactivity by the user.",
		"cancelling":"Subclasses of InactivityConversationCanceller can override this method\r\nto take additional actions when the inactivity timer abandons the\r\nconversation."
	},
	"VersionCommand":{},
	"BlockFace":{
		"ClassDescription":"代表方块的朝向.",
		"getModX":"获取X坐标的数值来修改，以获得表示的方块.\r\n<p>\r\n原文:\r\nGet the amount of X-coordinates to modify to get the represented block",
		"getModY":"获取Y坐标的数值来修改，以获得表示的方块.\r\n<p>\r\n原文:\r\nGet the amount of Y-coordinates to modify to get the represented block"
	},
	"Cancellable":{
		"isCancelled":"获取这个事件是否被取消.一个被取消的事件不会在服务器里被执行，但是仍然会传递事件到其他插件。\r\n<p>\r\n原文：Gets the cancellation state of this event. A cancelled event will not\r\nbe executed in the server, but will still pass to other plugins",
		"setCancelled":"取消这个事件. 一个被取消的事件不会在\r\n服务器里被执行，但是仍然会传递事件到其他插件。\r\n<p>\r\n原文：Sets the cancellation state of this event. A cancelled event will not\r\nbe executed in the server, but will still pass to other plugins."
	},
	"SheepRegrowWoolEvent":{
		"ClassDescription":"Called when a sheep regrows its wool"
	},
	"FurnaceRecipe":{
		"getResult":"获取该冶炼公式的冶炼生成物Item.\n<p>\n原料:Get the result of this recipe.",
		"setExperience":"Sets the experience given by this recipe.",
		"getExperience":"Get the experience given by this recipe.",
		"ClassDescription":"熔炉冶炼公式.\n<p>\n原文:Represents a smelting recipe.",
		"getInput":"获取该冶炼公式的冶炼原料.\n<p>\n原文:Get the input material.",
		"setInput":"设置此冶炼公式的原料.\n<p>\n原文:Sets the input of this furnace recipe."
	},
	"FurnaceSmeltEvent":{
		"setResult":"设置熔炼产物. \n<p>\n原文：Sets the resultant ItemStack for this event",
		"getSource":"获取被熔炼的物品. \n<p>\n原文：Gets the smelted ItemStack for this event",
		"getResult":"获取熔炼产物. \n<p>\n原文：Gets the resultant ItemStack for this event",
		"ClassDescription":"当一个物品被熔炼完毕时触发这个事件."
	},
	"Openable":{
		"setOpen":"设置这个门是否开着.\r\n<p>\r\n原文：Configure this door to be either open or closed;",
		"isOpen":"检测这个门是否开着.\r\n<p>\r\n原文：Check to see if the door is open."
	},
	"Torch":{
		"getAttachedFace":"获取这个火把附着的朝向.\r\n<p>\r\n原文：Gets the face that this block is attached on",
		"ClassDescription":"代表火把"
	},
	"Nameable":{
		"getCustomName":"获取生物或方块的自定义名称，若无则返回null.\n<p>\n这个方法对玩家没有作用，玩家将一直使用他们的真名.\n<p>\n原文：\n<p>\nGets the custom name on a mob or block. If there is no name this method\nwill return null.\n<p>\nThis value has no effect on players, they will always use their real\nname.",
		"setCustomName":"设置生物或方块的自定义名称，该名称可被用于死亡信息，且能作为生物头顶的标签内容被发送到客户端.\n<p> \n设置为空字符串或者null将会清除该生物或方块的自定义名称.\n<p>\n这个方法对玩家没有作用，玩家将一直使用他们的真名.\n<p>\n原文：\n<p>\nSets a custom name on a mob or block. This name will be used in death\nmessages and can be sent to the client as a nameplate over the mob.\n<p>\nSetting the name to null or an empty string will clear it.\n<p>\nThis value has no effect on players, they will always use their real\nname."
	},
	"Item":{
		"setPickupDelay":"Sets the delay before this Item is available to be picked up by players",
		"ClassDescription":"Represents an Item.",
		"getItemStack":"Gets the item stack associated with this item drop.",
		"setItemStack":"Sets the item stack associated with this item drop.",
		"getPickupDelay":"Gets the delay before this Item is available to be picked up by players"
	},
	"HorseJumpEvent":{
		"getPower":"Gets the power of the jump.\r\n<p>\r\nPower is a value that defines how much of the horse's jump strength\r\nshould be used for the jump. Power is effectively multiplied times\r\nthe horse's jump strength to determine how high the jump is; 0\r\nrepresents no jump strength while 1 represents full jump strength.\r\nSetting power to a value above 1 will use additional jump strength\r\nthat the horse does not usually have.\r\n<p>\r\nPower does not affect how high the horse is capable of jumping, only\r\nhow much of its jumping capability will be used in this jump. To set\r\nthe horse's overall jump strength, see {@link\r\nAbstractHorse#setJumpStrength(double)}.",
		"setCancelled":"",
		"setPower":"Sets the power of the jump.\r\n<p>\r\nJump power can be set to a value above 1.0 which will increase the\r\nstrength of this jump above the horse's actual jump strength.\r\n<p>\r\nSetting the jump power to 0 will result in the jump animation still\r\nplaying, but the horse not leaving the ground. Only canceling this\r\nevent will result in no jump animation at all.",
		"ClassDescription":"当马跳起时调用此事件."
	},
	"Fireball":{
		"getDirection":"Retrieve the direction this fireball is heading toward",
		"ClassDescription":"Represents a Fireball.",
		"setDirection":"Fireballs fly straight and do not take setVelocity(...) well."
	},
	"ExplosionPrimeEvent":{
		"setFire":"Sets whether this explosion will create fire or not",
		"getFire":"Gets whether this explosion will create fire or not",
		"ClassDescription":"Called when an entity has made a decision to explode.",
		"getRadius":"Gets the radius of the explosion",
		"setRadius":"Sets the radius of the explosion"
	},
	"Villager":{
		"getRiches":"Gets this villager's riches, the number of emeralds this villager has\nbeen given.",
		"setRiches":"Sets this villager's riches.",
		"ClassDescription":"Represents a villager NPC",
		"getInventory":"Gets this villager's inventory.\n<br>\nNote that this inventory is not the Merchant inventory, rather, it is the\nitems that a villager might have collected (from harvesting crops, etc.)\n\n{@inheritDoc}",
		"getProfession":"Gets the current profession of this villager.",
		"setProfession":"Sets the new profession of this villager."
	},
	"ThrownPotion":{
		"getEffects":"Returns the effects that are applied by this potion.",
		"getItem":"Returns a copy of the ItemStack for this thrown potion.\r\n<p>\r\nAltering this copy will not alter the thrown potion directly. If you\r\nwant to alter the thrown potion, you must use the {@link\r\n#setItem(ItemStack) setItemStack} method.",
		"ClassDescription":"Represents a thrown potion bottle",
		"setItem":"Set the ItemStack for this thrown potion.\r\n<p>\r\nThe ItemStack must be a potion, otherwise an exception is thrown."
	},
	"MapView":{
		"getWorld":"Get the world that this map is associated with. Primarily used by the\r\ninternal renderer, but may be used by external renderers. May return\r\nnull if the world the map is associated with is not loaded.",
		"setCenterX":"Set the center X position of this map.",
		"setUnlimitedTracking":"Whether the map will show a smaller position cursor (true), or no\r\nposition cursor (false) when cursor is outside of map's range.",
		"setScale":"Set the scale of this map.",
		"setCenterZ":"Set the center Z position of this map.",
		"getId":"Get the ID of this map item. Corresponds to the damage value of a map\r\nin an inventory.",
		"addRenderer":"Add a renderer to this map.",
		"ClassDescription":"Represents a map item.",
		"getRenderers":"Get a list of MapRenderers currently in effect.",
		"removeRenderer":"Remove a renderer from this map.",
		"getScale":"Get the scale of this map.",
		"isUnlimitedTracking":"Whether the map will show a smaller position cursor (true), or no\r\nposition cursor (false) when cursor is outside of map's range.",
		"isVirtual":"Check whether this map is virtual. A map is virtual if its lowermost\r\nMapRenderer is plugin-provided.",
		"getCenterZ":"Get the center Z position of this map.",
		"setWorld":"Set the world that this map is associated with. The world is used by\r\nthe internal renderer, and may also be used by external renderers.",
		"getCenterX":"Get the center X position of this map."
	},
	"OfflinePlayer":{
		"getPlayer":"获取一个 {@link Player}对象\r\n<p>\r\n原文:Gets a {@link Player} object that this represents, if there is one\r\n<p>\r\n如果玩家在线,返回Player对象数据,反之返回null",
		"getName":"返回该玩家的游戏名\r\n<p>\r\n游戏名并不再是唯一的游戏标识,如果你希望长时间储存,建议使用{@link #getUniqueId()}来替代\r\n<p>\r\n原文:Names are no longer unique past a single game session. For persistent storage\r\n<p>\r\nit is recommended that you use {@link #getUniqueId()} instead.",
		"hasPlayedBefore":"检测该玩家是否在先前在此服游戏过\r\n<p>\r\n原文:Checks if this player has played on this server before.",
		"getFirstPlayed":"获取该玩家第一次进入服务器的时间\r\n<p>\r\n原文:Gets the first date and time that this player was witnessed on this\r\nserver.\r\n<p>\r\n返回自1970年1月1日0日0分距当前时间的毫秒数.但如果该玩家从未进入服务器,则会返回0\r\n<p>\r\nIf the player has never played before, this will return 0. Otherwise,\r\nit will be the amount of milliseconds since midnight, January 1, 1970\r\nUTC.",
		"getBedSpawnLocation":"获取该玩家在床的重生点的Location对象,但如果该玩家从未使用过床或该重生点无效,则会返回null\r\n<p>\r\n原文:Gets the Location where the player will spawn at their bed, null if\r\nthey have not slept in one or their current bed spawn is invalid.",
		"getLastPlayed":"获取该玩家最后一次登录服务器的时间\r\n<p>\r\n原文:Gets the last date and time that this player was witnessed on this\r\nserver.\r\n<p>\r\n返回自1970年1月1日0日0分距当前时间的毫秒数.但如果该玩家从未进入服务器,则会返回0\r\n<p>\r\n原文:If the player has never played before, this will return 0. Otherwise,\r\nit will be the amount of milliseconds since midnight, January 1, 1970\r\nUTC.",
		"isOnline":"检查玩家是否在线\r\n<p>\r\n原文:Checks if this player is currently online",
		"isBanned":"检测该玩家是否被封禁",
		"isWhitelisted":"检测玩家是否存在白名单列表中",
		"setWhitelisted":"将玩家添加到白名单列表或移除",
		"getUniqueId":"返回该玩家的游戏UUID标识"
	},
	"HorseInventory":{
		"getArmor":"获取马匹的盔甲Item项目.\r\n<p>\r\n原文:Gets the item in the horse's armor slot.",
		"setArmor":"设置马匹的盔甲Item项目.\r\n<p>\r\n原文:Sets the item in the horse's armor slot.",
		"setSaddle":"设置马匹的马鞍Item项目.\r\n<p>\r\n原文:Sets the item in the horse's saddle slot.",
		"getSaddle":"获取马匹的马鞍Item项目.\r\n<p>\r\n原文:Gets the item in the horse's saddle slot.",
		"ClassDescription":"马匹的用户界面接口.\r\n<p>\r\n原文:An interface to the inventory of a Horse."
	},
	"IndexHelpTopic":{
		"buildIndexLine":"Builds individual lines in the index topic. Override this method to\r\nchange how index lines are rendered.",
		"setTopicsCollection":"Sets the contents of the internal allTopics collection.",
		"ClassDescription":"This help topic generates a list of other help topics. This class is useful\r\nfor adding your own index help topics. To enforce a particular order, use a\r\nsorted collection.\r\n<p>\r\nIf a preamble is provided to the constructor, that text will be displayed\r\nbefore the first item in the index.",
		"buildPreamble":"Builds the topic preamble. Override this method to change how the index\r\npreamble looks."
	},
	"MapCursorCollection":{
		"getCursor":"Get a cursor from this collection.",
		"size":"Get the amount of cursors in this collection.",
		"removeCursor":"Remove a cursor from the collection.",
		"addCursor":"Add a cursor to the collection.",
		"ClassDescription":"Represents all the map cursors on a {@link MapCanvas}. Like MapCanvas, a\r\nMapCursorCollection is linked to a specific {@link MapRenderer}."
	},
	"MushroomCow":{
		"ClassDescription":"代表哞菇( {@link Cow} )."
	},
	"SoundCategory":{
		"ClassDescription":"An Enum of categories for sounds."
	},
	"ConfigurationSerialization":{
		"unregisterClass":"Unregisters any aliases for the specified {@link\r\nConfigurationSerializable} class",
		"getClassByAlias":"Attempts to get a registered {@link ConfigurationSerializable} class by\r\nits alias",
		"deserializeObject":"Attempts to deserialize the given arguments into a new instance of the\r\ngiven class.\r\n<p>\r\nThe class must implement {@link ConfigurationSerializable}, including\r\nthe extra methods as specified in the javadoc of\r\nConfigurationSerializable.\r\n<p>\r\nIf a new instance could not be made, an example being the class not\r\nfully implementing the interface, null will be returned.",
		"ClassDescription":"Utility class for storing and retrieving classes for {@link Configuration}.",
		"registerClass":"Registers the given alias to the specified {@link\r\nConfigurationSerializable} class",
		"getAlias":"Gets the correct alias for the given {@link ConfigurationSerializable}\r\nclass"
	},
	"PotionEffectType":{
		"registerPotionEffectType":"Registers an effect type with the given object.\n<p>\nGenerally not to be used from within a plugin.",
		"getName":"Returns the name of this effect type.",
		"getById":"Gets the effect type specified by the unique id.",
		"createEffect":"Creates a PotionEffect from this PotionEffectType, applying duration\nmodifiers and checks.",
		"values":"Returns an array of all the registered {@link PotionEffectType}s.\nThis array is not necessarily in any particular order and may contain null.",
		"isInstant":"Returns whether the effect of this type happens once, immediately.",
		"getByName":"Gets the effect type specified by the given name.",
		"getColor":"Returns the color of this effect type.",
		"getId":"Returns the unique ID of this type.",
		"stopAcceptingRegistrations":"Stops accepting any effect type registrations.",
		"ClassDescription":"Represents a type of potion and its effect on an entity.",
		"getDurationModifier":"Returns the duration modifier applied to effects of this type."
	},
	"PlayerEvent":{
		"getPlayer":"返回哪个玩家触发了此事件.\r\n<p>\r\n原文:Returns the player involved in this event",
		"ClassDescription":"代表玩家事件."
	},
	"Conversable":{
		"acceptConversationInput":"Accepts input into the active conversation. If no conversation is in\r\nprogress, this method does nothing.",
		"beginConversation":"Enters into a dialog with a Conversation object.",
		"sendRawMessage":"Sends this sender a message raw",
		"ClassDescription":"The Conversable interface is used to indicate objects that can have\r\nconversations.",
		"isConversing":"Tests to see of a Conversable object is actively engaged in a\r\nconversation.",
		"abandonConversation":"Abandons an active conversation."
	},
	"LingeringPotion":{
		"ClassDescription":"Represents a thrown lingering potion bottle"
	},
	"FireworkMeta":{
		"clearEffects":"Remove all effects from this firework.",
		"getEffects":"Get the effects in this firework.",
		"getPower":"Gets the approximate height the firework will fly.",
		"removeEffect":"Remove an effect from this firework.",
		"getEffectsSize":"Get the number of effects in this firework.",
		"setPower":"Sets the approximate power of the firework. Each level of power is half\r\na second of flight time.",
		"ClassDescription":"Represents a {@link Material#FIREWORK} and its effects.",
		"addEffect":"Add another effect to this firework.",
		"addEffects":"Add several firework effects to this firework.",
		"hasEffects":"Get whether this firework has any effects."
	},
	"InvalidDescriptionException":{
		"ClassDescription":"Thrown when attempting to load an invalid PluginDescriptionFile"
	},
	"ServiceUnregisterEvent":{
		"ClassDescription":"当一个服务注销时调用.\r\n<p>\r\n注意:注册和注销的事件顺序不互相依赖."
	},
	"Messenger":{
		"unregisterIncomingPluginChannel":"注销指定插件在所有监听器上监听的插件通道.\r\n<p>\r\n原文：Unregisters the specific plugin from listening on all plugin channels\r\nthrough all listeners.",
		"getIncomingChannels":"获取一个包含了指定插件注册的所有接收的插件通道的set集合.\r\n<p>\r\n原文：Gets a set containing all the incoming plugin channels that the\r\nspecified plugin is registered for.",
		"isReservedChannel":"检测指定的通道名称是否为保留名称.\r\n<p>\r\n原文：Checks if the specified channel is a reserved name.",
		"dispatchIncomingMessage":"调度指定接收消息的任何注册过的监听器.\r\n<p>\r\n原文：Dispatches the specified incoming message to any registered listeners.",
		"ClassDescription":"负责管理注册插件通道和监听器的类.",
		"unregisterOutgoingPluginChannel":"注销指定插件的所有向外发送插件通道，不再允许它发送任何插件消息.\r\n<p>\r\n原文：Unregisters the specific plugin from all outgoing plugin channels, no\r\nlonger allowing it to send any plugin messages.",
		"isOutgoingChannelRegistered":"检测指定插件注册的发送的消息是否通过了请求的通道.\r\n<p>\r\n译注：按方法名来看，应该是检测指定正在发送的通道是否在这个插件上注册过.\r\n<p>\r\n原文：Checks if the specified plugin has registered to send outgoing messages\r\nthrough the requested channel.",
		"getOutgoingChannels":"获取一个包含了指定插件注册的全部向外发送的插件通道的set集合.\r\n<p>\r\n原文：Gets a set containing all the outgoing plugin channels that the\r\nspecified plugin is registered to.",
		"registerOutgoingPluginChannel":"注册指定插件所请求的发送插件通道，允许它通过这个通道向任何客户端发送消息.\r\n<p>\r\n原文：Registers the specific plugin to the requested outgoing plugin channel,\r\nallowing it to send messages through that channel to any clients.",
		"isRegistrationValid":"检测指定插件消息监听器的注册是否有效.\r\n<p>\r\n如果它没有注册以及插件仍然启用，那么注册就是有效的.\r\n<p>\r\n原文：Checks if the specified plugin message listener registration is valid.\r\n<p>\r\nA registration is considered valid if it has not be unregistered and\r\nthat the plugin is still enabled.",
		"registerIncomingPluginChannel":"注册指定的监听指定的接收的插件通道的插件，允许它在任何插件消息上做动作.\r\n<p>\r\n原文：Registers the specific plugin for listening on the requested incoming\r\nplugin channel, allowing it to act upon any plugin messages.",
		"isIncomingChannelRegistered":"检测指定插件注册的传入的消息是否通过了请求的通道.\r\n<p>\r\n译注：按方法名来看，应该是检测指定正在接收的通道是否在这个插件上注册过.\r\n<p>\r\n原文：Checks if the specified plugin has registered to receive incoming\r\nmessages through the requested channel.",
		"getIncomingChannelRegistrations":"获取一个包含了指定插件在请求的通道上的所有接收的插件通道的注册的set集合.\r\n<p>\r\n原文：Gets a set containing all the incoming plugin channel registrations\r\nthat the specified plugin has on the requested channel."
	},
	"BlockFromToEvent":{
		"getToBlock":"获取方块要移动到的地方的一个快捷的方法.\r\n<p>\r\nConvenience method for getting the faced Block.",
		"ClassDescription":"液体流动/龙蛋自己传送的事件(源方块到目标方块).\r\n<p>\r\n如果事件被取消,方块不会移动/流动.",
		"getFace":"获取方块想要移动到的{@link BlockFace 朝向}.\r\n<p>\r\n原文：Gets the BlockFace that the block is moving to."
	},
	"ServicePriority":{
		"ClassDescription":"Represents various priorities of a provider."
	},
	"Snowball":{
		"ClassDescription":"代表雪球."
	},
	"Flying":{
		"ClassDescription":"代表能飞行的实体."
	},
	"SheepDyeWoolEvent":{
		"setColor":"Sets the DyeColor the sheep is being dyed",
		"getColor":"Gets the DyeColor the sheep is being dyed",
		"ClassDescription":"Called when a sheep's wool is dyed"
	},
	"EnchantmentStorageMeta":{
		"getStoredEnchants":"获取在ItemMeta存储的附魔的副本.\r\n<p>\r\n原文:Gets a copy the stored enchantments in this ItemMeta.",
		"hasConflictingStoredEnchant":"检测指定的附魔是否与任何ItemMeta里的附魔冲突.\r\n<p>\r\n原文:Checks if the specified enchantment conflicts with any enchantments in\r\nthis ItemMeta.",
		"addStoredEnchant":"Stores the specified enchantment in this item meta.",
		"hasStoredEnchant":"Checks for storage of the specified enchantment.",
		"removeStoredEnchant":"Remove the specified stored enchantment from this item meta.",
		"ClassDescription":"EnchantmentMeta is specific to items that can <i>store</i> enchantments, as\r\nopposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example\r\nof an item with enchantment storage.",
		"hasStoredEnchants":"检测是否存在任何附魔.\r\n<p>\r\n原文:Checks for the existence of any stored enchantments.",
		"getStoredEnchantLevel":"Checks for the level of the stored enchantment."
	},
	"KnowledgeBookMeta":{
		"setRecipes":"Clears the existing book recipes, and sets the book to use the provided\nrecipes.",
		"addRecipe":"Adds new recipe to the end of the book.",
		"hasRecipes":"Checks for the existence of recipes in the book.",
		"getRecipes":"Gets all the recipes in the book."
	},
	"Lever":{
		"getAttachedFace":"获取这个方块附着的朝向.\r\n<p>\r\n原文:Gets the face that this block is attached on",
		"setFacingDirection":"设置拉杆被指向的方向.\r\n<p>\r\n原文:Sets the direction this lever is pointing in",
		"ClassDescription":"代表拉杆",
		"isPowered":"获取这个拉杆是否被充能.\r\n<p>\r\n原文:Gets the current state of this Material, indicating if it's powered or\r\nunpowered",
		"setPowered":"设置拉杆是否被充能.\r\n<p>\r\n原文:Set this lever to be powered or not."
	},
	"PotionType":{
		"isUpgradeable":"Checks if the potion type has an upgraded state.\nThis refers to whether or not the potion type can be Tier 2,\nsuch as Potion of Fire Resistance II.",
		"isExtendable":"Checks if the potion type has an extended state.\nThis refers to the extended duration potions",
		"getByEffect":"",
		"getDamageValue":"",
		"getByDamageValue":"",
		"ClassDescription":"This enum reflects and matches each potion state that can be obtained from\nthe Creative mode inventory"
	},
	"BanEntry":{
		"setSource":"设置本次封禁的操作者. \r\n<p>\r\n注意: 操作者可以是任何字符串，虽然大部分情况是玩家名.\r\n<p>\r\n原文:\r\nSets the source of this ban.\r\n<p>\r\nNote: A source is considered any String, although this is generally a\r\nplayer name.",
		"getTarget":"获取本次封禁的目标. \r\n这可能是一个IP地址或玩家名. \r\n<p>\r\n原文: Gets the target involved. This may be in the form of an IP or a player\r\nname.",
		"getExpiration":"获取本次封禁的过期时间. \r\nnull为永不过期.\r\n<p>\r\n原文:\r\nGets the date this ban expires on, or null for no defined end date.",
		"getSource":"获取本次封禁的操作者. \r\n<p>\r\n注意: 操作者可以是任何字符串, 虽然大部分情况是玩家名.\r\n<p>\r\n原文:\r\nGets the source of this ban.\r\n<p>\r\nNote: A source is considered any String, although this is generally a\r\nplayer name.",
		"getReason":"获取此次封禁的理由. \r\n<p>\r\n原文: Gets the reason for this ban.",
		"setReason":"设置此次封禁的理由. \r\n<p>\r\n原文: Sets the reason for this ban. Reasons must not be null.",
		"save":"保存这个封禁条目, 将覆盖在封禁列表里的数据. \r\n<p>\r\n保存关于一个未被封禁的玩家的封禁条目, 将导致这个玩家再一次被封禁.\r\n<p>\r\n原文:\r\nSaves the ban entry, overwriting any previous data in the ban list.\r\n<p>\r\nSaving the ban entry of an unbanned player will cause the player to be\r\nbanned once again.",
		"getCreated":"获取本次封禁的开始时间. \r\n<p>\r\n原文: Gets the date this ban entry was created.",
		"ClassDescription":"封禁列表里的单个封禁条目. \r\n本封禁条目可以代表关于一个玩家的封禁或关于一个IP地址的封禁.\r\n<p>\r\n封禁条目包括以下属性:\r\n<table border=1>\r\n<caption>属性信息</caption>\r\n<tr>\r\n    <th>属性</th>\r\n    <th>描述</th>\r\n</tr><tr>\r\n    <td>目标玩家名 / IP地址</td>\r\n    <td>目标的玩家名或IP地址</td>\r\n</tr><tr>\r\n    <td>创建日期</td>\r\n    <td>本次封禁的创建日期(开始日期)</td>\r\n</tr><tr>\r\n    <td>创建者</td>\r\n    <td>封禁的创建者，可以是玩家、控制台、插件等</td>\r\n</tr><tr>\r\n    <td>到期时间</td>\r\n    <td>封禁的到期事件</td>\r\n</tr><tr>\r\n    <td>理由</td>\r\n    <td>封禁的理由</td>\r\n</tr>\r\n</table>\r\n<p>\r\n未保存的信息不会自动写入到实现的封禁列表中, \r\n反而, {@link #save()} 方法必须被调用, 以保存到封禁列表中.\r\n如果本封禁条目已经过期(例如unban命令)或不再存在于封禁列表中，{@link #save()} 方法\r\n的调用将重新添加本条目至封禁列表, \r\n因而导致再次封禁指定的受害者.\r\n同样地, 对相关的{@link BanList}或其他的条目的更改可能或可能不会反映在此条目上.\r\n<p>\r\n译注: 最后一句是什么意思呢? 您每次从BanList里获取的BanEntry都是\r\n不同的对象(不同的内存地址), 您对其中一个BanEntry进行了修改, 但这并不会影响另一个\r\n已经获取到的BanEntry, 另一个BanEntry获取到的信息自然跟您修改后的信息不符.",
		"setCreated":"设置本次封禁的开始时间. \r\n<p>\r\n原文: Sets the date this ban entry was created.",
		"setExpiration":"设置本次封禁的过期时间. \r\n设为null则表示永不过期.\r\n<p>\r\n原文:\r\nSets the date this ban expires on. Null values are considered\r\n\"infinite\" bans."
	},
	"ItemFlag":{
		"ClassDescription":"隐藏ItemStacks的某些属性."
	},
	"PortalType":{
		"ClassDescription":"代表世界中的传送门."
	},
	"Dispenser":{
		"ClassDescription":"代表发射器."
	},
	"BlockMultiPlaceEvent":{
		"ClassDescription":"当玩家放一个方块，而连锁放置了第二个方块时(例如玩家放置一个床)触发本事件.\r\n<p>\r\n通过 {@link #getBlockPlaced()} 和它的相关方法 返回的方块是:若该位置不仅影响一个方块，\r\n其中放置的方块会存在.",
		"getReplacedBlockStates":"获取所有新放置的方块的方块状态.\r\n<p>\r\n这些方块中的大多数方块状态都是空气.\r\n<p>\r\n原文：Gets a list of blockstates for all blocks which were replaced by the\r\nplacement of the new blocks. Most of these blocks will just have a\r\nMaterial type of AIR."
	},
	"PlayerBucketEvent":{
		"getBucket":"返回玩家手里的桶的类型. \r\n<p>\r\n假设玩家使用空桶装水,则会返回空桶的类型\r\n<p>\r\n原文: \r\nReturns the bucket used in this event",
		"getBlockFace":"获取方块被点击的面.\r\n<p>\r\n每个方块有6个面,玩家究竟是点击的哪个呢.\r\n<p>\r\n原文: \r\nGet the face on the clicked block",
		"ClassDescription":"当玩家使用桶时触发本事件.",
		"getItemStack":"得到使用桶之后会得到的物品堆叠. \r\n<p>\r\n假设玩家使用空桶装水,则会返回一个装满水的桶\r\n<p>\r\n原文: \r\nGet the resulting item in hand after the bucket event",
		"setItemStack":"设置使用桶之后得到的物品.\r\n<p>\r\n假设玩家使用空桶装水,原来玩家会一个装满水的桶,你可以使用这个方法改变这个结果. 例如改成岩浆桶. \r\n<p>\r\n原文: \r\nSet the item in hand after the event",
		"getBlockClicked":"玩家正在对着哪个方块使用桶,返回那个方块. \r\n<p>\r\n原文: \r\nReturn the block clicked"
	},
	"PlayerKickEvent":{
		"setLeaveMessage":"设置某玩家被踢出后,发送给全体玩家的离开消息.\r\n<p>\r\n原文:Sets the leave message send to all online players",
		"getReason":"获取踢出的玩家的理由.\r\n<p>\r\n原文:Gets the reason why the player is getting kicked",
		"setReason":"设置踢出某玩家的理由.\r\n<p>\r\n原文:Sets the reason why the player is getting kicked",
		"ClassDescription":"玩家被服务器踢出事件.",
		"getLeaveMessage":"获取某玩家被踢出后,发送给全体玩家的离开消息.\r\n<p>\r\n原文:Gets the leave message send to all online players"
	},
	"YamlConfiguration":{
		"loadConfiguration":"Creates a new {@link YamlConfiguration}, loading from the given reader.\n<p>\nAny errors loading the Configuration will be logged and then ignored.\nIf the specified input is not a valid config, a blank config will be\nreturned.",
		"ClassDescription":"An implementation of {@link Configuration} which saves all files in Yaml.\nNote that this implementation is not synchronized."
	},
	"BrewEvent":{
		"getFuelLevel":"Gets the remaining fuel level.",
		"getContents":"获取此事件中的酿造台的物品栏. \n<p>\n原文：Gets the contents of the Brewing Stand.",
		"ClassDescription":"当酿造完成时触发这个事件."
	},
	"BlockPistonRetractEvent":{
		"ClassDescription":"活塞臂缩回事件",
		"getBlocks":"获取被活塞移动的不可改变的方块列表.\r\n<p>\r\n原文：Get an immutable list of the blocks which will be moved by the\r\nextending.",
		"getRetractLocation":"如果缩回的活塞是粘性的,获取被这个活塞粘住的方块的位置. \r\n<p>\r\n原文：Gets the location where the possible moving block might be if the\r\nretracting piston is sticky."
	},
	"CommandPermissions":{},
	"GenericCommandHelpTopic":{
		"ClassDescription":"Lacking an alternative, the help system will create instances of\r\nGenericCommandHelpTopic for each command in the server's CommandMap. You\r\ncan use this class as a base class for custom help topics, or as an example\r\nfor how to write your own."
	},
	"Keyed":{
		"getKey":"Return the namespaced identifier for this object.",
		"ClassDescription":"Represents an object which has a {@link NamespacedKey} attached to it."
	},
	"ChunkUnloadEvent":{
		"isSaveChunk":"返回这个区块是否将被保存.\r\n<p>\r\n原文:Return whether this chunk will be saved to disk.",
		"setSaveChunk":"设置这个区块是否将被保存.\r\n<p>\r\n原文:Set whether this chunk will be saved to disk.",
		"ClassDescription":"当一个区块被卸载时调用"
	},
	"Biome":{
		"ClassDescription":"所有生物群系的枚举."
	},
	"PotionData":{
		"isUpgraded":"Checks if the potion is in an upgraded state. This refers to whether or\nnot the potion is Tier 2, such as Potion of Fire Resistance II.",
		"getType":"Gets the type of the potion, Type matches up with each kind of craftable\npotion",
		"isExtended":"Checks if the potion is in an extended state. This refers to the extended\nduration potions"
	},
	"TippedArrow":{
		"setBasePotionData":"Sets the underlying potion data",
		"setColor":"Sets the color of this arrow. Will be applied as a tint to its particles.",
		"getColor":"Gets the color of this arrow.",
		"removeCustomEffect":"Removes a custom potion effect from this arrow.",
		"hasCustomEffects":"Checks for the presence of custom potion effects.",
		"hasCustomEffect":"Checks for a specific custom potion effect type on this arrow.",
		"getBasePotionData":"Returns the potion data about the base potion",
		"addCustomEffect":"Adds a custom potion effect to this arrow.",
		"getCustomEffects":"Gets an immutable list containing all custom potion effects applied to\nthis arrow.\n<p>\nPlugins should check that hasCustomEffects() returns true before calling\nthis method.",
		"clearCustomEffects":"Removes all custom potion effects from this arrow."
	},
	"Monster":{
		"ClassDescription":"代表怪物."
	},
	"YamlConfigurationOptions":{
		"indent":"Sets how much spaces should be used to indent each line.\r\n<p>\r\nThe minimum value this may be is 2, and the maximum is 9.",
		"ClassDescription":"Various settings for controlling the input and output of a {@link\r\nYamlConfiguration}"
	},
	"AnvilInventory":{
		"setRepairCost":"Set the experience cost (in levels) to complete the current repair.",
		"getRenameText":"Get the name to be applied to the repaired item. An empty string denotes\r\nthe default item name.",
		"getRepairCost":"Get the experience cost (in levels) to complete the current repair.",
		"ClassDescription":"Interface to the inventory of an Anvil."
	},
	"Witch":{
		"ClassDescription":"代表女巫."
	},
	"ChatPaginator":{
		"wordWrap":"Breaks a raw string up into a series of lines. Words are wrapped using\r\nspaces as decimeters and the newline character is respected.",
		"paginate":"Breaks a raw string up into pages using a provided width and height.",
		"ClassDescription":"The ChatPaginator takes a raw string of arbitrary length and breaks it down\r\ninto an array of strings appropriate for displaying on the Minecraft player\r\nconsole."
	},
	"EnderChest":{
		"ClassDescription":"代表末影箱."
	},
	"EntityDamageEvent":{
		"getDamage":"返回本次事件收到伤害的值",
		"isApplicable":"该方法将检查特定的伤害原因是否是本次触发的原因,\n例如 {@link #setDamage(DamageModifier, double)}\n将不会抛出 {@link UnsupportedOperationException} 异常\n<p>\n{@link DamageModifier#BASE} 总是适用的.",
		"ClassDescription":"储存伤害事件的数据\n原文:\nStores data for damage events",
		"setDamage":"Sets the raw amount of damage caused by the event.\n<p>\nFor compatibility this also recalculates the modifiers and scales\nthem by the difference between the modifier for the previous damage\nvalue and the new one.",
		"getFinalDamage":"返回此次事件最终的伤害值 (经过护甲等的修改)",
		"getCause":"Gets the cause of the damage.",
		"getOriginalDamage":"获取指定伤害类型的原始伤害,作为本次事件的结构定义 ?"
	},
	"Repairable":{
		"setRepairCost":"设置修复此物品所需的额外经验等级.\r\n<p>\r\n原文：Sets the repair penalty",
		"hasRepairCost":"检测修复此物品是否需要消耗额外经验等级.\r\n<p>\r\n原文：Checks to see if this has a repair penalty",
		"getRepairCost":"获取修复此物品所需的额外经验等级.\r\n<p>\r\n原文：Gets the repair penalty",
		"ClassDescription":"代表可以在铁砧上被修复的物品."
	},
	"Pattern":{
		"getColor":"返回图案的颜色.\r\n<p>\r\n原文:\r\nReturns the color of the pattern",
		"getPattern":"返回图案的类型.\r\n<p>\r\n原文:\r\nReturns the type of pattern"
	},
	"HopperMinecart":{
		"setEnabled":"设置这个矿车是否会将物品捡进背包.\n<p>\n原文：Sets whether this Minecart will pick up items.",
		"isEnabled":"检测这个矿车是否会将物品捡进背包.\n<p>\n原文：Checks whether or not this Minecart will pick up \nitems into its inventory.",
		"ClassDescription":"代表漏斗矿车."
	},
	"BlockFadeEvent":{
		"ClassDescription":"方块因为自然条件消退，融化，消失的事件(比如雪融化).\r\n<p>\r\n例如:\r\n<ul>\r\n<li>雪被附近的光源融化\r\n<li>冰被附近的光源融化\r\n<li>火燃烧后破坏可以作为燃料的方块\r\n</ul>\r\n<p>\r\n如果这事件被取消, 方块不会因为自然条件消退，融化，消失.",
		"getNewState":"获取因为世界条件消退，融化，消失的方块的状态({@link BlockState}).\r\n<p>\r\n原文：Gets the state of the block that will be fading, melting or\r\ndisappearing."
	},
	"Tameable":{
		"setTamed":"Sets if this has been tamed. Not necessary if the method setOwner has\r\nbeen used, as it tames automatically.\r\n<p>\r\nIf something is tamed then a player can not tame it through normal\r\nmethods, even if it does not belong to anyone in particular.",
		"isTamed":"Check if this is tamed\r\n<p>\r\nIf something is tamed then a player can not tame it through normal\r\nmethods, even if it does not belong to anyone in particular.",
		"getOwner":"Gets the current owning AnimalTamer",
		"setOwner":"Set this to be owned by given AnimalTamer.\r\n<p>\r\nIf the owner is not null, this will be tamed and will have any current\r\npath it is following removed. If the owner is set to null, this will be\r\nuntamed, and the current owner removed."
	},
	"LlamaInventory":{
		"ClassDescription":"An interface to the inventory of a {@link Llama}.",
		"setDecor":"Sets the item in the llama's decor slot."
	},
	"SpawnEggMeta":{
		"getSpawnedType":"Get the type of entity this egg will spawn.",
		"setSpawnedType":"Set the type of entity this egg will spawn.",
		"ClassDescription":"Represents a {@link Material#MONSTER_EGG} and it's spawned type."
	},
	"EventException":{
		"getCause":"如果适用，就会返回触发这个异常的异常。\r\n<p>\r\n原文：If applicable, returns the Exception that triggered this Exception"
	},
	"Potion":{
		"hasExtendedDuration":"Returns whether this potion has an extended duration.",
		"fromDamage":"",
		"apply":"Applies the effects that would be applied by this potion to the given\n{@link LivingEntity}.",
		"getNameId":"",
		"ClassDescription":"Potion Adapter for pre-1.9 data values\nsee @PotionMeta for 1.9+",
		"setType":"Sets the {@link PotionType} of this potion.",
		"getBrewer":"Returns an instance of {@link PotionBrewer}.",
		"setSplash":"Sets whether this potion is a splash potion. Splash potions can be\nthrown for a radius effect.",
		"setLevel":"Sets the level of this potion.",
		"extend":"Chain this to the constructor to extend the potion's duration.",
		"getEffects":"Returns a collection of {@link PotionEffect}s that this {@link Potion}\nwould confer upon a {@link LivingEntity}.",
		"getLevel":"Returns the level of this potion.",
		"toDamageValue":"Converts this potion to a valid potion damage short, usable for potion\nitem stacks.",
		"getType":"Returns the {@link PotionType} of this potion.",
		"isSplash":"Returns whether this potion is a splash potion.",
		"toItemStack":"Converts this potion to an {@link ItemStack} with the specified amount\nand a correct damage value.",
		"setPotionBrewer":"Sets the current instance of {@link PotionBrewer}. Generally not to be\nused from within a plugin.",
		"splash":"Chain this to the constructor to make the potion a splash potion.",
		"setHasExtendedDuration":"Set whether this potion has extended duration. This will cause the\npotion to have roughly 8/3 more duration than a regular potion."
	},
	"BukkitTask":{
		"getTaskId":"返回这个任务的任务id。\r\n<p>\r\n原文：Returns the taskId for the task.",
		"cancel":"尝试取消该任务。\r\n<p>\r\n原文：Will attempt to cancel this task.",
		"ClassDescription":"代表由调度器执行的任务。",
		"getOwner":"返回拥有这个任务的插件。\r\n<p>\r\n原文：Returns the Plugin that owns this task.",
		"isSync":"如果这个任务是同步任务则返回true。\r\n<p>\r\n原文：Returns true if the Task is a sync task."
	},
	"LightningStrikeEvent":{
		"getLightning":"获取从天空中打下的雷电.\r\n<p>\r\n原文:\r\nGets the bolt which is striking the earth.",
		"ClassDescription":"雷击事件"
	},
	"PerlinNoiseGenerator":{
		"ClassDescription":"使用\"经典的\"柏林发生器产生噪音。\r\n<p>\r\n译注：柏林噪声(perlin noise)，详情百度。\r\n<p>\r\n原文：Generates noise using the \"classic\" perlin generator",
		"getNoise":"使用特殊的数个音阶和参数产生一个三维坐标的噪音。\r\n<p>\r\n原文：Generates noise for the 3D coordinates using the specified number of\r\noctaves and parameters",
		"getInstance":"获取独立的没有种子的此发生器实例。\r\n<p>\r\n原文：Gets the singleton unseeded instance of this generator"
	},
	"FixedMetadataValue":{
		"ClassDescription":"A FixedMetadataValue is a special case metadata item that contains the same\r\nvalue forever after initialization. Invalidating a FixedMetadataValue has\r\nno effect.\r\n<p>\r\nThis class extends LazyMetadataValue for historical reasons, even though it\r\noverrides all the implementation methods. it is possible that in the future\r\nthat the inheritance hierarchy may change."
	},
	"ExperienceOrb":{
		"getExperience":"Gets how much experience is contained within this orb",
		"setExperience":"Sets how much experience is contained within this orb",
		"ClassDescription":"Represents an Experience Orb."
	},
	"PerlinOctaveGenerator":{
		"ClassDescription":"使用中音阶创建一个柏林噪声。\r\n<p>\r\n译注：柏林噪声(perlin noise)，详情百度。\r\n<p>\r\n原文：Creates perlin noise through unbiased octaves"
	},
	"Illusioner":{
		"ClassDescription":"Represents an Illusioner \"Illager\"."
	},
	"Projectile":{
		"setBounce":"Set whether or not this projectile should bounce or not when it hits\nsomething.",
		"doesBounce":"Determine if this projectile should bounce or not when it hits.\n<p>\nIf a small fireball does not bounce it will set the target on fire.",
		"getShooter":"Retrieve the shooter of this projectile.",
		"setShooter":"Set the shooter of this projectile.",
		"ClassDescription":"Represents a shootable entity."
	},
	"PlayerChangedWorldEvent":{
		"ClassDescription":"当玩家切换到另一个世界时触发此事件.",
		"getFrom":"获得玩家切换到目标世界之前所在的世界.\r\n<p>\r\n原文:Gets the world the player is switching from."
	},
	"TabCompleteEvent":{
		"getBuffer":"返回构成这个补全项的命令缓冲区.\n<p>\n译注：命令缓冲区是什么？比如您对命令”/tp no”进行补全，”/tp no”即为这个buffer\n<p>\n原文:Return the entire buffer which formed the basis of this completion.",
		"getCompletions":"提供给发送者的补全项的列表.\n这个列表是可变的，可以编辑该列表以实现更改补全项.\n<p>\n原文：The list of completions which will be offered to the sender, in order.\nThis list is mutable and reflects what will be offered.",
		"ClassDescription":"当一个 {@link CommandSender} 尝试补全命令时触发本事件.",
		"getSender":"获取正在补全这个命令的发送者.\n<p>\n原文：Get the sender completing this command.",
		"setCompletions":"设置提供的补全项，会覆盖已设置的补全项.\n<p>\n原文：Set the completions offered, overriding any already set."
	},
	"PluginBase":{
		"ClassDescription":"Represents a base {@link Plugin}\r\n<p>\r\nExtend this class if your plugin is not a {@link\r\norg.bukkit.plugin.java.JavaPlugin}"
	},
	"Ladder":{
		"getAttachedFace":"获取这个方块附着的方向.\r\n<p>\r\n原文:Gets the face that this block is attached on",
		"setFacingDirection":"设置这个梯子的朝向.\r\n<p>\r\n原文:Sets the direction this ladder is facing",
		"ClassDescription":"代表梯子"
	},
	"ExpBottleEvent":{
		"setShowEffect":"This method sets if the particle effect will be shown.\r\n<p>\r\nThis does not change the experience created.",
		"getExperience":"This method retrieves the amount of experience to be created.\r\n<p>\r\nThe number indicates a total amount to be divided into orbs.",
		"setExperience":"This method sets the amount of experience to be created.\r\n<p>\r\nThe number indicates a total amount to be divided into orbs.",
		"ClassDescription":"Called when a ThrownExpBottle hits and releases experience.",
		"getShowEffect":"This method indicates if the particle effect should be shown."
	},
	"AnimalTamer":{
		"getName":"这是指定的AnimalTamer的名称.\r\n<p>\r\n原文:\r\nThis is the name of the specified AnimalTamer.",
		"getUniqueId":"这是指定的AnimalTamer的UUID.\r\n<p>\r\n原文:\r\nThis is the UUID of the specified AnimalTamer."
	},
	"EnderDragonPart":{
		"ClassDescription":"代表末影龙部分/Represents an ender dragon part"
	},
	"Prompt":{
		"acceptInput":"Accepts and processes input from the user. Using the input, the next\r\nPrompt in the prompt graph is returned.",
		"getPromptText":"Gets the text to display to the user when this prompt is first\r\npresented.",
		"ClassDescription":"A Prompt is the main constituent of a {@link Conversation}. Each prompt\r\ndisplays text to the user and optionally waits for a user's response.\r\nPrompts are chained together into a directed graph that represents the\r\nconversation flow. To halt a conversation, END_OF_CONVERSATION is returned\r\nin liu of another Prompt object.",
		"blocksForInput":"Checks to see if this prompt implementation should wait for user input\r\nor immediately display the next prompt."
	},
	"WitherSkull":{
		"setCharged":"设置这个凋零之首是否充能.\r\n<p>\r\n译注：凋零之首分为黑色的和蓝色的，难道BukkitAPI的编写者把蓝色的凋零之首认为是充能的凋零之首？目前尚未得到测试，无法证明此观点.下同.\r\n<p>\r\n原文：Sets the charged status of the wither skull.",
		"isCharged":"获取这个凋零之首是否充能.\r\n<p>\r\n原文：Gets whether or not the wither skull is charged.",
		"ClassDescription":"代表凋零之首.\r\n<p>\r\n有关凋零之首，请参阅 MineCraft 中文Wiki 上的<a href=\"http://minecraft-zh.gamepedia.com/%E5%87%8B%E9%9B%B6\">凋零</a>部分."
	},
	"BeaconInventory":{
		"getItem":"返回激活这个信标的药水效果的物品. \r\n<p>\r\n原文: Get the item powering the beacon.",
		"ClassDescription":"信标的背包GUI接口",
		"setItem":"设置激活这个信标的药水效果的物品. \r\n<p>\r\n原文: Set the item powering the beacon."
	},
	"NotePlayEvent":{
		"getInstrument":"获取要播放的音符的乐器({@link Instrument}).\r\n<p>\r\n原文：Gets the {@link Instrument} to be used.",
		"setNote":"设置要播放的音符({@link Note}).\r\n<p>\r\n原文：Overrides the {@link Note} to be played.",
		"ClassDescription":"音符盒播放音符的事件[玩家点击/红石触发]",
		"getNote":"获取要播放的音符({@link Note}).\r\n<p>\r\n原文：Gets the {@link Note} to be played.",
		"setInstrument":"设置播放音符用的乐器({@link Instrument}).\r\n<p>\r\n原文：Overrides the {@link Instrument} to be used."
	},
	"HandlerList":{
		"bakeAll":"合并(bake)所有处理器列表.最好用在所有正常的事件注册完毕后,即所有插件都加载完了,如果你使用fevents插件系统.\r\n<p>\r\n原文：Bake all handler lists. Best used just after all normal event\r\nregistration is complete, ie just after all plugins are loaded if\r\nyou're using fevents in a plugin system.",
		"registerAll":"在处理列表中注册一个监听器集合(批量注册监听器).\r\n<p>\r\n原文：Register a collection of new listeners in this handler list",
		"bake":"合并(bake)一个HashMap和ArrayLists到二维数组 - 如果不必要，什么也不会做.\r\n<p>\r\n原文：Bake HashMap and ArrayLists to 2d arrays - does nothing if not necessary",
		"unregister":"从这个处理列表移除一个指定的监听器。\r\n<p>\r\n原文：Remove a specific listener from this handler",
		"getRegisteredListeners":"获取与这个处理器列表相关的指定插件注册的监听器.\r\n<p>\r\n原文：Get a specific plugin's registered listeners associated with this\r\nhandler list",
		"unregisterAll":"从处理器列表中注销一个指定的监听器.\r\n<p>\r\n原文：Unregister a specific listener from all handler lists.",
		"ClassDescription":"一个处理事件的类, 存储每个事件。基于 lahwran's fevents.",
		"getHandlerLists":"获取每个事件类型的所有处理器的列表.\r\n<p>\r\n原文：Get a list of all handler lists for every event type",
		"register":"在处理器列表中注册一个监听器.\r\n<p>\r\n原文：Register a new listener in this handler list"
	},
	"AbstractHorse":{
		"getDomestication":"Gets the domestication level of this horse.\n<p>\nA higher domestication level indicates that the horse is closer to\nbecoming tame. As the domestication level gets closer to the max\ndomestication level, the chance of the horse becoming tame increases.",
		"setDomestication":"Sets the domestication level of this horse.\n<p>\nSetting the domestication level to a high value will increase the\nhorse's chances of becoming tame.\n<p>\nDomestication level must be greater than zero and no greater than\nthe max domestication level of the horse, determined with\n{@link #getMaxDomestication()}",
		"getMaxDomestication":"Gets the maximum domestication level of this horse.\n<p>\nThe higher this level is, the longer it will likely take\nfor the horse to be tamed.",
		"setJumpStrength":"Sets the jump strength of this horse.\n<p>\nA higher jump strength increases how high a jump will go.\nSetting a jump strength to 0 will result in no jump.\nYou cannot set a jump strength to a value below 0 or\nabove 2.",
		"getVariant":"Gets the horse's variant.\n<p>\nA horse's variant defines its physical appearance and capabilities.\nWhether a horse is a regular horse, donkey, mule, or other kind of horse\nis determined using the variant.",
		"setVariant":"",
		"getJumpStrength":"Gets the jump strength of this horse.\n<p>\nJump strength defines how high the horse can jump. A higher jump strength\nincreases how high a jump will go.",
		"ClassDescription":"Represents a Horse-like creature.",
		"setMaxDomestication":"Sets the maximum domestication level of this horse.\n<p>\nSetting a higher max domestication will increase the amount of\ndomesticating (feeding, riding, etc.) necessary in order to tame it,\nwhile setting a lower max value will have the opposite effect.\n<p>\nMaximum domestication must be greater than zero."
	},
	"CauldronLevelChangeEvent":{
		"getEntity":"获取哪个实体触发该事件,值有可能为Null.\r\n<p>\r\n原文:Get entity which did this. May be null."
	},
	"BlockSpreadEvent":{
		"getSource":"获取这个事件中蔓延的源方块.\r\n<p>\r\n原文：Gets the source block involved in this event.",
		"ClassDescription":"当一个方块基于自然法则地蔓延时触发此事件(比如菌丝的蔓延).\r\n<p>\r\n用 {@link BlockFormEvent} 来获取方块 。方块蔓延是“随机”的形式，不是\r\n实际地传播.\r\n<p>\r\n例如:\r\n<ul>\r\n<li>蘑菇的蔓延\r\n<li>火的蔓延\r\n</ul>\r\n<p>\r\n若本事件被取消,方块就不会蔓延."
	},
	"PlayerFishEvent":{
		"getState":"Gets the state of the fishing",
		"getCaught":"Gets the entity caught by the player.\n<p>\nIf player has fished successfully, the result may be cast to {@link\norg.bukkit.entity.Item}.",
		"getHook":"Gets the fishing hook.",
		"getExpToDrop":"Gets the amount of experience received when fishing.\n<p>\nNote: This value has no default effect unless the event state is {@link\nState#CAUGHT_FISH}.",
		"ClassDescription":"当玩家钓鱼时触发本事件.",
		"setExpToDrop":"Sets the amount of experience received when fishing.\n<p>\nNote: This value has no default effect unless the event state is {@link\nState#CAUGHT_FISH}."
	},
	"FlowerPot":{
		"getContents":"获取在花盆里的植物的方块.\n<p>\n原文:Get the material in the flower pot",
		"ClassDescription":"代表花盆",
		"setContents":"设置在花盆里的植物的方块.\n<p>\n原文:Set the contents of the flower pot"
	},
	"CommandExecutor":{
		"onCommand":"执行给定的命令，成功时返回.\r\n<p>\r\n原文:Executes the given command, returning its success",
		"ClassDescription":"包含了一个执行命令的方法的类."
	},
	"Vex":{
		"ClassDescription":"Represents a Vex."
	},
	"ItemFrame":{
		"getRotation":"获取展示框内物品的旋转角度.\r\n<p>\r\n原文:Get the rotation of the frame's item",
		"getItem":"获取在展示框内的物品.\r\n<p>\r\n原文:Get the item in this frame",
		"ClassDescription":"代表物品展示框.",
		"setRotation":"设置展示框内物品的旋转角度.\r\n<p>\r\n原文:Set the rotation of the frame's item",
		"setItem":"设置在展示框内的物品.\r\n<p>\r\n原文:Set the item in this frame"
	},
	"World":{
		"getName":"获取世界的唯一名称.\n<p>\n原文：\nGets the unique name of this world",
		"dropItemNaturally":"在指定的{@link Location 位置}丢出一个随机偏移的物品.\n<p>\n原文：\nDrops an item at the specified {@link Location} with a random offset",
		"setAnimalSpawnLimit":"设置这个世界一个区块内的动物生成数限制。\n<p>\n<b>注意：</b>如果设置为负数则这个世界会使用服务器普遍的生成限制来代替。\n<p>\n原文：\nSets the limit for number of animals that can spawn in a chunk in this\nworld\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.",
		"getPopulators":"获取一个这个世界使用的所有{@link BlockPopulator 方块填充器}的列表.\n<p>\n原文：\nGets a list of all applied {@link BlockPopulator}s for this World",
		"spawnArrow":"Creates an arrow entity of the given class at the given {@link Location}",
		"strikeLightning":"在指定的{@link Location 位置}劈下闪电.\n<p>\n原文：\nStrikes lightning at the given {@link Location}",
		"ClassDescription":"代表一个世界,包含了{@link Entity 实体},{@link Chunk 区块},{@link Block 方块}",
		"setThunderDuration":"设置这个世界打雷持续时间。\n<p>\n原文：\nSet the thundering duration.",
		"getAnimalSpawnLimit":"获取这个世界一个区块内的动物生成数限制。\n<p>\n原文：\nGets the limit for number of animals that can spawn in a chunk in this\nworld",
		"getGameRules":"获取当前的游戏规则。\n<p>\n译注：如果你不知道这是什么，请查阅gamerule命令。\n<p>\n原文：\nGet existing rules",
		"getWeatherDuration":"获取当前天气的剩余时间，单位为tick.\n<p> \n原文：\nGet the remaining time in ticks of the current conditions.",
		"setWaterAnimalSpawnLimit":"设置这个世界一个区块内的水生动物生成数限制。\n<p>\n<b>注意：</b>如果设置为负数则这个世界会使用服务器普遍的生成限制来代替。\n<p>\n原文：\nSets the limit for number of water animals that can spawn in a chunk in\nthis world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.",
		"dropItem":"在指定的{@link Location 位置}丢出一个物品.\n<p>\n原文：\nDrops an item at the specified {@link Location}",
		"setStorm":"设置是否有风暴。会为当前新的天气设置一段持续时间.\n<p>\n原文：\nSet whether there is a storm. A duration will be set for the new\ncurrent conditions.",
		"setGameRuleValue":"将指定的游戏规则设置为指定数值。\n<p>\n规则可能会尝试验证值，如果数值被设置则会返回true。\n<p>\n如果规则为空，则这个函数会返回false。\n<p>\n原文：\nSet the specified gamerule to specified value.\n<p>\nThe rule may attempt to validate the value passed, will return true if\nvalue was set.\n<p>\nIf rule is null, the function will return false.",
		"getUID":"获取世界的唯一UUID.\n<p>\n原文：\nGets the Unique ID of this world",
		"unloadChunkRequest":"将卸载指定坐标的{@link Chunk 区块}列入队列.\n<p>\n原文：\nQueues the {@link Chunk} at the specified coordinates for unloading",
		"strikeLightningEffect":"在指定的{@link Location 位置}劈下不会造成伤害的闪电.\n<p>\n原文：\nStrikes lightning at the given {@link Location} without doing damage",
		"getGenerator":"获取世界的区块生成器.\n<p>\n原文：\nGets the chunk generator for this world",
		"setFullTime":"设置服务器的游戏时间.\n<p>\n注意这是设置全世界的时间，可能产生不好的影响，比如破坏红石钟或任一预定事件.\n<p>\n原文：\nSets the in-game time on the server\n<p>\nNote that this sets the full time of the world, which may cause adverse\neffects such as breaking redstone clocks and any scheduled events",
		"getNearbyEntities":"返回一个以这个位置为中心的包围着的所有实体的列表(译注:这个可能不太好理解，就是在这个位置，按指定的搜索范围，搜索这个范围里的所有实体).\n<p>\n一些实现可能会对搜索的范围的大小施加限制.\n<p>\n原文：\nReturns a list of entities within a bounding box centered around a Location.\n\nSome implementations may impose artificial restrictions on the size of the search bounding box.",
		"getWaterAnimalSpawnLimit":"获取这个世界一个区块内的水生动物生成数限制。\n<p>\n原文：\nGets the limit for number of water animals that can spawn in a chunk in\nthis world",
		"setTicksPerMonsterSpawns":"设置世界生成怪物的时间间隔（单位为tick）。\n<p>\n这个数值决定每次尝试生成怪物之间的时间间隔（单位为tick）。\n<p>\n<b>用法示例：</b>\n<ul>\n<li>数值为1意味着服务器每1tick都会尝试在这个世界生成怪物。\n<li>数值为400意味着服务器每400tick会尝试在这个世界生成怪物。\n<li>数值低于0则会被重置为Minecraft的默认值。\n</ul>\n<p>\n<b>注意：</b>\n如果设置为0，则会禁止这个世界生成怪物。我们一般使用{@link #setSpawnFlags(boolean, boolean)}来代替。\n<p>\nMinecraft的默认值：1。\n<p>\n原文：\nSets the world's ticks per monster spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn monsters.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, monsters spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 1.",
		"getHighestBlockYAt":"Gets the y coordinate of the lowest block at the given {@link Location}\nsuch that the block and all blocks above it are transparent for lighting\npurposes.",
		"isGameRule":"检查字符串是否是一个有效的游戏规则。\n<p>\n原文：\nChecks if string is a valid game rule",
		"setBiome":"设置指定方块坐标的生物群系\n<p>\n原文：\nSets the biome for the given block coordinates",
		"setTicksPerAnimalSpawns":"设置世界生成动物的时间间隔（单位为tick）。\n<p>\n这个数值决定每次尝试生成动物之间的时间间隔（单位为tick）。\n<p>\n<b>用法示例：</b>\n<ul>\n<li>数值为1意味着服务器每1tick都会尝试在这个世界生成动物。\n<li>数值为400意味着服务器每400tick会尝试在这个世界生成动物。\n<li>数值低于0则会被重置为Minecraft的默认值。\n</ul>\n<p>\n<b>注意：</b>\n如果设置为0，则会禁止这个世界生成动物。我们一般使用{@link #setSpawnFlags(boolean, boolean)}来代替。\n<p>\nMinecraft的默认值：400。\n<p>\n原文：\nSets the world's ticks per animal spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn animals.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn animals in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn animals\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, animal spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 400.",
		"getPlayers":"获取一个这个世界的所有玩家的列表.\n<p>\n原文：\nGet a list of all players in this World",
		"setAutoSave":"设置世界是否会自动保存。\n<p>\n原文：\nSets whether or not the world will automatically save",
		"getMaxHeight":"获取这个世界的最大高度。\n<p>\n如果最大高度为100，则只有y=0到y=99才有方块。\n<p>\n原文：\nGets the maximum height of this world.\n<p>\nIf the max height is 100, there are only blocks from y=0 to y=99.",
		"setTime":"设置服务器的在游戏中的相对时间.\n<p>\n相对时间类似于小时数*1000（译注：意思是，如果这个世界在游戏中的时间为一个小时则相对时间显示为1000，一小时十二分为1200).\n<p>\n注意设置的相对时间如果小于当前相对时间则实际上是将时钟向前移动了一天。如果你要倒回时间，请使用{@link #setFullTime(long)}.\n<p>\n原文：\nSets the relative in-game time on the server.\n<p>\nThe relative time is analogous to hours * 1000\n<p>\nNote that setting the relative time below the current relative time\nwill actually move the clock forward a day. If you require to rewind\ntime, please see {@link #setFullTime(long)}",
		"setSpawnFlags":"为这个世界设置出生标识。\n<p>\n原文：\nSets the spawn flags for this.",
		"getLoadedChunks":"获取一个所有被加载的{@link Chunk 区块}的数组.\n<p>\n原文：\nGets an array of all loaded {@link Chunk}s",
		"setSpawnLocation":"设置这个世界的出生点位置.\n<p>\n原文：\nSets the spawn location of the world",
		"getHumidity":"获取指定方块坐标的湿度。\n<p>\n方块不存在时运行这个方法是安全的，它不会创建方块。\n<p>\n原文：\nGets the humidity for the given block coordinates.\n<p>\nIt is safe to run this method when the block does not exist, it will\nnot create the block.",
		"isChunkLoaded":"检查在指定坐标的{@link Chunk 区块}是否被加载.\n<p>\n原文：\nChecks if the {@link Chunk} at the specified coordinates is loaded",
		"getEntitiesByClass":"获取一个在这个世界的所有与指定的类/接口相匹配的实体的集合.\n<p>\n原文：\nGet a collection of all entities in this World matching the given\nclass/interface",
		"setWeatherDuration":"设置当前天气的剩余时间，单位为tick.\n<p>\n原文：\nSet the remaining time in ticks of the current conditions.",
		"getEntitiesByClasses":"获取一个在这个世界的所有与任一指定的类/接口相匹配的实体的集合.\n<p>\n原文：\nGet a collection of all entities in this World matching any of the\ngiven classes/interfaces",
		"getEmptyChunkSnapshot":"获取空区块的快照（相当于所有空气方块），可设置包含有效生物群系数据。用于表示一个未生成的区块，或者只用于获取生物群系数据而不加载区块。\n<p>\n原文：\nGet empty chunk snapshot (equivalent to all air blocks), optionally\nincluding valid biome data. Used for representing an ungenerated chunk,\nor for fetching only biome data without loading a chunk.",
		"getGameRuleValue":"获取指定游戏规则的当前状态。\n<p>\n如果规则是空则会返回null\n<p>\n原文：\nGets the current state of the specified rule\n<p>\nWill return null if rule passed is null",
		"getChunkAt":"获取这个{@link Block 方块}所处的{@link Chunk 区块}.\n<p>\n原文：\nGets the {@link Chunk} that contains the given {@link Block}",
		"getEntities":"获取一个这个世界所有实体的列表.\n<p>\n原文：\nGet a list of all entities in this World",
		"setThundering":"设置这个世界是否在打雷.\n<p>\n原文：\nSet whether it is thundering.",
		"isChunkInUse":"检查指定坐标的{@link Chunk 区块}是否被加载且被一个或更多的玩家使用.\n<p>\n原文：\nChecks if the {@link Chunk} at the specified coordinates is loaded and\nin use by one or more players",
		"getLivingEntities":"获取一个这个世界所有生物实体的列表.\n<p>\n原文：\nGet a list of all living entities in this World",
		"getTemperature":"获取指定方块坐标的温度。\n<p>\n方块不存在时运行这个方法是安全的，它不会创建方块。\n<p>\n原文：\nGets the temperature for the given block coordinates.\n<p>\nIt is safe to run this method when the block does not exist, it will\nnot create the block.",
		"regenerateChunk":"重新生成指定坐标的{@link Chunk 区块}.\n<p>\n原文：\nRegenerates the {@link Chunk} at the specified coordinates",
		"getTicksPerAnimalSpawns":"获取世界生成动物的时间间隔（单位为tick）。\n<p>\n这个数值决定每次尝试生成动物之间的时间间隔（单位为tick）。\n<p>\n<b>用法示例：</b>\n<ul>\n<li>数值为1意味着服务器每1tick都会尝试在这个世界生成动物。\n<li>数值为400意味着服务器每400tick会尝试在这个世界生成动物。\n<li>数值低于0则会被重置为Minecraft的默认值。\n</ul>\n<p>\n<b>注意：</b>\n如果设置为0，则会禁止这个世界生成动物。我们一般使用{@link #setSpawnFlags(boolean, boolean)}来代替。\n<p>\nMinecraft的默认值：400。\n<p>\n原文：\nGets the world's ticks per animal spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn animals.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn animals in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn animals\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, animal spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 400.",
		"canGenerateStructures":"获取建筑物是否会被生成。\n<p>\n原文：\nGets whether or not structures are being generated.",
		"getFullTime":"获取这个世界完整的游戏时间.\n<p>\n原文：\nGets the full in-game time on this world",
		"getTime":"获取这个世界在游戏中的相对时间.\n<p>\n相对时间类似于小时数*1000（译注：意思是，如果这个世界在游戏中的时间为一个小时则相对时间显示为1000，一小时十二分为1200).\n<p>\n原文：\nGets the relative in-game time of this world.\n<p>\nThe relative time is analogous to hours * 1000",
		"save":"保存世界到磁盘.\n<p>\n原文：Saves world to disk",
		"playEffect":"向在以指定位置为圆心的指定半径内的所有玩家施加(给予)一个效果。\n<p>\n原文：\nPlays an effect to all players within a given radius around a location.",
		"getSpawnLocation":"获取这个世界的默认出生点{@link Location 位置}.\n<p>\n原文：\nGets the default spawn {@link Location} of this world",
		"getWorldFolder":"获取这个世界保存在磁盘的哪个文件夹。\n<p>\n原文：\nGets the folder of this world on disk.",
		"setDifficulty":"设置世界的游戏难度。\n<p>\n原文：\nSets the Difficulty of the world.",
		"getHighestBlockAt":"获取指定{@link Location 位置}的最顶上的方块(不是空气).\n<p>\n译注：相当于getHightestBlockYAt(location),只不过那是获得方块Y坐标,而这个是获取方块对象.\n原文：Gets the highest non-empty block at the given coordinates",
		"getSeaLevel":"获取世界的海平面。\n<p>\n这个值总是{@link #getMaxHeight()}的一半\n<p>\n原文：\nGets the sea level for this world.\n<p>\nThis is often half of {@link #getMaxHeight()}",
		"getAllowAnimals":"获取动物能不能在这个世界生成。\n<p>\n原文：\nGets whether animals can spawn in this world.",
		"hasStorm":"返回世界现在是否有雷暴.\n<p>\n原文：\nReturns whether the world has an ongoing storm.",
		"getBlockTypeIdAt":"获取指定{@link Location 位置}的{@link Block 方块}的ID.\n<p>\n原文：Gets the block type ID at the given {@link Location}",
		"playSound":"Play a Sound at the provided Location in the World.\n<p>\nThis function will fail silently if Location or Sound are null. No sound\nwill be heard by the players if their clients do not have the respective\nsound for the value passed.",
		"spawnEntity":"在指定的{@link Location 位置}创建一个实体.\n<p>\n原文：\nCreates a entity at the given {@link Location}",
		"generateTree":"在指定的{@link Location 位置}创建一颗树.\n<p>\n原文：\nCreates a tree at the given {@link Location}",
		"getBiome":"获取指定方块坐标的生物群系。\n<p>\n原文：\nGets the biome for the given block coordinates.",
		"spawnParticle":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.",
		"getSeed":"获取世界的种子.\n<p>\n原文：\nGets the Seed for this world.",
		"loadChunk":"加载指定坐标的{@link Chunk 区块}.\n<p>\n原文：\nLoads the {@link Chunk} at the specified coordinates",
		"getThunderDuration":"获取这个世界打雷的持续时间.\n<p>\n原文：\nGet the thundering duration.",
		"getAllowMonsters":"获取怪物能不能在这个世界生成。\n<p>\n原文：\nGets whether monsters can spawn in this world.",
		"createExplosion":"在指定的坐标生成指定威力的爆炸并设置方块是否会着火.\n<p>\n原文：\nCreates explosion at given coordinates with given power and optionally\nsetting blocks on fire.",
		"getEnvironment":"获取世界的{@link Environment 环境}类型.\n<p>\n原文：\nGets the {@link Environment} type of this world",
		"setPVP":"设置世界的PVP设置.\n<p>\n原文：\nSets the PVP setting for this world.",
		"getTicksPerMonsterSpawns":"获取世界生成怪物的时间间隔（单位为tick）。\n<p>\n这个数值决定每次尝试生成怪物之间的时间间隔（单位为tick）。\n<p>\n<b>用法示例：</b>\n<ul>\n<li>数值为1意味着服务器每1tick都会尝试在这个世界生成怪物。\n<li>数值为400意味着服务器每400tick会尝试在这个世界生成怪物。\n<li>数值低于0则会被重置为Minecraft的默认值。\n</ul>\n<p>\n<b>注意：</b>\n如果设置为0，则会禁止这个世界生成怪物。我们一般使用{@link #setSpawnFlags(boolean, boolean)}来代替。\n<p>\nMinecraft的默认值：1。\n<p>\n原文：\nGets the world's ticks per monster spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn monsters.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, monsters spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 1.",
		"getBlockAt":"获取指定{@link Location 位置}的{@link Block 方块}.\n<p>\n原文：Gets the {@link Block} at the given {@link Location}",
		"getWorldType":"获取世界类型。\n<p>\n原文：\nGets the type of this world.",
		"getKeepSpawnInMemory":"获取世界的出生点是否会在内存中保存加载。\n<p>\n原文：\nGets whether the world's spawn area should be kept loaded into memory\nor not.",
		"isAutoSave":"获取世界是否会自动保存。\n<p>\n原文：\nGets whether or not the world will automatically save",
		"getMonsterSpawnLimit":"获取这个世界一个区块内的怪物生成数限制。\n<p>\n原文：\nGets limit for number of monsters that can spawn in a chunk in this\nworld",
		"spawn":"Spawn an entity of a specific class at the given {@link Location}, with\nthe supplied function run before the entity is added to the world.\n<br>\nNote that when the function is run, the entity will not be actually in\nthe world. Any operation involving such as teleporting the entity is undefined\nuntil after this function returns.",
		"isThundering":"返回这个世界是否在打雷.\n<p>\n原文：\nReturns whether there is thunder.",
		"setMonsterSpawnLimit":"设置这个世界一个区块内的怪物生成数限制。\n<p>\n<b>注意：</b>如果设置为负数则这个世界会使用服务器普遍的生成限制来代替。\n<p>\n原文：\nSets the limit for number of monsters that can spawn in a chunk in this\nworld\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.",
		"setAmbientSpawnLimit":"设置这个世界一个区块内周围的怪物的生成数限制。\n<p>\n<b>注意：</b>如果设置为负数则这个世界会使用服务器普遍的生成限制来代替。\n<p>\n原文：\nSets the limit for number of ambient mobs that can spawn in a chunk in\nthis world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.",
		"unloadChunk":"卸载并选择是否保存指定坐标的{@link Chunk 区块}.\n<p>\n原文：\nUnloads and optionally saves the {@link Chunk} at the specified\ncoordinates",
		"getAmbientSpawnLimit":"获取这个世界一个区块内周围的怪物的生成数限制。\n<p>\n原文：\nGets the limit for number of ambient mobs that can spawn in a chunk in\nthis world",
		"setKeepSpawnInMemory":"设置世界的出生点是否会在内存中保存加载。\n<p>\n原文：\nSets whether the world's spawn area should be kept loaded into memory\nor not.",
		"getPVP":"获取世界当前的PVP设置.\n<p>\n原文：\nGets the current PVP setting for this world.",
		"refreshChunk":"将{@link Chunk 区块}重新发送给所有的客户端.\n<p>\n原文：\nResends the {@link Chunk} to all clients",
		"getDifficulty":"获取世界的游戏难度。\n<p>\n原文：\nGets the Difficulty of the world.",
		"getWorldBorder":"获取这个世界的世界边界对象。\n<p>\n原文：\nGets the world border for this world.",
		"spawnFallingBlock":"在指定的{@link Location 位置}根据指定的方块ID（会被转换为{@link Material 物品}）生成一个{@link FallingBlock 正在下落的方块}实体.\n<p>\n原文：\nSpawn a {@link FallingBlock} entity at the given {@link Location} of\nthe specified blockId (converted to {@link Material})"
	},
	"ValidatingPrompt":{
		"acceptInput":"Accepts and processes input from the user and validates it. If\r\nvalidation fails, this prompt is returned for re-execution, otherwise\r\nthe next Prompt in the prompt graph is returned.",
		"acceptValidatedInput":"Override this method to accept and processes the validated input from\r\nthe user. Using the input, the next Prompt in the prompt graph should\r\nbe returned.",
		"isInputValid":"Override this method to check the validity of the player's input.",
		"ClassDescription":"ValidatingPrompt is the base class for any prompt that requires validation.\r\nValidatingPrompt will keep replaying the prompt text until the user enters\r\na valid response.",
		"blocksForInput":"Ensures that the prompt waits for the user to provide input.",
		"getFailedValidationText":"Optionally override this method to display an additional message if the\r\nuser enters an invalid input."
	},
	"FileConfiguration":{
		"load":"Loads this {@link FileConfiguration} from the specified location.\r\n<p>\r\nAll the values contained within this configuration will be removed,\r\nleaving only settings and defaults, and the new values will be loaded\r\nfrom the given file.\r\n<p>\r\nIf the file cannot be loaded for any reason, an exception will be\r\nthrown.",
		"saveToString":"将这个 {@link FileConfiguration} 转化为String对象并且返回",
		"save":"以一个 {@link FileConfiguration} 调用该方法，将文件储存到指定位置.\r\n<p>\r\n如果你指定储存的这个文件不存在,这个方法会帮你自动创建一个. 如果这个文件存在,那么该方法会把所有未保存的更改直接写入文件\r\n并且直接覆盖原文件. 如果储存或者创建失败,将会抛出一个异常\r\n<p>\r\n本方法会用系统默认的编码储存,不过也有可能用UTF-8出储存",
		"loadFromString":"Loads this {@link FileConfiguration} from the specified string, as\r\nopposed to from file.\r\n<p>\r\nAll the values contained within this configuration will be removed,\r\nleaving only settings and defaults, and the new values will be loaded\r\nfrom the given string.\r\n<p>\r\nIf the string is invalid in any way, an exception will be thrown.",
		"ClassDescription":"这是一个实现了 {@link Configuration} 的配置文件的基类",
		"buildHeader":"Compiles the header for this {@link FileConfiguration} and returns the\r\nresult.\r\n<p>\r\nThis will use the header from {@link #options()} -&gt; {@link\r\nFileConfigurationOptions#header()}, respecting the rules of {@link\r\nFileConfigurationOptions#copyHeader()} if set."
	},
	"EntityEffect":{
		"ClassDescription":"实体能发生的效果列表。",
		"getByData":"获取指定数据值的实体效果。\r\n<p>\r\n原文：\r\nGets the EntityEffect with the given data value",
		"getData":"获取实体效果的数据值。\r\n<p>\r\n原文：\r\nGets the data value of this EntityEffect"
	},
	"VehicleUpdateEvent":{
		"ClassDescription":"载具更新事件"
	},
	"MetadataStoreBase":{
		"setMetadata":"Adds a metadata value to an object. Each metadata value is owned by a\r\nspecific {@link Plugin}. If a plugin has already added a metadata value\r\nto an object, that value will be replaced with the value of {@code\r\nnewMetadataValue}. Multiple plugins can set independent values for the\r\nsame {@code metadataKey} without conflict.\r\n<p>\r\nImplementation note: I considered using a {@link\r\njava.util.concurrent.locks.ReadWriteLock} for controlling access to\r\n{@code metadataMap}, but decided that the added overhead wasn't worth\r\nthe finer grained access control.\r\n<p>\r\nBukkit is almost entirely single threaded so locking overhead shouldn't\r\npose a problem.",
		"getMetadata":"Returns all metadata values attached to an object. If multiple\r\nhave attached metadata, each will value will be included.",
		"invalidateAll":"Invalidates all metadata in the metadata store that originates from the\r\ngiven plugin. Doing this will force each invalidated metadata item to\r\nbe recalculated the next time it is accessed.",
		"removeMetadata":"Removes a metadata item owned by a plugin from a subject.",
		"hasMetadata":"Tests to see if a metadata attribute has been set on an object.",
		"disambiguate":"Creates a unique name for the object receiving metadata by combining\r\nunique data from the subject with a metadataKey.\r\n<p>\r\nThe name created must be globally unique for the given object and any\r\ntwo equivalent objects must generate the same unique name. For example,\r\ntwo Player objects must generate the same string if they represent the\r\nsame player, even if the objects would fail a reference equality test."
	},
	"WorldType":{
		"getName":"获取世界种类名称.\n<p>\n原文:\nGets the name of this WorldType",
		"getByName":"用世界种类名获取世界种类.\n<p>\n原文:\nGets a Worldtype by its name",
		"ClassDescription":"代表世界的种类."
	},
	"DragonFireball":{},
	"PlayerUnregisterChannelEvent":{
		"ClassDescription":"当玩家注销插件通道时触发事件."
	},
	"Horse":{
		"setColor":"Sets the horse's color.\r\n<p>\r\nAttempting to set a color for any donkey, mule, skeleton horse or\r\nundead horse will not result in a change.",
		"getStyle":"Gets the horse's style.\r\nStyles determine what kind of markings or patterns a horse has.\r\n<p>\r\nStyles only apply to horses, not to donkeys, mules, skeleton horses\r\nor undead horses.",
		"getColor":"Gets the horse's color.\r\n<p>\r\nColors only apply to horses, not to donkeys, mules, skeleton horses\r\nor undead horses.",
		"setStyle":"Sets the style of this horse.\r\nStyles determine what kind of markings or patterns a horse has.\r\n<p>\r\nAttempting to set a style for any donkey, mule, skeleton horse or\r\nundead horse will not result in a change.",
		"setCarryingChest":"",
		"ClassDescription":"Represents a Horse.",
		"isCarryingChest":""
	},
	"Tree":{
		"getDirection":"获取木头的朝向.\r\n<p>\r\n原文:Get direction of the log",
		"ClassDescription":"Represents the different types of Tree block that face a direction.",
		"setDirection":"设置木头的朝向.\r\n<p>\r\n原文:Set direction of the log"
	},
	"InventoryPickupItemEvent":{
		"getItem":"获取被捡起的物品实体.\r\n<p>\r\n原文:Gets the Item entity that was picked up",
		"ClassDescription":"当漏斗/漏斗矿车收起掉落的物品时触发本事件.",
		"getInventory":"获取捡起这个物品的背包.\r\n<p>\r\n原文:Gets the Inventory that picked up the item"
	},
	"BlockGrowEvent":{
		"ClassDescription":"当一个方块在世界中自然生长的时触发此事件(如小麦生长).\r\n<p>\r\n举几个例子:\r\n<ul>\r\n<li>小麦\r\n<li>甘蔗\r\n<li>仙人掌\r\n<li>西瓜\r\n<li>南瓜\r\n</ul>\r\n<p>\r\n如果此事件被取消,方块将不会生长",
		"getNewState":"获取这个方块生长之后的新状态.\r\n<p>\r\n原文：Gets the state of the block where it will form or spread to."
	},
	"PlayerInteractEntityEvent":{
		"getRightClicked":"获取被玩家点击的实体.\n<p>\n原文:Gets the entity that was rightclicked by the player.",
		"getHand":"用于执行这次交互的手.\n<p>\n原文:The hand used to perform this interaction.",
		"ClassDescription":"当玩家点击一个实体时调用此事件."
	},
	"FishHook":{
		"setBiteChance":"Sets the chance of a fish biting.\n<p>\n0.0 = No Chance.<br>\n1.0 = Instant catch.",
		"ClassDescription":"Represents a fishing hook.",
		"getBiteChance":"Gets the chance of a fish biting.\n<p>\n0.0 = No Chance.<br>\n1.0 = Instant catch."
	},
	"Parrot":{
		"getVariant":"Get the variant of this parrot.",
		"setVariant":"Set the variant of this parrot.",
		"ClassDescription":"Represents a Parrot."
	},
	"VehicleCreateEvent":{
		"ClassDescription":"载具创建事件"
	},
	"EnderCrystal":{
		"ClassDescription":"一个水晶，能治疗附近的末影龙",
		"isShowingBottom":"Return whether or not this end crystal is showing the\nbedrock slate underneath it.",
		"getBeamTarget":"Gets the location that this end crystal is pointing its beam to.",
		"setBeamTarget":"Sets the location that this end crystal is pointing to. Passing a null\nvalue will remove the current beam.",
		"setShowingBottom":"Sets whether or not this end crystal is showing the\nbedrock slate underneath it."
	},
	"Evoker":{
		"getCurrentSpell":"Gets the {@link Spell} the Evoker is currently using.",
		"ClassDescription":"Represents an Evoker \"Illager\".",
		"setCurrentSpell":"Sets the {@link Spell} the Evoker is currently using."
	},
	"ChannelNotRegisteredException":{
		"ClassDescription":"如果插件尝试向未注册的通道发消息则抛出此异常。"
	},
	"NameTagVisibility":{
		"ClassDescription":""
	},
	"HangingEvent":{
		"ClassDescription":"代表与悬挂实体有关的事件.",
		"getEntity":"获取涉及了这个事件的悬挂实体.\r\n<p>\r\n原文：Gets the hanging entity involved in this event."
	},
	"EntityType":{
		"getName":"",
		"fromName":"",
		"isSpawnable":"Some entities cannot be spawned using {@link\nWorld#spawnEntity(Location, EntityType)} or {@link\nWorld#spawn(Location, Class)}, usually because they require additional\ninformation in order to spawn.",
		"getTypeId":"",
		"fromId":""
	},
	"Rails":{
		"getConvertedData":"返回没有使用{@link PoweredRail} 和 {@link DetectorRail} 扩展属性的数据值. 于{@link ExtendedRails}重写.\r\n<p>\r\n原文:Return the data without the extended properties used by {@link\r\nPoweredRail} and {@link DetectorRail}. Overridden in {@link\r\nExtendedRails}",
		"getDirection":"",
		"isCurve":"",
		"ClassDescription":"代表Minecraft的铁轨.",
		"isOnSlope":"",
		"setDirection":"设置这个轨道的方向.\r\n<p>\r\n注意轨道是双向的，并且如果铁轨设置在斜坡上将返回上升方向.如果这个铁轨被作为弯道，\r\n<p>\r\n原文:Set the direction of these tracks\r\n<p>\r\nNote that tracks are bidirectional and that the direction returned is\r\nthe ascending direction if the track is set on a slope. If it is set as\r\na curve, the corner of the track should be supplied."
	},
	"Objective":{
		"getCriteria":"获取对象规则.\r\n<p>\r\n原文:Gets the criteria this objective tracks.",
		"getName":"获取对象名称.\r\n<p>",
		"setDisplaySlot":"设置对象显示的计分板位置区域.\r\n<p>\r\n原文:Sets this objective to display on the specified slot for the\r\nscoreboard, removing it from any other display slot.",
		"getDisplayName":"获取对象内用于显示的名称.\r\n<p>",
		"unregister":"注销对象 {@link Scoreboard scoreboard.}.\r\n<p>",
		"getScoreboard":"获取对象所链接的计分板.\r\n<p>",
		"ClassDescription":"计分板对象: 显示特定条目分数.\r\n<p>\r\n该对象仅显示关联项目.{@link #getScoreboard() scoreboard}.\r\n<p>\r\n原文:An objective on a scoreboard that can show scores specific to entries. This\r\nobjective is only relevant to the display of the associated {@link\r\n#getScoreboard() scoreboard}.",
		"setDisplayName":"设置对象内用于显示的名称.\r\n<p>",
		"getScore":"获取一个对象的计分项目的积分.\r\n<p>\r\n原文:Gets an entry's Score for an Objective on this Scoreboard.",
		"isModifiable":"获取布尔值:对象分数是否可以被插件直接修改.\r\n<p>",
		"getDisplaySlot":"获取对象显示的计分板位置区域.\r\n<p>\r\nGets the display slot this objective is displayed at."
	},
	"ChestedHorse":{
		"setCarryingChest":"Sets whether the horse has a chest equipped. Removing a chest will also\nclear the chest's inventory.",
		"ClassDescription":"Represents Horse-like creatures which can carry an inventory.",
		"isCarryingChest":"Gets whether the horse has a chest equipped."
	},
	"Block":{
		"isBlockPowered":"Returns true if the block is being powered by Redstone.",
		"getWorld":"获取此方块所处的世界.\n<p>\n原文：Gets the world which contains this Block",
		"getLocation":"Stores the location of the block in the provided Location object.\n<p>\nIf the provided Location is null this method does nothing and returns\nnull.",
		"getLightFromSky":"Get the amount of light at this block from the sky.\n<p>\nAny light given from other sources (such as blocks like torches) will\nbe ignored.",
		"isBlockIndirectlyPowered":"Returns true if the block is being indirectly powered by Redstone.",
		"ClassDescription":"代表方块. This is a live object, and only one Block may exist for\nany given location in a world. The state of the block may change\nconcurrently to your own handling of it; use block.getState() to get a\nsnapshot state of a block which will not be modified.",
		"getRelative":"Gets the block at the given distance of the given face\n<p>\nFor example, the following method places water at 100,102,100; two\nblocks above 100,100,100.\n\n<pre>\nBlock block = world.getBlockAt(100, 100, 100);\nBlock shower = block.getRelative(BlockFace.UP, 2);\nshower.setType(Material.WATER);\n</pre>",
		"getTypeId":"获取此方块的种类ID.\n<p>\n原文：Gets the type-id of this block",
		"isBlockFaceIndirectlyPowered":"Returns true if the block face is being indirectly powered by Redstone.",
		"setBiome":"Sets the biome that this block resides in",
		"getData":"获取此方块的元数据.\n<p>\n原文:Gets the metadata for this block",
		"getBiome":"Returns the biome that this block resides in",
		"setData":"为这个方块设置元数据.\n<p>\n原文:Sets the metadata for this block",
		"isEmpty":"Checks if this block is empty.\n<p>\nA block is considered empty when {@link #getType()} returns {@link\nMaterial#AIR}.",
		"setTypeId":"Sets the type-id of this block",
		"setType":"Sets the type of this block",
		"getFace":"Gets the face relation of this block compared to the given block.\n<p>\nFor example: \n<pre>{@code\nBlock current = world.getBlockAt(100, 100, 100);\nBlock target = world.getBlockAt(100, 101, 100);\n\ncurrent.getFace(target) == BlockFace.Up;\n}</pre>\n<br>\nIf the given block is not connected to this block, null may be returned",
		"isBlockFacePowered":"Returns true if the block face is being powered by Redstone.",
		"getHumidity":"Gets the humidity of the biome of this block",
		"getX":"获取此方块的X坐标.\n<p>\n原文：Gets the x-coordinate of this block",
		"setTypeIdAndData":"Sets the type-id of this block",
		"getY":"获取此方块的Y坐标.\n<p>\n原文：Gets the y-coordinate of this block",
		"getState":"Captures the current state of this block. You may then cast that state\ninto any accepted type, such as Furnace or Sign.\n<p>\nThe returned object will never be updated, and you are not guaranteed\nthat (for example) a sign is still a sign after you capture its state.",
		"isLiquid":"Checks if this block is liquid.\n<p>\nA block is considered liquid when {@link #getType()} returns {@link\nMaterial#WATER}, {@link Material#STATIONARY_WATER}, {@link\nMaterial#LAVA} or {@link Material#STATIONARY_LAVA}.",
		"getZ":"获取此方块的Z坐标.\n<p>\n原文：Gets the z-coordinate of this block",
		"getBlockPower":"Returns the redstone power being provided to this block",
		"getType":"获取此方块的种类.\n<p>\n原文:Gets the type of this block",
		"getPistonMoveReaction":"Returns the reaction of the block when moved by a piston",
		"getChunk":"获取包含此方块的区块(方块所在的区块).\n<p>\n原文:Gets the chunk which contains this block",
		"getDrops":"Returns a list of items which would drop by destroying this block with\na specific tool",
		"getLightLevel":"获取此方块的光亮等级，范围0~15.\n<p>\n原文：Gets the light level between 0-15",
		"getLightFromBlocks":"Get the amount of light at this block from nearby blocks.\n<p>\nAny light given from other sources (such as the sun) will be ignored.",
		"getTemperature":"Gets the temperature of the biome of this block",
		"breakNaturally":"Breaks the block and spawns items as if a player had digged it with a\nspecific tool"
	},
	"PlayerLevelChangeEvent":{
		"getOldLevel":"获得此玩家改变之前的经验值.\r\n<p>\r\n原文:Gets the old level of the player",
		"getNewLevel":"获得此玩家要改变成的经验值.\r\n<p>\r\n原文:Gets the new level of the player",
		"ClassDescription":"玩家经验改变事件."
	},
	"MapPalette":{
		"resizeImage":"Resize an image to 128x128.",
		"imageToBytes":"Convert an Image to a byte[] using the palette.",
		"getColor":"Get the value of the given color in the palette.",
		"ClassDescription":"Represents the palette that map items use.\n<p>\nThese fields are hee base color ranges. Each entry corresponds to four\ncolors of varying shades with values entry to entry + 3.",
		"matchColor":"Get the index of the closest matching color in the palette to the given\ncolor."
	},
	"Tripwire":{
		"setActivated":"设置绊线是否被激活.\r\n<p>\r\n原文:Set tripwire activated state",
		"isObjectTriggering":"测试绊线是否由物体直接触发.\r\n<p>\r\n原文:Test if object triggering this tripwire directly",
		"ClassDescription":"代表绊线",
		"isActivated":"测试绊线是否被激活.\r\n<p>\r\n原文:Test if tripwire is currently activated",
		"setObjectTriggering":"设置绊线是否由物体触发.\r\n<p>\r\n原文:Set object triggering state for this tripwire"
	},
	"FileUtil":{
		"ClassDescription":"文件工具类。",
		"copy":"复制一个文件至另一个位置.\r\n<p>\r\n原文：This method copies one file to another location"
	},
	"CommandMap":{
		"clearCommands":"清除所有已注册命令.\n<p>\n原文：Clears all registered commands.",
		"dispatch":"查找请求的命令并执行，如果找到了。\n<p>\n原文：Looks for the requested command and executes it if found.",
		"registerAll":"注册所有属于某个插件的命令.\n<p>\n调用者可使用:-\n<ul>\n<li>用 command.getName() 确定这个别名已注册给这个命令\n<li>用 command.getAliases() 确定这个别名在哪注册\n</ul>\n原文：Registers all the commands belonging to a certain plugin.\n<p>\nCaller can use:-\n<ul>\n<li>command.getName() to determine the label registered for this\n    command\n<li>command.getAliases() to determine the aliases which where\n    registered\n</ul>",
		"getCommand":"获取指定名称的注册命令.\n<p>\n原文：Gets the command registered to the specified name",
		"tabComplete":"Looks for the requested command and executes an appropriate\ntab-completer if found. This method will also tab-complete partial\ncommands.",
		"register":"注册一个命令.如果成功返回true，如果名称已被占据、fallback已被使用则返回false.\n<p>\n调用者可使用:-\n<ul>\n<li>用 command.getName() 确定这个别名已注册给这个命令\n<li>用 command.getAliases() 确定这个别名在哪注册\n</ul>\n<p>\n原文：Registers a command. Returns true on success; false if name is already\ntaken and fallback had to be used.\n<p>\nCaller can use:-\n<ul>\n<li>command.getName() to determine the label registered for this\n    command\n<li>command.getAliases() to determine the aliases which where\n    registered\n</ul>"
	},
	"EntityBreakDoorEvent":{
		"ClassDescription":"当{@link Entity 实体}破坏门时触发本事件.\r\n<p>\r\n取消该事件将导致该事件被延迟."
	},
	"WorldSaveEvent":{
		"ClassDescription":"当一个世界被保存时调用."
	},
	"PluginChannelDirection":{
		"ClassDescription":"代表插件通道的不同指向。"
	},
	"FormattedCommandAlias":{},
	"PlayerRespawnEvent":{
		"setRespawnLocation":"设置一个新的重生位置.\r\n<p>\r\n原文:Sets the new respawn location",
		"ClassDescription":"玩家重生事件.",
		"isBedSpawn":"获取此玩家是否在他的床上重生.\r\n<p>\r\n原文:Gets whether the respawn location is the player's bed.",
		"getRespawnLocation":"获取当前重生的位置.\r\n<p>\r\n原文:Gets the current respawn location"
	},
	"BlockFormEvent":{
		"ClassDescription":"当一个方块因为自然变化被放置、更改或者蔓延时(比如下雪),触发此事件.\r\n<p>\r\n使用 {@link BlockSpreadEvent} 来捕获方块，事实上在方块蔓延的时候，不只是\r\n\"随意地\" 构成。\r\n<p>\r\n例子:\r\n<ul>\r\n<li>雪在下雪的时候形成.\r\n<li>冰在有雪的生物群系中构成.\r\n<li>黑曜石/圆石/(石头)由于(熔岩)与水接触而蔓延(熔岩与水的接触的结果).\r\n<li>混凝土由于混凝土粉末与水的混合固化而蔓延.\r\n</ul>\r\n<p>\r\n如果本事件被取消，方块将不会蔓延等."
	},
	"EquipmentSlot":{},
	"EntityCombustByEntityEvent":{
		"getCombuster":"返回造成燃烧的实体.",
		"ClassDescription":"当一个实体造成另外一个实体燃烧时触发该事件.\r\n原文:\r\nCalled when an entity causes another entity to combust."
	},
	"ChunkPopulateEvent":{
		"ClassDescription":"当一个新的区块填充完毕时调用.\r\n<p>\r\n如果您想利用本事件来填充区块，请参见 {@link BlockPopulator}."
	},
	"PlayerRegisterChannelEvent":{
		"ClassDescription":"玩家注册通信通道之后立即触发此事件."
	},
	"VehicleDamageEvent":{
		"getDamage":"获取载具受到的伤害.\r\n<p>\r\n原文:Gets the damage done to the vehicle",
		"ClassDescription":"载具被伤害的事件",
		"setDamage":"设置载具受到的伤害.\r\n<p>\r\n原文:Sets the damage done to the vehicle",
		"getAttacker":"获取攻击这个载具的实体.\r\n<p>\r\n原文:Gets the Entity that is attacking the vehicle"
	},
	"PluginAwareness":{
		"ClassDescription":"Represents a concept that a plugin is aware of.\n<p>\nThe internal representation may be singleton, or be a parameterized\ninstance, but must be immutable."
	},
	"LivingEntity":{
		"setGliding":"使实体开始或停止滑翔。即使没有装备滑翔翼也会生效，但会在被服务器立即恢复（后面的无能为力）\r\nMakes entity start or stop gliding. This will work even if an Elytra\r\nis not equipped, but will be reverted by the server immediately after\r\nunless an event-cancelling mechanism is put in place.",
		"getRemainingAir":"返回生物实体剩余的氧气值，单位为tick。\r\n原文：\r\nReturns the amount of air that the living entity has remaining, in\r\nticks.",
		"isLeashed":"返回实体当前是否被拴住。\r\n原文：\r\nReturns whether the entity is currently leashed.",
		"ClassDescription":"代表一个生物实体，如一只怪物或一名玩家。\r\n原文：\r\nRepresents a living entity, such as a monster or player",
		"getEyeHeight":"获取生物实体眼睛离脚高度。\r\n原文：\r\nGets the height of the living entity's eyes above its Location.",
		"getEquipment":"获取生物实体穿戴的装备背包栏。\r\n原文：\r\nGets the inventory with the equipment worn by the living entity.",
		"isGliding":"检查实体是否正在滑翔，如正在使用滑翔翼。\r\n原文：\r\nChecks to see if an entity is gliding, such as using an Elytra.",
		"setRemainingAir":"设置生物实体剩余的氧气值，单位为tick。\r\n原文：\r\nSets the amount of air that the living entity has remaining, in ticks.",
		"setAI":"设置实体是否具有AI。\r\n原文：\r\nSets whether an entity will have AI.",
		"setCollidable":"设置实体\r\nSet if this entity will be subject to collisions other entities.\r\n<p>\r\nNote that collisions are bidirectional, so this method would need to be\r\nset to false on both the collidee and the collidant to ensure no\r\ncollisions take place.",
		"getMaximumAir":"返回生物实体所能拥有的氧气最大值，单位为tick。\r\n原文：\r\nReturns the maximum amount of air the living entity can have, in ticks.",
		"isCollidable":"Gets if this entity is subject to collisions with other entities.\r\n<p>\r\nPlease note that this method returns only the custom collidable state,\r\nnot whether the entity is non-collidable for other reasons such as being\r\ndead.",
		"addPotionEffect":"向生物实体添加指定的{@link PotionEffect}（药水效果）。\r\n<p>\r\n一个指定的{@link PotionEffectType}（药水效果类型）只能有一种药水效果存在。\r\n原文：\r\nAdds the given {@link PotionEffect} to the living entity.\r\n<p>\r\nOnly one potion effect can be present for a given {@link\r\nPotionEffectType}.",
		"hasPotionEffect":"返回生物实体是否已经存在一个指定的{@link PotionEffectType}效果。\r\n原文：\r\nReturns whether the living entity already has an existing effect of\r\nthe given {@link PotionEffectType} applied to it.",
		"hasLineOfSight":"检查生物实体是否阻挡另一个的视线。（？？？）\r\n<p>\r\n这使用了与敌对怪物用于寻找最近玩家相同的算法。\r\n原文：\r\nChecks whether the living entity has block line of sight to another.\r\n<p>\r\nThis uses the same algorithm that hostile mobs use to find the closest\r\nplayer.",
		"getMaximumNoDamageTicks":"返回生物实体当前最大无伤害时间，单位为tick。\r\n<p>\r\n即生物实体不会受到伤害的最大持续时间。\r\n原文：\r\nReturns the living entity's current maximum no damage ticks.\r\n<p>\r\nThis is the maximum duration in which the living entity will not take\r\ndamage.",
		"getRemoveWhenFarAway":"返回生物实体是否会在远离玩家时消失。\r\n<p>\r\n默认情况下，动物不会被移除而怪物会。\r\n原文：\r\nReturns if the living entity despawns when away from players or not.\r\n<p>\r\nBy default, animals are not removed while other mobs are.",
		"getNoDamageTicks":"返回生物实体当前无伤害时间，单位为tick。\r\n原文：\r\nReturns the living entity's current no damage ticks.",
		"setRemoveWhenFarAway":"设置生物实体是否会在远离玩家时消失。\r\n原文：\r\nSets whether or not the living entity despawns when away from players\r\nor not.",
		"setNoDamageTicks":"设置生物实体当前无伤害时间，单位为tick。\r\n原文：\r\nSets the living entity's current no damage ticks.",
		"setLeashHolder":"设置握持拴绳的实体。\r\n<p>\r\n此方法对末影龙，凋零，玩家或蝙蝠无效。除拴绳外的非生物实体将不会像握持拴绳者一样坚持。（？？？）\r\n原文：\r\nSets the leash on this entity to be held by the supplied entity.\r\n<p>\r\nThis method has no effect on EnderDragons, Withers, Players, or Bats.\r\nNon-living entities excluding leashes will not persist as leash\r\nholders.",
		"getEyeLocation":"获取生物实体眼睛的详细方位的Location对象。\r\n原文：\r\nGet a Location detailing the current eye position of the living entity.",
		"addPotionEffects":"尝试向生物实体添加所有指定的{@link PotionEffect}（药水效果）。\r\n原文：\r\nAttempts to add all of the given {@link PotionEffect} to the living\r\nentity.",
		"hasAI":"检查实体是否具有AI。\r\n原文：\r\nChecks whether an entity has AI.",
		"getLeashHolder":"获取当前牵引此实体的实体。\r\n原文：\r\nGets the entity that is currently leading this entity.",
		"getKiller":"获取击杀指定生物实体的玩家。\r\n<p>\r\n可能为空。\r\n原文：\r\nGets the player identified as the killer of the living entity.\r\n<p>\r\nMay be null.",
		"getLastDamage":"返回生物实体在当前无伤害时间最后受到的伤害。\r\n<p>\r\n只有当伤害高于这个数值时生物实体才会进一步受到伤害。\r\n<p>\r\nReturns the living entity's last damage taken in the current no damage\r\nticks time.\r\n<p>\r\nOnly damage higher than this amount will further damage the living\r\nentity.",
		"removePotionEffect":"移除当前所有指定的{@link PotionEffectType}效果。\r\n原文：\r\nRemoves any effects present of the given {@link PotionEffectType}.",
		"getLineOfSight":"获取沿生物实体视线上的所有方块。\r\n<p>\r\n这个列表包含生物实体眼睛到目标位置的所有方块。\r\n原文：\r\nGets all blocks along the living entity's line of sight.\r\n<p>\r\nThis list contains all blocks from the living entity's eye position to\r\ntarget inclusive.",
		"getPotionEffect":"返回指定类型的有效{@link PotionEffect}。\r\n<p>\r\n如果效果不存在则会返回null。\r\n原文：\r\nReturns the active {@link PotionEffect} of the specified type.\r\n<p>\r\nIf the effect is not present on the entity then null will be returned.",
		"getLastTwoTargetBlocks":"获取沿生物实体视线上最后两个方块。\r\n<p>\r\n目标方块将是列表中最后的方块。\r\n原文：\r\nGets the last two blocks along the living entity's line of sight.\r\n<p>\r\nThe target block will be the last block in the list.",
		"setMaximumNoDamageTicks":"设置生物实体当前当前最大无伤害时间，单位为tick。\r\n原文：\r\nSets the living entity's current maximum no damage ticks.",
		"getActivePotionEffects":"返回当前作用于生物实体的所有{@link PotionEffect}。\r\n原文：\r\nReturns all currently active {@link PotionEffect}s on the living\r\nentity.",
		"setCanPickupItems":"设置生物实体是否能捡拾物品.\r\n<p>\r\n该方法在 {@link HumanEntity} 上无效.\r\n<p>\r\n原文：\r\nSets whether or not the living entity can pick up items.\r\n<p>\r\nThis method has no effect on a {@link HumanEntity}.",
		"setMaximumAir":"设置生物实体所能拥有的氧气最大值，单位为tick。\r\n原文：\r\nSets the maximum amount of air the living entity can have, in ticks.",
		"setLastDamage":"设置当前无伤害时间段内处理的伤害。\r\n原文：\r\nSets the damage dealt within the current no damage ticks time period.",
		"getCanPickupItems":"获取生物实体是否能捡拾物品。\r\n原文：\r\nGets if the living entity can pick up items.",
		"getTargetBlock":"获取生物实体的目标方块。\r\n原文：\r\nGets the block that the living entity has targeted."
	},
	"Leaves":{
		"isDecaying":"Checks if this leaf block is in the process of decaying",
		"setDecaying":"Set whether this leaf block is in the process of decaying",
		"setDecayable":"Set whether this leaf block will disappear when too far from a log",
		"ClassDescription":"Represents the different types of leaf block that may be permanent or can\ndecay when too far from a log.",
		"isDecayable":"Checks if this leaf block is permanent or can decay when too far from a\nlog"
	},
	"TimingsCommand":{},
	"VehicleEntityCollisionEvent":{
		"ClassDescription":"载具撞击实体的事件"
	},
	"PlayerChangedMainHandEvent":{
		"ClassDescription":"当玩家在客户端设置改变主手时触发本事件.",
		"getMainHand":"获取玩家的新主手.旧的主手依然可以在此期间通过 {@link Player#getMainHand()} 获取到.\r\n<p>\r\n原文:Gets the new main hand of the player. The old hand is still momentarily\r\navailable via {@link Player#getMainHand()}."
	},
	"WeatherType":{
		"ClassDescription":"天气的种类"
	},
	"AttributeInstance":{
		"getValue":"获取当前实例的值,（所有已经应用的值）\n<p>\n原文:Get the value of this instance after all associated modifiers have been\napplied.",
		"getAttribute":"属于该实例的属性.\n<p>\n原文:The attribute pertaining to this instance.",
		"addModifier":"向次实例添加要修改的修饰符(属性).\n<p>\n原文:Add a modifier to this instance.",
		"ClassDescription":"代表一个属性的可变实例以及它的修饰符和数据值.",
		"getBaseValue":"获取所有属性的基准值(也就是未更改之前的默认值)\n<p>\n原文:Base value of this instance before modifiers are applied.",
		"setBaseValue":"设置基准值为某个属性.\n<p>\n原文:Set the base value of this instance.",
		"getModifiers":"获取该实例上的所有修饰符(属性).\n<p>\n原文:Get all modifiers present on this instance.",
		"removeModifier":"从此实例内移除一个修饰符(属性).\n<p>\n原文:Remove a modifier from this instance.",
		"getDefaultValue":"Gets the default value of the Attribute attached to this instance."
	},
	"ShapelessRecipe":{
		"removeIngredient":"Removes multiple instances of an ingredient from the list. If there are\nless instances then specified, all will be removed. If the data value\nis -1, only ingredients with a -1 data value will be removed.",
		"addIngredient":"Adds multiples of the specified ingredient.",
		"getResult":"Get the result of this recipe.",
		"getIngredientList":"Get the list of ingredients used for this recipe.",
		"ClassDescription":"Represents a shapeless recipe, where the arrangement of the ingredients on\nthe crafting grid does not matter."
	},
	"DelegateDeserialization":{
		"ClassDescription":"Applies to a {@link ConfigurationSerializable} that will delegate all\r\ndeserialization to another {@link ConfigurationSerializable}."
	},
	"ConversationAbandonedEvent":{
		"ClassDescription":"ConversationAbandonedEvent contains information about an abandoned\r\nconversation.",
		"gracefulExit":"Indicates how the conversation was abandoned - naturally as part of the\r\nprompt chain or prematurely via a {@link ConversationCanceller}.",
		"getCanceller":"Gets the object that caused the conversation to be abandoned.",
		"getContext":"Gets the abandoned conversation's conversation context."
	},
	"MagmaCube":{
		"ClassDescription":"Represents a MagmaCube."
	},
	"EntityPortalExitEvent":{
		"getAfter":"Gets a copy of the velocity that the entity will have after exiting the\r\nportal.",
		"getBefore":"Gets a copy of the velocity that the entity has before entering the\r\nportal.",
		"setAfter":"Sets the velocity that the entity will have after exiting the portal.",
		"ClassDescription":"Called before an entity exits a portal.\r\n<p>\r\nThis event allows you to modify the velocity of the entity after they have\r\nsuccessfully exited the portal."
	},
	"Jukebox":{
		"eject":"停止唱片机的播放,并弹出唱片.\r\n<p>\r\n原文:\r\nStop the jukebox playing and eject the current record",
		"isPlaying":"检查唱片机是否正在播放唱片.\r\n<p>\r\n原文:\r\nCheck if the jukebox is currently playing a record",
		"getPlaying":"获取唱片机正在播放的唱片.\r\n<p>\r\n原文:\r\nGet the record currently playing",
		"ClassDescription":"代表一个唱片机.",
		"setPlaying":"设置正在播放的唱片.\r\n<p>\r\n原文:\r\nSet the record currently playing"
	},
	"Vine":{
		"isOnFace":"检测藤蔓是否靠在与其相邻方块的表面. 你可以通过{@link BlockFace#NORTH_EAST}等一次检查两个表面.\r\n<p>\r\n原文:Check if the vine is attached to the specified face of an adjacent\r\nblock. You can check two faces at once by passing e.g. {@link\r\nBlockFace#NORTH_EAST}.",
		"putOnFace":"使这个藤蔓附着在相邻方块的指定表面.\r\n<p>\r\n原文:Attach the vine to the specified face of an adjacent block.",
		"ClassDescription":"代表藤蔓",
		"removeFromFace":"从相邻的方块的指定表面拆除藤蔓.\r\n<p>\r\n原文:Detach the vine from the specified face of an adjacent block."
	},
	"BarStyle":{},
	"Egg":{
		"ClassDescription":"代表抛出的鸡蛋."
	},
	"BlockPlaceEvent":{
		"canBuild":"获取这个方块是否可以建造.\r\n<p>\r\n默认情况下，如果玩家还在重生/生成服务器将阻止它们.注意，这跟BLOCK_CANBUILD是完全不同的检测.这是指玩家而不是像仙人掌一样的物理现象.\r\n<p>\r\n原文：Gets the value whether the player would be allowed to build here.\r\nDefaults to spawn if the server was going to stop them (such as, the\r\nplayer is in Spawn). Note that this is an entirely different check\r\nthan BLOCK_CANBUILD, as this refers to a player, not universe-physics\r\nrule like cactus on dirt.",
		"getPlayer":"获得是哪个玩家放置的这个方块.\r\n<p>\r\n原文：Gets the player who placed the block involved in this event.",
		"getHand":"获取放置这个方块的手.\r\n<p>\r\n原文：Gets the hand which placed the block",
		"getBlockAgainst":"获取这个方块是依附在哪个方块上放置的.\r\n<p>\r\n原文：Gets the block that this block was placed against",
		"getBlockPlaced":"获得被放置的方块(还未真正被放置).\r\n<p>\r\n原文：Clarity method for getting the placed block. Not really needed except\r\nfor reasons of clarity.",
		"ClassDescription":"当一个方块被玩家放置的时候触发此事件.\r\n<p>\r\n如果方块放置事件被取消，那么这个方块将不能被放置",
		"setBuild":"设置这个方块是否可以被放置.\r\n<p>\r\n原文：Sets the canBuild state of this event. Set to true if you want the\r\nplayer to be able to build",
		"getBlockReplacedState":"获取方块被放置后的方块状态({@link BlockState}). 通常是空气.\r\n<p>\r\n例：牌子拿在手里，放在墙上后，这个牌子的方块状态就是墙上的牌子.\r\n<p>\r\n原文：Gets the BlockState for the block which was replaced. Material type air\r\nmostly.",
		"getItemInHand":"获取玩家放置的方块的物品形式(在玩家手上).\r\n<p>\r\n原文：Gets the item in the player's hand when they placed the block."
	},
	"MushroomBlockTexture":{
		"getCapByFace":"获取关于指定方块朝向的蘑菇盖的 MushroomBlockType.\n<p>\n原文:Gets the MushroomBlockType with cap texture on the given block face.",
		"ClassDescription":"代表蘑菇方块的不同材质.",
		"getByData":"以给定的数据值获取 MushroomBlockType.\n<p>\n原文:Gets the MushroomBlockType with the given data value.",
		"getData":"获取代表这个蘑菇方块朝向的相关数据值.\n<p>\n原文:Gets the associated data value representing this mushroom block face.",
		"getCapFace":"获取这个材质所对的朝向.\n<p>\n原文:Gets the face that has cap texture."
	},
	"CreeperPowerEvent":{
		"getLightning":"返回击中爬行者的闪电\r\n<p>\r\n原文:\r\nGets the lightning bolt which is striking the Creeper.",
		"ClassDescription":"当爬行者被闪电击中时触发该事件.\r\n<p>\r\n若该事件被取消,那么爬行者将不会被强化.",
		"getCause":"返回爬行者被强(弱)化的原因\r\n<p>\r\n原文:\r\nGets the cause of the creeper being (un)powered."
	},
	"Door":{
		"getHingeCorner":"",
		"setTopHalf":"Configure this part of the door to be either the top or the bottom half",
		"setOpen":"Set whether the door is open. Undefined if <code>isTopHalf()</code> is true.",
		"isOpen":"Result is undefined if <code>isTopHalf()</code> is true.",
		"isTopHalf":"",
		"setFacingDirection":"Set the direction that this door should is facing.\n\nUndefined if <code>isTopHalf()</code> is true.",
		"getFacing":"Get the direction that this door is facing.\n\nUndefined if <code>isTopHalf()</code> is true.",
		"ClassDescription":"代表门\n\n这个类在以前被弃用，但现已经能与当今的门工作.由于Minecraft的门的内部表示，依赖于<code>isTopHalf()</code>的一些方法未被定义.",
		"getHinge":"Returns the side of the door the hinge is on.\n\nUndefined if <code>isTopHalf()</code> is false.",
		"getWoodDoorOfSpecies":"Returns the item type of a wooden door for the given tree species.",
		"setHinge":"Set whether the hinge is on the left or right side. Left is false, right is true.\n\nUndefined if <code>isTopHalf()</code> is false."
	},
	"Weather":{
		"ClassDescription":"代表与天气有关的实体，例如雷暴."
	},
	"PlayerCommandPreprocessEvent":{
		"getMessage":"获取所发送的命令的所有字符串.\r\n<p>\r\n虽然所获取的命令字符串会带有一个“/”,但你执行命令的时候,不用输入这个“/”。\r\n<p>\r\n原文:\r\nGets the command that the player is attempting to send.\r\n<p>\r\nAll commands begin with a special character; implementations do not\r\nconsider the first character when executing the content.",
		"setPlayer":"设置这个命令的执行者\r\n<p>\r\n原文:Sets the player that this command will be executed as.",
		"ClassDescription":"这个事件是,当一个玩家执行一个命令的时候将会被触发(也就是在聊天框里面输入信息以/开头的时候，算作命令，就会触发此事件)。\r\n且这个事件是早于插件的onCommand接收的命令的。\r\n如果你此时调用{@link #setMessage(String)}方法的话,其他插件收到的命令将会是你更改以后的命令。\r\n警告:如果没必要，请避免使用此事件.\r\n如果你不知道这个事件有啥用,下面的例子可能有助于你理解该事件的作用.\r\n<ul>\r\n<li>接收到一个带有变量的命令,把它用对应要替换成的\r\n<li>量来替换这个变量. 举个例子\r\n    <code>${nearbyPlayer}</code> 是一个变量，然后我们需要把它替换成离发送命令最近的玩家的名字\r\n    又或者是替换成 <code>@a</code> 和 <code>@p</code> 这样的变量\r\n    通过插件调用命令方块来执行它，而不是插件.\r\n<li>你可以用这个事件来阻止其他插件的命令执行. 比\r\n    如, 阻止玩家在竞技场内使用 <code>/home</code> 这个命令.\r\n<li>你可以简化原本复杂的命令,将它用简单的命令替代. 比如啊, 在一个玩家输\r\n    入 <code>/calias cr gamemode creative</code> 这个命令之后, 你可以将其拦截以后替换\r\n    成 <code>/cr</code> 这个命令, 然后再把这个命令直接\r\n    替换成 <code>/gamemode creative</code>. (全局性的命令别名依然\r\n    需要在Plugin.yml内注册.)\r\n</ul>\r\n<p>\r\n切忌这样使用,比如:\r\n<ul>\r\n<li>强制去执行一个命令\r\n</ul>\r\n<p>\r\n如果该事件满足条件被取消掉,对应的命令将会无法发挥任何作用.\r\n<p>\r\n另外,命令内的{@link #getMessage()}这个方法,返回的String会带有一个/\r\n切忌删除此/,否则将出现无法预料的错误.\r\n<p>\r\n原文:\r\nThis event is called whenever a player runs a command (by placing a slash\r\nat the start of their message). It is called early in the command handling\r\nprocess, and modifications in this event (via {@link #setMessage(String)})\r\nwill be shown in the behavior.\r\n<p>\r\nMany plugins will have <b>no use for this event</b>, and you should\r\nattempt to avoid using it if it is not necessary.\r\n<p>\r\nSome examples of valid uses for this event are:\r\n<ul>\r\n<li>Logging executed commands to a separate file\r\n<li>Variable substitution. For example, replacing\r\n    <code>${nearbyPlayer}</code> with the name of the nearest other\r\n    player, or simulating the <code>@a</code> and <code>@p</code>\r\n    decorators used by Command Blocks in plugins that do not handle it.\r\n<li>Conditionally blocking commands belonging to other plugins. For\r\n    example, blocking the use of the <code>/home</code> command in a\r\n    combat arena.\r\n<li>Per-sender command aliases. For example, after a player runs the\r\n    command <code>/calias cr gamemode creative</code>, the next time they\r\n    run <code>/cr</code>, it gets replaced into\r\n    <code>/gamemode creative</code>. (Global command aliases should be\r\n    done by registering the alias.)\r\n</ul>\r\n<p>\r\nExamples of incorrect uses are:\r\n<ul>\r\n<li>Using this event to run command logic\r\n</ul>\r\n<p>\r\nIf the event is cancelled, processing of the command will halt.\r\n<p>\r\nThe state of whether or not there is a slash (<code>/</code>) at the\r\nbeginning of the message should be preserved. If a slash is added or\r\nremoved, unexpected behavior may result.",
		"setMessage":"设置玩家即将要发送的命令的字符串\r\n<p>\r\n虽然所获取的命令字符串会带有一个“/”,但你执行命令的时候,不用输入这个“/”.\r\n<p>\r\nSets the command that the player will send.\r\n<p>\r\nAll commands begin with a special character; implementations do not\r\nconsider the first character when executing the content.",
		"getRecipients":"获取所有能看到这个消息的玩家\r\n<p>\r\n本方法返回的集合不保证可以改变和访问时可能自动填充。\r\n任何监听器访问这个返回的集合应该知道对于一个lazy set的实现可能会降低性能.\r\n监听器应注意到如果事件传唤者提供了一个不可修改的Set集合的话修改这个列表可能会抛出{@link\r\nUnsupportedOperationException}异常。\r\n<p>\r\n原文:\r\nGets a set of recipients that this chat message will be displayed to.\r\n<p>\r\nThe set returned is not guaranteed to be mutable and may auto-populate\r\non access. Any listener accessing the returned set should be aware that\r\nit may reduce performance for a lazy set implementation. Listeners\r\nshould be aware that modifying the list may throw {@link\r\nUnsupportedOperationException} if the event caller provides an\r\nunmodifiable set."
	},
	"EntityPortalEnterEvent":{
		"getLocation":"获取实体接触的传送门方块.\r\n<p>\r\n原文:Gets the portal block the entity is touching",
		"ClassDescription":"当一个实体与传送门接触时触发本事件."
	},
	"HelpTopicComparator":{
		"ClassDescription":"Used to impose a custom total ordering on help topics.\r\n<p>\r\nAll topics are listed in alphabetic order, but topics that start with a\r\nslash come after topics that don't."
	},
	"Bat":{
		"setAwake":"This method modifies the current waking state of this bat.\r\n<p>\r\nThis does not prevent a bat from spontaneously awaking itself, or from\r\nreattaching itself to a block.",
		"ClassDescription":"Represents a Bat",
		"isAwake":"Checks the current waking state of this bat.\r\n<p>\r\nThis does not imply any persistence of state past the method call."
	},
	"ConversationCanceller":{
		"cancelBasedOnInput":"Cancels a conversation based on user input.",
		"clone":"Allows the {@link ConversationFactory} to duplicate this\r\nConversationCanceller when creating a new {@link Conversation}.\r\n<p>\r\nImplementing this method should reset any internal object state.",
		"ClassDescription":"A ConversationCanceller is a class that cancels an active {@link\r\nConversation}. A Conversation can have more than one ConversationCanceller.",
		"setConversation":"Sets the conversation this ConversationCanceller can optionally cancel."
	},
	"LlamaSpit":{
		"ClassDescription":"Represents Llama spit."
	},
	"BlockDamageEvent":{
		"getPlayer":"获取试图损坏这个方块的玩家.\r\n<p>\r\n原文：Gets the player damaging the block involved in this event.",
		"getInstaBreak":"返回方块是否立即被玩家损坏(比如创造模式).\r\n<p>\r\n原文：Gets if the block is set to instantly break when damaged by the player.",
		"setInstaBreak":"设置方块是否立即被玩家损坏(比如创造模式).\r\n<p>\r\n原文：Sets if the block should instantly break when damaged by the player.",
		"ClassDescription":"方块被玩家损坏的事件.\r\n<p>\r\n若本事件被取消，方块将不会损坏",
		"getItemInHand":"获取当前玩家手上的物品.\r\n<p>\r\n原文：Gets the ItemStack for the item currently in the player's hand."
	},
	"PlayerEggThrowEvent":{
		"getNumHatches":"检测将被孵化生物的数量。默认由服务器进行设置.\r\n<ul>\r\n<li>7/8 几率不生成\r\n<li>31/256 ~= 1/8 的几率生成 1 只\r\n<li>1/256 的几率生成 4 只\r\n</ul>\r\n<p>\r\n原文:Get the number of mob hatches from the egg. By default the number will\r\nbe the number the server would've done\r\n<ul>\r\n<li>7/8 chance of being 0\r\n<li>31/256 ~= 1/8 chance to be 1\r\n<li>1/256 chance to be 4\r\n</ul>",
		"setHatchingType":"修改将被孵化生物的类型.\r\n<p>\r\n原文:Change the type of mob being hatched by the egg",
		"getHatchingType":"获取将被孵化的生物类型 (默认为EntityType.CHICKEN ).\r\n<p>\r\n原文:Get the type of the mob being hatched (EntityType.CHICKEN by default)",
		"getEgg":"获取事件中的鸡蛋.\r\n<p>\r\n原文:Gets the egg involved in this event.",
		"isHatching":"检测鸡蛋是否将被孵化。服务器可能设置无互动.\r\n<p>\r\n原文:Gets whether the egg is hatching or not. Will be what the server\r\nwould've done without interaction.",
		"setNumHatches":"改变将被孵化生物的数量.\r\n<p>\r\n{@link hatching}的值将覆盖该数值的作用。\r\n如果{@link hatching}被设为false, 则本数值不会生效。\r\n<p>\r\n原文:Change the number of mobs coming out of the hatched egg\r\n<p>\r\nThe boolean hatching will override this number. Ie. If hatching =\r\nfalse, this number will not matter",
		"ClassDescription":"玩家抛出鸡蛋时触发本事件，鸡蛋可能孵化.",
		"setHatching":"设置鸡蛋是否将被孵化.\r\n<p>\r\n原文：Sets whether the egg will hatch or not."
	},
	"Skull":{
		"ClassDescription":"代表头颅."
	},
	"BookMeta":{
		"setPages":"清除存在的书页，并设置书提供的书页.最多50页，每页最多256个字符.\n<p>\n原文：Clears the existing book pages, and sets the book to use the provided\npages. Maximum 50 pages with 256 characters per page.",
		"hasPages":"检测这本书是否存在页面.\n<p>\n原文：Checks for the existence of pages in the book.",
		"hasGeneration":"Checks for the existence of generation level in the book.",
		"getAuthor":"获取这本书的作者.\n<p>\n插件应该在调用这个方法之前检测hasAuthor()是否返回true.\n<p>\n原文：Gets the author of the book.\n<p>\nPlugins should check that hasAuthor() returns true before calling this\nmethod.",
		"getPageCount":"获取这本书有多少页.\n<p>\n原文：Gets the number of pages in the book.",
		"getPage":"获取这本书指定页面的内容.给定的页面必须存在.\n<p>\n原文：Gets the specified page in the book. The given page must exist.",
		"setGeneration":"Sets the generation of the book. Removes generation when given null.",
		"setTitle":"设置这本书的标题.\n<p>\n仅限16个字符.如果设置为null将移除标题.\n<p>\n原文：Sets the title of the book.\n<p>\nLimited to 16 characters. Removes title when given null.",
		"ClassDescription":"代表书({@link Material#BOOK_AND_QUILL 书与笔}或者{@link Material#WRITTEN_BOOK 成书})，可以有标题，作者，页面.",
		"getTitle":"获取这本书的标题.\n<p>\n插件应该在调用这个方法之前检测hasTitle()是否返回true.\n<p>\n原文：Gets the title of the book.\n<p>\nPlugins should check that hasTitle() returns true before calling this\nmethod.",
		"setAuthor":"设置这本书的作者.如果设置为null将移除作者.\n<p>\n原文：Sets the author of the book. Removes author when given null.",
		"getGeneration":"Gets the generation of the book.\n<p>\nPlugins should check that hasGeneration() returns true before calling\nthis method.",
		"hasAuthor":"检测这本书是否存在作者.\n<p>\n原文：Checks for the existence of an author in the book.",
		"addPage":"在这本书的最后添加页面.最多50页，每页最多256个字符.\n<p>\n原文：Adds new pages to the end of the book. Up to a maximum of 50 pages with\n256 characters per page.",
		"hasTitle":"检测书是否存在标题.\n<p>\n原文：Checks for the existence of a title in the book.",
		"getPages":"获取这本书的全部页面.\n<p>\n原文：Gets all the pages in the book.",
		"setPage":"设置这本书指定页面的内容.书页必须是连续的.\n<p>\n数据的长度最大为256个字符，超出部分将被截断.\n<p>\n原文：Sets the specified page in the book. Pages of the book must be\ncontiguous.\n<p>\nThe data can be up to 256 characters in length, additional characters\nare truncated."
	}
}